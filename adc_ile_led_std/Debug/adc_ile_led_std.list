
adc_ile_led_std.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ebc  08000ebc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000cc  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000dc  200000dc  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000055a3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000fb8  00000000  00000000  000255e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007b0  00000000  00000000  000265a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000708  00000000  00000000  00026d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000292a  00000000  00000000  00027458  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002814  00000000  00000000  00029d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c596  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002008  00000000  00000000  0002c614  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002e61c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ea4 	.word	0x08000ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000ea4 	.word	0x08000ea4

080001c8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001ea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001f6:	4313      	orrs	r3, r2
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <ADC_Init+0xa8>)
 800020e:	4013      	ands	r3, r2
 8000210:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800021a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000220:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	795b      	ldrb	r3, [r3, #5]
 8000226:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000228:	4313      	orrs	r3, r2
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4313      	orrs	r3, r2
 800022e:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000242:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	7d1b      	ldrb	r3, [r3, #20]
 8000248:	3b01      	subs	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4313      	orrs	r3, r2
 8000250:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000252:	7afb      	ldrb	r3, [r7, #11]
 8000254:	051b      	lsls	r3, r3, #20
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	c0fff7fd 	.word	0xc0fff7fd

08000274 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <ADC_CommonInit+0x48>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <ADC_CommonInit+0x4c>)
 800028a:	4013      	ands	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000296:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800029c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80002a2:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80002aa:	4a04      	ldr	r2, [pc, #16]	; (80002bc <ADC_CommonInit+0x48>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6053      	str	r3, [r2, #4]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40012300 	.word	0x40012300
 80002c0:	fffc30e0 	.word	0xfffc30e0

080002c4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80002e2:	e005      	b.n	80002f0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f023 0201 	bic.w	r2, r3, #1
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	609a      	str	r2, [r3, #8]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	70fb      	strb	r3, [r7, #3]
 800030e:	460b      	mov	r3, r1
 8000310:	70bb      	strb	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800031e:	78fb      	ldrb	r3, [r7, #3]
 8000320:	2b09      	cmp	r3, #9
 8000322:	d923      	bls.n	800036c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	f1a3 020a 	sub.w	r2, r3, #10
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	2207      	movs	r2, #7
 8000338:	fa02 f303 	lsl.w	r3, r2, r3
 800033c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	43db      	mvns	r3, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000348:	7879      	ldrb	r1, [r7, #1]
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	f1a3 020a 	sub.w	r2, r3, #10
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4313      	orrs	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	e01e      	b.n	80003aa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000372:	78fa      	ldrb	r2, [r7, #3]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	2207      	movs	r2, #7
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	43db      	mvns	r3, r3
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800038c:	7879      	ldrb	r1, [r7, #1]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003aa:	78bb      	ldrb	r3, [r7, #2]
 80003ac:	2b06      	cmp	r3, #6
 80003ae:	d821      	bhi.n	80003f4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80003b6:	78bb      	ldrb	r3, [r7, #2]
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	221f      	movs	r2, #31
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80003d2:	78f9      	ldrb	r1, [r7, #3]
 80003d4:	78bb      	ldrb	r3, [r7, #2]
 80003d6:	1e5a      	subs	r2, r3, #1
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003f2:	e047      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	2b0c      	cmp	r3, #12
 80003f8:	d821      	bhi.n	800043e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000400:	78bb      	ldrb	r3, [r7, #2]
 8000402:	1fda      	subs	r2, r3, #7
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	221f      	movs	r2, #31
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	43db      	mvns	r3, r3
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800041c:	78f9      	ldrb	r1, [r7, #3]
 800041e:	78bb      	ldrb	r3, [r7, #2]
 8000420:	1fda      	subs	r2, r3, #7
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800043c:	e022      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	f1a3 020d 	sub.w	r2, r3, #13
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	221f      	movs	r2, #31
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	43db      	mvns	r3, r3
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000462:	78f9      	ldrb	r1, [r7, #3]
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	f1a3 020d 	sub.w	r2, r3, #13
 800046a:	4613      	mov	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049c:	b29b      	uxth	r3, r3
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	460b      	mov	r3, r1
 80004b4:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	78fb      	ldrb	r3, [r7, #3]
 80004c0:	4013      	ands	r3, r2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004c6:	2301      	movs	r3, #1
 80004c8:	73fb      	strb	r3, [r7, #15]
 80004ca:	e001      	b.n	80004d0 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <DAC_SetChannel1Data+0x34>)
 80004f2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	3308      	adds	r3, #8
 80004fc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	461a      	mov	r2, r3
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40007400 	.word	0x40007400

08000518 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <DMA_Init+0xac>)
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000542:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800054e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800055a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000560:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000566:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800056c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4313      	orrs	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 0307 	bic.w	r3, r3, #7
 8000586:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4313      	orrs	r3, r2
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4313      	orrs	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	691a      	ldr	r2, [r3, #16]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60da      	str	r2, [r3, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	f01c803f 	.word	0xf01c803f

080005c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f043 0201 	orr.w	r2, r3, #1
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80005e6:	e005      	b.n	80005f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f023 0201 	bic.w	r2, r3, #1
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e001      	b.n	8000622 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <DMA_GetFlagStatus+0x6c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d802      	bhi.n	8000650 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <DMA_GetFlagStatus+0x70>)
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	e001      	b.n	8000654 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <DMA_GetFlagStatus+0x74>)
 8000652:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e002      	b.n	800066c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000672:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000676:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	4013      	ands	r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000682:	2301      	movs	r3, #1
 8000684:	75fb      	strb	r3, [r7, #23]
 8000686:	e001      	b.n	800068c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800068c:	7dfb      	ldrb	r3, [r7, #23]
}
 800068e:	4618      	mov	r0, r3
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	4002640f 	.word	0x4002640f
 80006a0:	40026000 	.word	0x40026000
 80006a4:	40026400 	.word	0x40026400

080006a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <DMA_ClearFlag+0x50>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d802      	bhi.n	80006c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <DMA_ClearFlag+0x54>)
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e001      	b.n	80006c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <DMA_ClearFlag+0x58>)
 80006c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80006dc:	e006      	b.n	80006ec <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	4002640f 	.word	0x4002640f
 80006fc:	40026000 	.word	0x40026000
 8000700:	40026400 	.word	0x40026400

08000704 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e076      	b.n	800080e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000720:	2201      	movs	r2, #1
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d165      	bne.n	8000808 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	4619      	mov	r1, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d003      	beq.n	800077a <GPIO_Init+0x76>
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d12e      	bne.n	80007d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	2103      	movs	r1, #3
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	401a      	ands	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	4619      	mov	r1, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2301      	movs	r3, #1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	43db      	mvns	r3, r3
 80007b8:	401a      	ands	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	7992      	ldrb	r2, [r2, #6]
 80007c6:	4611      	mov	r1, r2
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	b292      	uxth	r2, r2
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	b292      	uxth	r2, r2
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	2103      	movs	r1, #3
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	401a      	ands	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	4619      	mov	r1, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d985      	bls.n	8000720 <GPIO_Init+0x1c>
    }
  }
}
 8000814:	bf00      	nop
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	887a      	ldrh	r2, [r7, #2]
 8000830:	831a      	strh	r2, [r3, #24]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	887a      	ldrh	r2, [r7, #2]
 800084e:	835a      	strh	r2, [r3, #26]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800086e:	490a      	ldr	r1, [pc, #40]	; (8000898 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800087a:	e006      	b.n	800088a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <RCC_AHB1PeriphClockCmd+0x3c>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	43db      	mvns	r3, r3
 8000886:	4013      	ands	r3, r2
 8000888:	630b      	str	r3, [r1, #48]	; 0x30
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008ae:	490a      	ldr	r1, [pc, #40]	; (80008d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80008b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008ba:	e006      	b.n	80008ca <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80008c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4013      	ands	r3, r2
 80008c8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	887a      	ldrh	r2, [r7, #2]
 80008ec:	819a      	strh	r2, [r3, #12]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	891b      	ldrh	r3, [r3, #8]
 800090e:	b29a      	uxth	r2, r3
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	4013      	ands	r3, r2
 8000914:	b29b      	uxth	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e001      	b.n	8000924 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <Audio_MAL_IRQHandler+0xec>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f7ff fe74 	bl	8000630 <DMA_GetFlagStatus>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d064      	beq.n	8000a18 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d04c      	beq.n	80009f0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000956:	bf00      	nop
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe4f 	bl	8000600 <DMA_GetCmdStatus>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f7      	bne.n	8000958 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <Audio_MAL_IRQHandler+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f7ff fe98 	bl	80006a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <Audio_MAL_IRQHandler+0xf4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <Audio_MAL_IRQHandler+0xf8>)
 8000980:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098a:	4293      	cmp	r3, r2
 800098c:	bf28      	it	cs
 800098e:	4613      	movcs	r3, r2
 8000990:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <Audio_MAL_IRQHandler+0xf8>)
 8000992:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4924      	ldr	r1, [pc, #144]	; (8000a2c <Audio_MAL_IRQHandler+0xf8>)
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fdbc 	bl	8000518 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe0e 	bl	80005c8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <Audio_MAL_IRQHandler+0xf4>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b8:	d203      	bcs.n	80009c2 <Audio_MAL_IRQHandler+0x8e>
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	e000      	b.n	80009c4 <Audio_MAL_IRQHandler+0x90>
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <Audio_MAL_IRQHandler+0xfc>)
 80009c4:	4413      	add	r3, r2
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <Audio_MAL_IRQHandler+0xf4>)
 80009c8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009d6:	428b      	cmp	r3, r1
 80009d8:	bf28      	it	cs
 80009da:	460b      	movcs	r3, r1
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <Audio_MAL_IRQHandler+0xf0>)
 80009e0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fded 	bl	80005c8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80009ee:	e013      	b.n	8000a18 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fde6 	bl	80005c8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <Audio_MAL_IRQHandler+0xe8>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <Audio_MAL_IRQHandler+0xec>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f7ff fe4e 	bl	80006a8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <Audio_MAL_IRQHandler+0xf4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f904 	bl	8000c20 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	2000000c 	.word	0x2000000c
 8000a24:	20000000 	.word	0x20000000
 8000a28:	2000002c 	.word	0x2000002c
 8000a2c:	2000006c 	.word	0x2000006c
 8000a30:	0001fffe 	.word	0x0001fffe

08000a34 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a38:	f7ff ff7c 	bl	8000934 <Audio_MAL_IRQHandler>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a44:	f7ff ff76 	bl	8000934 <Audio_MAL_IRQHandler>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000a50:	2102      	movs	r1, #2
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <SPI3_IRQHandler+0x3c>)
 8000a54:	f7ff ff51 	bl	80008fa <SPI_I2S_GetFlagStatus>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d011      	beq.n	8000a82 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <SPI3_IRQHandler+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d106      	bne.n	8000a74 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000a66:	f000 f8e6 	bl	8000c36 <EVAL_AUDIO_GetSampleCallBack>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f7ff fd36 	bl	80004e0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000a74:	f000 f8df 	bl	8000c36 <EVAL_AUDIO_GetSampleCallBack>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <SPI3_IRQHandler+0x3c>)
 8000a7e:	f7ff ff2d 	bl	80008dc <SPI_I2S_SendData>
  }
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40003c00 	.word	0x40003c00
 8000a8c:	20000004 	.word	0x20000004

08000a90 <GPIO_Config>:

GPIO_InitTypeDef GPIO_InitStruct;
ADC_InitTypeDef ADC_InitStruct;
ADC_CommonInitTypeDef ADC_CommonStruct;

void GPIO_Config(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fee0 	bl	800085c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2008      	movs	r0, #8
 8000aa0:	f7ff fedc 	bl	800085c <RCC_AHB1PeriphClockCmd>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <GPIO_Config+0x68>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <GPIO_Config+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <GPIO_Config+0x68>)
 8000ab2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000ab6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <GPIO_Config+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <GPIO_Config+0x68>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <GPIO_Config+0x68>)
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <GPIO_Config+0x6c>)
 8000ac8:	f7ff fe1c 	bl	8000704 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <GPIO_Config+0x68>)
 8000ace:	2203      	movs	r2, #3
 8000ad0:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <GPIO_Config+0x68>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <GPIO_Config+0x68>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <GPIO_Config+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <GPIO_Config+0x68>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000aea:	4903      	ldr	r1, [pc, #12]	; (8000af8 <GPIO_Config+0x68>)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <GPIO_Config+0x70>)
 8000aee:	f7ff fe09 	bl	8000704 <GPIO_Init>

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000d4 	.word	0x200000d4
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40020000 	.word	0x40020000

08000b04 <ADC_Config>:

void ADC_Config(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b0e:	f7ff fec5 	bl	800089c <RCC_APB2PeriphClockCmd>

	ADC_CommonStruct.ADC_Mode = ADC_Mode_Independent;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <ADC_Config+0x40>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
	ADC_CommonStruct.ADC_Prescaler = ADC_Prescaler_Div4;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <ADC_Config+0x40>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]

	ADC_CommonInit(&ADC_CommonStruct);
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <ADC_Config+0x40>)
 8000b22:	f7ff fba7 	bl	8000274 <ADC_CommonInit>

	ADC_InitStruct.ADC_Resolution = ADC_Resolution_8b;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <ADC_Config+0x44>)
 8000b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b2c:	601a      	str	r2, [r3, #0]

	ADC_Init(ADC1, &ADC_InitStruct);
 8000b2e:	4906      	ldr	r1, [pc, #24]	; (8000b48 <ADC_Config+0x44>)
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <ADC_Config+0x48>)
 8000b32:	f7ff fb49 	bl	80001c8 <ADC_Init>

	ADC_Cmd(ADC1, ENABLE);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <ADC_Config+0x48>)
 8000b3a:	f7ff fbc3 	bl	80002c4 <ADC_Cmd>

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000c4 	.word	0x200000c4
 8000b48:	200000ac 	.word	0x200000ac
 8000b4c:	40012000 	.word	0x40012000

08000b50 <Read_ADC>:

uint8_t Read_ADC()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_56Cycles);
 8000b54:	2303      	movs	r3, #3
 8000b56:	2201      	movs	r2, #1
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <Read_ADC+0x30>)
 8000b5c:	f7ff fbce 	bl	80002fc <ADC_RegularChannelConfig>

	//ADC_SoftwareStartConv(ADC1);

	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 8000b60:	bf00      	nop
 8000b62:	2102      	movs	r1, #2
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <Read_ADC+0x30>)
 8000b66:	f7ff fca0 	bl	80004aa <ADC_GetFlagStatus>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f8      	beq.n	8000b62 <Read_ADC+0x12>

	return ADC_GetConversionValue(ADC1);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <Read_ADC+0x30>)
 8000b72:	f7ff fc8d 	bl	8000490 <ADC_GetConversionValue>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b2db      	uxtb	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012000 	.word	0x40012000

08000b84 <main>:


int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  GPIO_Config();
 8000b88:	f7ff ff82 	bl	8000a90 <GPIO_Config>
  ADC_Config();
 8000b8c:	f7ff ffba 	bl	8000b04 <ADC_Config>


  while (1)
  {

	  adc_value = Read_ADC();
 8000b90:	f7ff ffde 	bl	8000b50 <Read_ADC>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <main+0x94>)
 8000b9a:	701a      	strb	r2, [r3, #0]

	  if(adc_value <= 50){
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <main+0x94>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b32      	cmp	r3, #50	; 0x32
 8000ba2:	d805      	bhi.n	8000bb0 <main+0x2c>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_12 |  GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000ba4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ba8:	481c      	ldr	r0, [pc, #112]	; (8000c1c <main+0x98>)
 8000baa:	f7ff fe48 	bl	800083e <GPIO_ResetBits>
 8000bae:	e7ef      	b.n	8000b90 <main+0xc>
	  }
	  else if(adc_value >50 && adc_value <=100){
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <main+0x94>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b32      	cmp	r3, #50	; 0x32
 8000bb6:	d909      	bls.n	8000bcc <main+0x48>
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <main+0x94>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b64      	cmp	r3, #100	; 0x64
 8000bbe:	d805      	bhi.n	8000bcc <main+0x48>
		  GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	4815      	ldr	r0, [pc, #84]	; (8000c1c <main+0x98>)
 8000bc6:	f7ff fe2b 	bl	8000820 <GPIO_SetBits>
 8000bca:	e024      	b.n	8000c16 <main+0x92>
	  }

	  else if(adc_value >100 && adc_value <=150){
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <main+0x94>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b64      	cmp	r3, #100	; 0x64
 8000bd2:	d909      	bls.n	8000be8 <main+0x64>
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <main+0x94>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b96      	cmp	r3, #150	; 0x96
 8000bda:	d805      	bhi.n	8000be8 <main+0x64>
		  GPIO_SetBits(GPIOD,GPIO_Pin_13);
 8000bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <main+0x98>)
 8000be2:	f7ff fe1d 	bl	8000820 <GPIO_SetBits>
 8000be6:	e016      	b.n	8000c16 <main+0x92>
	  }
	  else if(adc_value >150 && adc_value <=200){
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <main+0x94>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b96      	cmp	r3, #150	; 0x96
 8000bee:	d909      	bls.n	8000c04 <main+0x80>
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <main+0x94>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2bc8      	cmp	r3, #200	; 0xc8
 8000bf6:	d805      	bhi.n	8000c04 <main+0x80>
	 		  GPIO_SetBits(GPIOD,GPIO_Pin_14);
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <main+0x98>)
 8000bfe:	f7ff fe0f 	bl	8000820 <GPIO_SetBits>
 8000c02:	e008      	b.n	8000c16 <main+0x92>
	 	  }
	  else if(adc_value > 200){
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <main+0x94>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2bc8      	cmp	r3, #200	; 0xc8
 8000c0a:	d9c1      	bls.n	8000b90 <main+0xc>
		  GPIO_SetBits(GPIOD,GPIO_Pin_15);
 8000c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <main+0x98>)
 8000c12:	f7ff fe05 	bl	8000820 <GPIO_SetBits>
	  adc_value = Read_ADC();
 8000c16:	e7bb      	b.n	8000b90 <main+0xc>
 8000c18:	200000a8 	.word	0x200000a8
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <EVAL_AUDIO_TransferComplete_CallBack>:

  }
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
  ldr  r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c72:	f000 f841 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f000 f8f1 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff ff83 	bl	8000b84 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c84:	08000ec4 	.word	0x08000ec4
  ldr  r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c8c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c90:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c94:	200000dc 	.word	0x200000dc

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>

08000c9a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <HardFault_Handler+0x4>

08000cae <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <UsageFault_Handler+0x4>

08000cc0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <SystemInit+0x60>)
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <SystemInit+0x60>)
 8000d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <SystemInit+0x64>)
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <SystemInit+0x64>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <SystemInit+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <SystemInit+0x64>)
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <SystemInit+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <SystemInit+0x64>)
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <SystemInit+0x68>)
 8000d32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <SystemInit+0x64>)
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <SystemInit+0x64>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d46:	f000 f80d 	bl	8000d64 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <SystemInit+0x60>)
 8000d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d50:	609a      	str	r2, [r3, #8]
#endif
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	24003010 	.word	0x24003010

08000d64 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d72:	4a36      	ldr	r2, [pc, #216]	; (8000e4c <SetSysClock+0xe8>)
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <SetSysClock+0xe8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <SetSysClock+0xe8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <SetSysClock+0x38>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d9a:	d1f0      	bne.n	8000d7e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <SetSysClock+0xe8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000da8:	2301      	movs	r3, #1
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	e001      	b.n	8000db2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d142      	bne.n	8000e3e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <SetSysClock+0xe8>)
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <SetSysClock+0xe8>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000dc4:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <SetSysClock+0xec>)
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <SetSysClock+0xec>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <SetSysClock+0xe8>)
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <SetSysClock+0xe8>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <SetSysClock+0xe8>)
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SetSysClock+0xe8>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <SetSysClock+0xe8>)
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <SetSysClock+0xe8>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000dee:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <SetSysClock+0xe8>)
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <SetSysClock+0xf0>)
 8000df4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <SetSysClock+0xe8>)
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <SetSysClock+0xe8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e00:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e02:	bf00      	nop
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <SetSysClock+0xe8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f9      	beq.n	8000e04 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <SetSysClock+0xf4>)
 8000e12:	f240 6205 	movw	r2, #1541	; 0x605
 8000e16:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <SetSysClock+0xe8>)
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <SetSysClock+0xe8>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f023 0303 	bic.w	r3, r3, #3
 8000e22:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <SetSysClock+0xe8>)
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <SetSysClock+0xe8>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e30:	bf00      	nop
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SetSysClock+0xe8>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d1f9      	bne.n	8000e32 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000
 8000e54:	07405408 	.word	0x07405408
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4e0d      	ldr	r6, [pc, #52]	; (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1ba4      	subs	r4, r4, r6
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2500      	movs	r5, #0
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4e0b      	ldr	r6, [pc, #44]	; (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 f818 	bl	8000ea4 <_init>
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2500      	movs	r5, #0
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e84:	4798      	blx	r3
 8000e86:	3501      	adds	r5, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8e:	4798      	blx	r3
 8000e90:	3501      	adds	r5, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08000ebc 	.word	0x08000ebc
 8000e98:	08000ebc 	.word	0x08000ebc
 8000e9c:	08000ebc 	.word	0x08000ebc
 8000ea0:	08000ec0 	.word	0x08000ec0

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
