
Blocking_delays_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          00012eac  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012ee8  20012ee8  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e622  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002252  00000000  00000000  0002e68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cd8  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc0  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000644b  00000000  00000000  00032178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000049ec  00000000  00000000  000385c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cfaf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035b8  00000000  00000000  0003d02c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000405e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000003c 	.word	0x2000003c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800364c 	.word	0x0800364c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000040 	.word	0x20000040
 80001cc:	0800364c 	.word	0x0800364c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <DAC_SetChannel1Data+0x34>)
 80001f2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	3308      	adds	r3, #8
 80001fc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	461a      	mov	r2, r3
 8000202:	887b      	ldrh	r3, [r7, #2]
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40007400 	.word	0x40007400

08000218 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <DMA_Init+0xac>)
 8000230:	4013      	ands	r3, r2
 8000232:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800025a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000260:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000266:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800026c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4313      	orrs	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f023 0307 	bic.w	r3, r3, #7
 8000286:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4313      	orrs	r3, r2
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	4313      	orrs	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	f01c803f 	.word	0xf01c803f

080002c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002e6:	e005      	b.n	80002f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 0201 	bic.w	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <DMA_GetFlagStatus+0x6c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d802      	bhi.n	8000350 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <DMA_GetFlagStatus+0x70>)
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	e001      	b.n	8000354 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <DMA_GetFlagStatus+0x74>)
 8000352:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d003      	beq.n	8000366 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e002      	b.n	800036c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000372:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000376:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	4013      	ands	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000382:	2301      	movs	r3, #1
 8000384:	75fb      	strb	r3, [r7, #23]
 8000386:	e001      	b.n	800038c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800038c:	7dfb      	ldrb	r3, [r7, #23]
}
 800038e:	4618      	mov	r0, r3
 8000390:	371c      	adds	r7, #28
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	4002640f 	.word	0x4002640f
 80003a0:	40026000 	.word	0x40026000
 80003a4:	40026400 	.word	0x40026400

080003a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <DMA_ClearFlag+0x50>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d802      	bhi.n	80003c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <DMA_ClearFlag+0x54>)
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e001      	b.n	80003c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <DMA_ClearFlag+0x58>)
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d007      	beq.n	80003de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003dc:	e006      	b.n	80003ec <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	6093      	str	r3, [r2, #8]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	4002640f 	.word	0x4002640f
 80003fc:	40026000 	.word	0x40026000
 8000400:	40026400 	.word	0x40026400

08000404 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e076      	b.n	800050e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000420:	2201      	movs	r2, #1
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	4013      	ands	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	429a      	cmp	r2, r3
 800043a:	d165      	bne.n	8000508 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	401a      	ands	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	4619      	mov	r1, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d003      	beq.n	800047a <GPIO_Init+0x76>
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	2b02      	cmp	r3, #2
 8000478:	d12e      	bne.n	80004d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	401a      	ands	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	4619      	mov	r1, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	431a      	orrs	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	2301      	movs	r3, #1
 80004b4:	408b      	lsls	r3, r1
 80004b6:	43db      	mvns	r3, r3
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	7992      	ldrb	r2, [r2, #6]
 80004c6:	4611      	mov	r1, r2
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	b292      	uxth	r2, r2
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2103      	movs	r1, #3
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	401a      	ands	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68da      	ldr	r2, [r3, #12]
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	79db      	ldrb	r3, [r3, #7]
 80004f8:	4619      	mov	r1, r3
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	431a      	orrs	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d985      	bls.n	8000420 <GPIO_Init+0x1c>
    }
  }
}
 8000514:	bf00      	nop
 8000516:	371c      	adds	r7, #28
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	4013      	ands	r3, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e001      	b.n	8000546 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000542:	2300      	movs	r3, #0
 8000544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	887b      	ldrh	r3, [r7, #2]
 8000566:	405a      	eors	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	615a      	str	r2, [r3, #20]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
 8000584:	4613      	mov	r3, r2
 8000586:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000590:	787a      	ldrb	r2, [r7, #1]
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	f003 0307 	and.w	r3, r3, #7
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3208      	adds	r2, #8
 80005b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	210f      	movs	r1, #15
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	ea02 0103 	and.w	r1, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f100 0208 	add.w	r2, r0, #8
 80005d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	08db      	lsrs	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3208      	adds	r2, #8
 80005e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3208      	adds	r2, #8
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <RCC_DeInit+0x50>)
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <RCC_DeInit+0x50>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <RCC_DeInit+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <RCC_DeInit+0x50>)
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <RCC_DeInit+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800062c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000630:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <RCC_DeInit+0x50>)
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <RCC_DeInit+0x54>)
 8000636:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <RCC_DeInit+0x50>)
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <RCC_DeInit+0x58>)
 800063c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <RCC_DeInit+0x50>)
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <RCC_DeInit+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800064a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <RCC_DeInit+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40023800 	.word	0x40023800
 8000660:	24003010 	.word	0x24003010
 8000664:	20003000 	.word	0x20003000

08000668 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000688:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f003 030c 	and.w	r3, r3, #12
 8000690:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	2b04      	cmp	r3, #4
 8000696:	d007      	beq.n	80006a8 <RCC_GetClocksFreq+0x40>
 8000698:	2b08      	cmp	r3, #8
 800069a:	d009      	beq.n	80006b0 <RCC_GetClocksFreq+0x48>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d13d      	bne.n	800071c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <RCC_GetClocksFreq+0x144>)
 80006a4:	601a      	str	r2, [r3, #0]
      break;
 80006a6:	e03d      	b.n	8000724 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <RCC_GetClocksFreq+0x148>)
 80006ac:	601a      	str	r2, [r3, #0]
      break;
 80006ae:	e039      	b.n	8000724 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	0d9b      	lsrs	r3, r3, #22
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006bc:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006c4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00c      	beq.n	80006e6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006cc:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <RCC_GetClocksFreq+0x148>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	0992      	lsrs	r2, r2, #6
 80006da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	61fb      	str	r3, [r7, #28]
 80006e4:	e00b      	b.n	80006fe <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <RCC_GetClocksFreq+0x144>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 80006f0:	6852      	ldr	r2, [r2, #4]
 80006f2:	0992      	lsrs	r2, r2, #6
 80006f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	3301      	adds	r3, #1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fbb2 f2f3 	udiv	r2, r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
      break;
 800071a:	e003      	b.n	8000724 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <RCC_GetClocksFreq+0x144>)
 8000720:	601a      	str	r2, [r3, #0]
      break;
 8000722:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800072c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000734:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <RCC_GetClocksFreq+0x14c>)
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	40da      	lsrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000754:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	0a9b      	lsrs	r3, r3, #10
 800075a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RCC_GetClocksFreq+0x14c>)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	40da      	lsrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <RCC_GetClocksFreq+0x140>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800077c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	0b5b      	lsrs	r3, r3, #13
 8000782:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <RCC_GetClocksFreq+0x14c>)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	40da      	lsrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60da      	str	r2, [r3, #12]
}
 800079c:	bf00      	nop
 800079e:	3724      	adds	r7, #36	; 0x24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800
 80007ac:	00f42400 	.word	0x00f42400
 80007b0:	007a1200 	.word	0x007a1200
 80007b4:	20000000 	.word	0x20000000

080007b8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007ca:	490a      	ldr	r1, [pc, #40]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800080e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000816:	e006      	b.n	8000826 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800081c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	43db      	mvns	r3, r3
 8000822:	4013      	ands	r3, r2
 8000824:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	887a      	ldrh	r2, [r7, #2]
 8000848:	819a      	strh	r2, [r3, #12]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	891b      	ldrh	r3, [r3, #8]
 800086a:	b29a      	uxth	r2, r3
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	4013      	ands	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e001      	b.n	8000880 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	8a1b      	ldrh	r3, [r3, #16]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	88db      	ldrh	r3, [r3, #6]
 80008be:	461a      	mov	r2, r3
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	4313      	orrs	r3, r2
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008dc:	f023 030c 	bic.w	r3, r3, #12
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	889a      	ldrh	r2, [r3, #4]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	891b      	ldrh	r3, [r3, #8]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4313      	orrs	r3, r2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	b29a      	uxth	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	8a9b      	ldrh	r3, [r3, #20]
 800090a:	b29b      	uxth	r3, r3
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000914:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	899b      	ldrh	r3, [r3, #12]
 800091a:	461a      	mov	r2, r3
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	4313      	orrs	r3, r2
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	b29a      	uxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe9a 	bl	8000668 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <USART_Init+0x168>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d003      	beq.n	8000944 <USART_Init+0xb4>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <USART_Init+0x16c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d102      	bne.n	800094a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	623b      	str	r3, [r7, #32]
 8000948:	e001      	b.n	800094e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	899b      	ldrh	r3, [r3, #12]
 8000952:	b29b      	uxth	r3, r3
 8000954:	b21b      	sxth	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	da0c      	bge.n	8000974 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	009a      	lsls	r2, r3, #2
 8000964:	441a      	add	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e00b      	b.n	800098c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000974:	6a3a      	ldr	r2, [r7, #32]
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	009a      	lsls	r2, r3, #2
 800097e:	441a      	add	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <USART_Init+0x170>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	2264      	movs	r2, #100	; 0x64
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	69fa      	ldr	r2, [r7, #28]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	899b      	ldrh	r3, [r3, #12]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da0c      	bge.n	80009d0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	3332      	adds	r3, #50	; 0x32
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <USART_Init+0x170>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ca:	4313      	orrs	r3, r2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
 80009ce:	e00b      	b.n	80009e8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	3332      	adds	r3, #50	; 0x32
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <USART_Init+0x170>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	095b      	lsrs	r3, r3, #5
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	4313      	orrs	r3, r2
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	811a      	strh	r2, [r3, #8]
}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40011000 	.word	0x40011000
 80009fc:	40011400 	.word	0x40011400
 8000a00:	51eb851f 	.word	0x51eb851f

08000a04 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d008      	beq.n	8000a28 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	899b      	ldrh	r3, [r3, #12]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a26:	e007      	b.n	8000a38 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	899b      	ldrh	r3, [r3, #12]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	819a      	strh	r2, [r3, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	809a      	strh	r2, [r3, #4]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	4013      	ands	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f103 0208 	add.w	r2, r3, #8
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f103 0208 	add.w	r2, r3, #8
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f103 0208 	add.w	r2, r3, #8
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d103      	bne.n	8000b1a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e00c      	b.n	8000b34 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e002      	b.n	8000b28 <vListInsert+0x2e>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d9f6      	bls.n	8000b22 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6892      	ldr	r2, [r2, #8]
 8000b82:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6852      	ldr	r2, [r2, #4]
 8000b8c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d103      	bne.n	8000ba0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f023 0201 	bic.w	r2, r3, #1
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3b04      	subs	r3, #4
 8000bee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <pxPortInitialiseStack+0x64>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3b14      	subs	r3, #20
 8000bfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b04      	subs	r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f06f 0202 	mvn.w	r2, #2
 8000c0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3b20      	subs	r3, #32
 8000c14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	08000c29 	.word	0x08000c29

08000c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <prvTaskExitError+0x50>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3a:	d009      	beq.n	8000c50 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c40:	f383 8811 	msr	BASEPRI, r3
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	f3bf 8f4f 	dsb	sy
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e7fe      	b.n	8000c4e <prvTaskExitError+0x26>
 8000c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c54:	f383 8811 	msr	BASEPRI, r3
 8000c58:	f3bf 8f6f 	isb	sy
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000c62:	bf00      	nop
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0fc      	beq.n	8000c64 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000010 	.word	0x20000010
 8000c7c:	00000000 	.word	0x00000000

08000c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <pxCurrentTCBConst2>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	6808      	ldr	r0, [r1, #0]
 8000c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8a:	f380 8809 	msr	PSP, r0
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	f380 8811 	msr	BASEPRI, r0
 8000c9a:	4770      	bx	lr
 8000c9c:	f3af 8000 	nop.w

08000ca0 <pxCurrentTCBConst2>:
 8000ca0:	20012c80 	.word	0x20012c80
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop

08000ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <prvPortStartFirstTask+0x24>)
 8000caa:	6800      	ldr	r0, [r0, #0]
 8000cac:	6800      	ldr	r0, [r0, #0]
 8000cae:	f380 8808 	msr	MSP, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	f380 8814 	msr	CONTROL, r0
 8000cba:	b662      	cpsie	i
 8000cbc:	b661      	cpsie	f
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	f3bf 8f6f 	isb	sy
 8000cc6:	df00      	svc	0
 8000cc8:	bf00      	nop
 8000cca:	0000      	.short	0x0000
 8000ccc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop

08000cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000cda:	4b44      	ldr	r3, [pc, #272]	; (8000dec <xPortStartScheduler+0x118>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a44      	ldr	r2, [pc, #272]	; (8000df0 <xPortStartScheduler+0x11c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d109      	bne.n	8000cf8 <xPortStartScheduler+0x24>
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e7fe      	b.n	8000cf6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <xPortStartScheduler+0x118>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <xPortStartScheduler+0x120>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d109      	bne.n	8000d16 <xPortStartScheduler+0x42>
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e7fe      	b.n	8000d14 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <xPortStartScheduler+0x124>)
 8000d18:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <xPortStartScheduler+0x128>)
 8000d3c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d44:	e009      	b.n	8000d5a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d4e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	2b80      	cmp	r3, #128	; 0x80
 8000d64:	d0ef      	beq.n	8000d46 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d009      	beq.n	8000d86 <xPortStartScheduler+0xb2>
 8000d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	e7fe      	b.n	8000d84 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d8e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <xPortStartScheduler+0x12c>)
 8000d9a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <xPortStartScheduler+0x130>)
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <xPortStartScheduler+0x130>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <xPortStartScheduler+0x130>)
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <xPortStartScheduler+0x130>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000dba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000dbc:	f000 f8d4 	bl	8000f68 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <xPortStartScheduler+0x134>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000dc6:	f000 f8f3 	bl	8000fb0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <xPortStartScheduler+0x138>)
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <xPortStartScheduler+0x138>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000dd4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000dd6:	f7ff ff67 	bl	8000ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000dda:	f001 f9ff 	bl	80021dc <vTaskSwitchContext>
    prvTaskExitError();
 8000dde:	f7ff ff23 	bl	8000c28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	410fc271 	.word	0x410fc271
 8000df4:	410fc270 	.word	0x410fc270
 8000df8:	e000e400 	.word	0xe000e400
 8000dfc:	20000058 	.word	0x20000058
 8000e00:	2000005c 	.word	0x2000005c
 8000e04:	e000ed20 	.word	0xe000ed20
 8000e08:	20000010 	.word	0x20000010
 8000e0c:	e000ef34 	.word	0xe000ef34

08000e10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1a:	f383 8811 	msr	BASEPRI, r3
 8000e1e:	f3bf 8f6f 	isb	sy
 8000e22:	f3bf 8f4f 	dsb	sy
 8000e26:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <vPortEnterCritical+0x54>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <vPortEnterCritical+0x54>)
 8000e30:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <vPortEnterCritical+0x54>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10e      	bne.n	8000e58 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <vPortEnterCritical+0x58>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <vPortEnterCritical+0x48>
 8000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	e7fe      	b.n	8000e56 <vPortEnterCritical+0x46>
    }
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000010 	.word	0x20000010
 8000e68:	e000ed04 	.word	0xe000ed04

08000e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <vPortExitCritical+0x4c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <vPortExitCritical+0x22>
 8000e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e7e:	f383 8811 	msr	BASEPRI, r3
 8000e82:	f3bf 8f6f 	isb	sy
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	e7fe      	b.n	8000e8c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <vPortExitCritical+0x4c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <vPortExitCritical+0x4c>)
 8000e96:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <vPortExitCritical+0x4c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <vPortExitCritical+0x3e>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000ec0:	f3ef 8009 	mrs	r0, PSP
 8000ec4:	f3bf 8f6f 	isb	sy
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <pxCurrentTCBConst>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f01e 0f10 	tst.w	lr, #16
 8000ed0:	bf08      	it	eq
 8000ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eda:	6010      	str	r0, [r2, #0]
 8000edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ee4:	f380 8811 	msr	BASEPRI, r0
 8000ee8:	f3bf 8f4f 	dsb	sy
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f001 f974 	bl	80021dc <vTaskSwitchContext>
 8000ef4:	f04f 0000 	mov.w	r0, #0
 8000ef8:	f380 8811 	msr	BASEPRI, r0
 8000efc:	bc09      	pop	{r0, r3}
 8000efe:	6819      	ldr	r1, [r3, #0]
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f06:	f01e 0f10 	tst.w	lr, #16
 8000f0a:	bf08      	it	eq
 8000f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000f10:	f380 8809 	msr	PSP, r0
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w

08000f20 <pxCurrentTCBConst>:
 8000f20:	20012c80 	.word	0x20012c80
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop

08000f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8000f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f32:	f383 8811 	msr	BASEPRI, r3
 8000f36:	f3bf 8f6f 	isb	sy
 8000f3a:	f3bf 8f4f 	dsb	sy
 8000f3e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000f40:	f001 f836 	bl	8001fb0 <xTaskIncrementTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SysTick_Handler+0x3c>)
 8000f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <vPortSetupTimerInterrupt+0x34>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <vPortSetupTimerInterrupt+0x38>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <vPortSetupTimerInterrupt+0x3c>)
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <vPortSetupTimerInterrupt+0x40>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	490b      	ldr	r1, [pc, #44]	; (8000fac <vPortSetupTimerInterrupt+0x44>)
 8000f80:	fba1 1303 	umull	r1, r3, r1, r3
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <vPortSetupTimerInterrupt+0x34>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010
 8000fa0:	e000e018 	.word	0xe000e018
 8000fa4:	e000e014 	.word	0xe000e014
 8000fa8:	20000028 	.word	0x20000028
 8000fac:	10624dd3 	.word	0x10624dd3

08000fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000fc0 <vPortEnableVFP+0x10>
 8000fb4:	6801      	ldr	r1, [r0, #0]
 8000fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000fba:	6001      	str	r1, [r0, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	0000      	.short	0x0000
 8000fc0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop

08000fc8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8000fd4:	f000 fed4 	bl	8001d80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <pvPortMalloc+0x1a4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000fe0:	f000 f930 	bl	8001244 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <pvPortMalloc+0x1a8>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 80a6 	bne.w	800113e <pvPortMalloc+0x176>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d02d      	beq.n	8001054 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	441a      	add	r2, r3
            if( ( xWantedSize > 0 ) &&
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d927      	bls.n	8001054 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001004:	2208      	movs	r2, #8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	2b00      	cmp	r3, #0
 8001014:	d021      	beq.n	800105a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f023 0307 	bic.w	r3, r3, #7
 800101c:	f103 0208 	add.w	r2, r3, #8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	d913      	bls.n	800104e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f023 0307 	bic.w	r3, r3, #7
 800102c:	3308      	adds	r3, #8
 800102e:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <pvPortMalloc+0x92>
        __asm volatile
 800103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e7fe      	b.n	800104c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001052:	e002      	b.n	800105a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	e000      	b.n	800105c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800105a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06d      	beq.n	800113e <pvPortMalloc+0x176>
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <pvPortMalloc+0x1ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d868      	bhi.n	800113e <pvPortMalloc+0x176>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800106c:	4b42      	ldr	r3, [pc, #264]	; (8001178 <pvPortMalloc+0x1b0>)
 800106e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <pvPortMalloc+0x1b0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001076:	e004      	b.n	8001082 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d203      	bcs.n	8001094 <pvPortMalloc+0xcc>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f1      	bne.n	8001078 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <pvPortMalloc+0x1a4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109a:	429a      	cmp	r2, r3
 800109c:	d04f      	beq.n	800113e <pvPortMalloc+0x176>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2208      	movs	r2, #8
 80010a4:	4413      	add	r3, r2
 80010a6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	2308      	movs	r3, #8
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	429a      	cmp	r2, r3
 80010be:	d91e      	bls.n	80010fe <pvPortMalloc+0x136>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <pvPortMalloc+0x11e>
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	e7fe      	b.n	80010e4 <pvPortMalloc+0x11c>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1ad2      	subs	r2, r2, r3
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010f8:	69b8      	ldr	r0, [r7, #24]
 80010fa:	f000 f905 	bl	8001308 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <pvPortMalloc+0x1ac>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <pvPortMalloc+0x1ac>)
 800110a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <pvPortMalloc+0x1ac>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <pvPortMalloc+0x1b4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d203      	bcs.n	8001120 <pvPortMalloc+0x158>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <pvPortMalloc+0x1ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <pvPortMalloc+0x1b4>)
 800111e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <pvPortMalloc+0x1a8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	431a      	orrs	r2, r3
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <pvPortMalloc+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <pvPortMalloc+0x1b8>)
 800113c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800113e:	f000 fe2d 	bl	8001d9c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <pvPortMalloc+0x198>
 800114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e7fe      	b.n	800115e <pvPortMalloc+0x196>
    return pvReturn;
 8001160:	69fb      	ldr	r3, [r7, #28]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20012c68 	.word	0x20012c68
 8001170:	20012c7c 	.word	0x20012c7c
 8001174:	20012c6c 	.word	0x20012c6c
 8001178:	20012c60 	.word	0x20012c60
 800117c:	20012c70 	.word	0x20012c70
 8001180:	20012c74 	.word	0x20012c74

08001184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d04b      	beq.n	800122e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001196:	2308      	movs	r3, #8
 8001198:	425b      	negs	r3, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <vPortFree+0xb4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <vPortFree+0x42>
 80011b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b6:	f383 8811 	msr	BASEPRI, r3
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	f3bf 8f4f 	dsb	sy
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e7fe      	b.n	80011c4 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <vPortFree+0x5e>
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	e7fe      	b.n	80011e0 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <vPortFree+0xb4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01e      	beq.n	800122e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d11a      	bne.n	800122e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <vPortFree+0xb4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001208:	f000 fdba 	bl	8001d80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <vPortFree+0xb8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4413      	add	r3, r2
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <vPortFree+0xb8>)
 8001218:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	f000 f874 	bl	8001308 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <vPortFree+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <vPortFree+0xbc>)
 8001228:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800122a:	f000 fdb7 	bl	8001d9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20012c7c 	.word	0x20012c7c
 800123c:	20012c6c 	.word	0x20012c6c
 8001240:	20012c78 	.word	0x20012c78

08001244 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800124a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800124e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <prvHeapInit+0xac>)
 8001252:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3307      	adds	r3, #7
 8001262:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f023 0307 	bic.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <prvHeapInit+0xac>)
 8001274:	4413      	add	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <prvHeapInit+0xb0>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <prvHeapInit+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001290:	2208      	movs	r2, #8
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 0307 	bic.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <prvHeapInit+0xb4>)
 80012a4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <prvHeapInit+0xb4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <prvHeapInit+0xb4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <prvHeapInit+0xb4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <prvHeapInit+0xb8>)
 80012d2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a09      	ldr	r2, [pc, #36]	; (8001300 <prvHeapInit+0xbc>)
 80012da:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <prvHeapInit+0xc0>)
 80012de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000060 	.word	0x20000060
 80012f4:	20012c60 	.word	0x20012c60
 80012f8:	20012c68 	.word	0x20012c68
 80012fc:	20012c70 	.word	0x20012c70
 8001300:	20012c6c 	.word	0x20012c6c
 8001304:	20012c7c 	.word	0x20012c7c

08001308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <prvInsertBlockIntoFreeList+0xac>)
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e002      	b.n	800131c <prvInsertBlockIntoFreeList+0x14>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3f7      	bcc.n	8001316 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	441a      	add	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d108      	bne.n	800134a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	441a      	add	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	441a      	add	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d118      	bne.n	8001390 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d00d      	beq.n	8001386 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	441a      	add	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e008      	b.n	8001398 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e003      	b.n	8001398 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d002      	beq.n	80013a6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20012c60 	.word	0x20012c60
 80013b8:	20012c68 	.word	0x20012c68

080013bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <xQueueGenericReset+0x2c>
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e7fe      	b.n	80013e6 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d05a      	beq.n	80014a4 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d056      	beq.n	80014a4 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8001406:	429a      	cmp	r2, r3
 8001408:	d34c      	bcc.n	80014a4 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 800140a:	f7ff fd01 	bl	8000e10 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001416:	6939      	ldr	r1, [r7, #16]
 8001418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	441a      	add	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2200      	movs	r2, #0
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143a:	3b01      	subs	r3, #1
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	441a      	add	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01a      	beq.n	800149e <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	3310      	adds	r3, #16
 800146c:	4618      	mov	r0, r3
 800146e:	f000 ff77 	bl	8002360 <xTaskRemoveFromEventList>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d012      	beq.n	800149e <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <xQueueGenericReset+0x110>)
 800147a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f3bf 8f4f 	dsb	sy
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	e009      	b.n	800149e <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	3310      	adds	r3, #16
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fb06 	bl	8000aa0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	3324      	adds	r3, #36	; 0x24
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fb01 	bl	8000aa0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800149e:	f7ff fce5 	bl	8000e6c <vPortExitCritical>
 80014a2:	e001      	b.n	80014a8 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <xQueueGenericReset+0x106>
 80014ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	e7fe      	b.n	80014c0 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80014c2:	697b      	ldr	r3, [r7, #20]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	e000ed04 	.word	0xe000ed04

080014d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	4613      	mov	r3, r2
 80014dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02b      	beq.n	8001540 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d323      	bcc.n	8001540 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001500:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001504:	d81c      	bhi.n	8001540 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	3350      	adds	r3, #80	; 0x50
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd57 	bl	8000fc8 <pvPortMalloc>
 800151a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01b      	beq.n	800155a <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3350      	adds	r3, #80	; 0x50
 800152a:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f813 	bl	8001564 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800153e:	e00c      	b.n	800155a <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <xQueueGenericCreate+0x8a>
 8001546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154a:	f383 8811 	msr	BASEPRI, r3
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	e7fe      	b.n	8001558 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800155a:	69fb      	ldr	r3, [r7, #28]
    }
 800155c:	4618      	mov	r0, r3
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d103      	bne.n	8001580 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e002      	b.n	8001586 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001592:	2101      	movs	r1, #1
 8001594:	69b8      	ldr	r0, [r7, #24]
 8001596:	f7ff ff11 	bl	80013bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <xQueueReceive+0x2e>
 80015c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	e7fe      	b.n	80015d8 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <xQueueReceive+0x3c>
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <xQueueReceive+0x40>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <xQueueReceive+0x42>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <xQueueReceive+0x5a>
 80015f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f6:	f383 8811 	msr	BASEPRI, r3
 80015fa:	f3bf 8f6f 	isb	sy
 80015fe:	f3bf 8f4f 	dsb	sy
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e7fe      	b.n	8001604 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001606:	f001 f8b7 	bl	8002778 <xTaskGetSchedulerState>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <xQueueReceive+0x6a>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <xQueueReceive+0x6e>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <xQueueReceive+0x70>
 800161a:	2300      	movs	r3, #0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <xQueueReceive+0x88>
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	e7fe      	b.n	8001632 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001634:	f7ff fbec 	bl	8000e10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01f      	beq.n	8001684 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001648:	f000 f88c 	bl	8001764 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	1e5a      	subs	r2, r3, #1
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	3310      	adds	r3, #16
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fe7d 	bl	8002360 <xTaskRemoveFromEventList>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <xQueueReceive+0x1b4>)
 800166e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f3bf 8f4f 	dsb	sy
 8001678:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800167c:	f7ff fbf6 	bl	8000e6c <vPortExitCritical>
                return pdPASS;
 8001680:	2301      	movs	r3, #1
 8001682:	e069      	b.n	8001758 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800168a:	f7ff fbef 	bl	8000e6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800168e:	2300      	movs	r3, #0
 8001690:	e062      	b.n	8001758 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4618      	mov	r0, r3
 800169e:	f000 ff35 	bl	800250c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016a6:	f7ff fbe1 	bl	8000e6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016aa:	f000 fb69 	bl	8001d80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016ae:	f7ff fbaf 	bl	8000e10 <vPortEnterCritical>
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016be:	d103      	bne.n	80016c8 <xQueueReceive+0x11c>
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d103      	bne.n	80016de <xQueueReceive+0x132>
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016de:	f7ff fbc5 	bl	8000e6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016e2:	1d3a      	adds	r2, r7, #4
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 ff24 	bl	8002538 <xTaskCheckForTimeOut>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d123      	bne.n	800173e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016f8:	f000 f8ac 	bl	8001854 <prvIsQueueEmpty>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d017      	beq.n	8001732 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001704:	3324      	adds	r3, #36	; 0x24
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fdc0 	bl	8002290 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001712:	f000 f84d 	bl	80017b0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001716:	f000 fb41 	bl	8001d9c <xTaskResumeAll>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d189      	bne.n	8001634 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <xQueueReceive+0x1b4>)
 8001722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	e780      	b.n	8001634 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001734:	f000 f83c 	bl	80017b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001738:	f000 fb30 	bl	8001d9c <xTaskResumeAll>
 800173c:	e77a      	b.n	8001634 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800173e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001740:	f000 f836 	bl	80017b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001744:	f000 fb2a 	bl	8001d9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800174a:	f000 f883 	bl	8001854 <prvIsQueueEmpty>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f43f af6f 	beq.w	8001634 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001756:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001758:	4618      	mov	r0, r3
 800175a:	3730      	adds	r7, #48	; 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	e000ed04 	.word	0xe000ed04

08001764 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d018      	beq.n	80017a8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	441a      	add	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d303      	bcc.n	8001798 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68d9      	ldr	r1, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	461a      	mov	r2, r3
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f001 ff3e 	bl	8003624 <memcpy>
    }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80017b8:	f7ff fb2a 	bl	8000e10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017c4:	e011      	b.n	80017ea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3324      	adds	r3, #36	; 0x24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fdc4 	bl	8002360 <xTaskRemoveFromEventList>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80017de:	f000 ff0f 	bl	8002600 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dce9      	bgt.n	80017c6 <prvUnlockQueue+0x16>
 80017f2:	e000      	b.n	80017f6 <prvUnlockQueue+0x46>
                        break;
 80017f4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80017fe:	f7ff fb35 	bl	8000e6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001802:	f7ff fb05 	bl	8000e10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800180c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800180e:	e011      	b.n	8001834 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3310      	adds	r3, #16
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fd9f 	bl	8002360 <xTaskRemoveFromEventList>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001828:	f000 feea 	bl	8002600 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	3b01      	subs	r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dce9      	bgt.n	8001810 <prvUnlockQueue+0x60>
 800183c:	e000      	b.n	8001840 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800183e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001848:	f7ff fb10 	bl	8000e6c <vPortExitCritical>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800185c:	f7ff fad8 	bl	8000e10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001868:	2301      	movs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e001      	b.n	8001872 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001872:	f7ff fafb 	bl	8000e6c <vPortExitCritical>

    return xReturn;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <vQueueAddToRegistry+0x24>
 8001890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001894:	f383 8811 	msr	BASEPRI, r3
 8001898:	f3bf 8f6f 	isb	sy
 800189c:	f3bf 8f4f 	dsb	sy
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e7fe      	b.n	80018a2 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d024      	beq.n	80018f8 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e01e      	b.n	80018f2 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <vQueueAddToRegistry+0x98>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d105      	bne.n	80018d0 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <vQueueAddToRegistry+0x98>)
 80018ca:	4413      	add	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
                    break;
 80018ce:	e013      	b.n	80018f8 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <vQueueAddToRegistry+0x6c>
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <vQueueAddToRegistry+0x98>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <vQueueAddToRegistry+0x98>)
 80018e8:	4413      	add	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	d9dd      	bls.n	80018b4 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20012dc8 	.word	0x20012dc8

0800191c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800192c:	f7ff fa70 	bl	8000e10 <vPortEnterCritical>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001936:	b25b      	sxtb	r3, r3
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d103      	bne.n	8001946 <vQueueWaitForMessageRestricted+0x2a>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800194c:	b25b      	sxtb	r3, r3
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d103      	bne.n	800195c <vQueueWaitForMessageRestricted+0x40>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800195c:	f7ff fa86 	bl	8000e6c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fcb1 	bl	80022d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff1a 	bl	80017b0 <prvUnlockQueue>
    }
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	; 0x30
 8001988:	af04      	add	r7, sp, #16
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fb15 	bl	8000fc8 <pvPortMalloc>
 800199e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00e      	beq.n	80019c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019a6:	2058      	movs	r0, #88	; 0x58
 80019a8:	f7ff fb0e 	bl	8000fc8 <pvPortMalloc>
 80019ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ba:	e005      	b.n	80019c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7ff fbe1 	bl	8001184 <vPortFree>
 80019c2:	e001      	b.n	80019c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019ce:	88fa      	ldrh	r2, [r7, #6]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f80e 	bl	8001a06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019ea:	69f8      	ldr	r0, [r7, #28]
 80019ec:	f000 f8ae 	bl	8001b4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	e002      	b.n	80019fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019fc:	69bb      	ldr	r3, [r7, #24]
    }
 80019fe:	4618      	mov	r0, r3
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b088      	sub	sp, #32
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	21a5      	movs	r1, #165	; 0xa5
 8001a20:	f001 fe0b 	bl	800363a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f023 0307 	bic.w	r3, r3, #7
 8001a3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <prvInitialiseNewTask+0x56>
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e7fe      	b.n	8001a5a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01f      	beq.n	8001aa2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e012      	b.n	8001a8e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	7819      	ldrb	r1, [r3, #0]
 8001a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	3334      	adds	r3, #52	; 0x34
 8001a78:	460a      	mov	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	d9e9      	bls.n	8001a68 <prvInitialiseNewTask+0x62>
 8001a94:	e000      	b.n	8001a98 <prvInitialiseNewTask+0x92>
            {
                break;
 8001a96:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001aa0:	e003      	b.n	8001aaa <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d909      	bls.n	8001ac4 <prvInitialiseNewTask+0xbe>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e7fe      	b.n	8001ac2 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d901      	bls.n	8001ace <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001aca:	2304      	movs	r3, #4
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	2200      	movs	r2, #0
 8001ade:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fffb 	bl	8000ae0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	3318      	adds	r3, #24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fff6 	bl	8000ae0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	f1c3 0205 	rsb	r2, r3, #5
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	3350      	adds	r3, #80	; 0x50
 8001b0e:	2204      	movs	r2, #4
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fd91 	bl	800363a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	3354      	adds	r3, #84	; 0x54
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 fd8a 	bl	800363a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	69b8      	ldr	r0, [r7, #24]
 8001b2c:	f7ff f848 	bl	8000bc0 <pxPortInitialiseStack>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b54:	f7ff f95c 	bl	8000e10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <prvAddNewTaskToReadyList+0x110>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	; (8001c5c <prvAddNewTaskToReadyList+0x110>)
 8001b60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <prvAddNewTaskToReadyList+0x114>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001b6a:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <prvAddNewTaskToReadyList+0x114>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <prvAddNewTaskToReadyList+0x110>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b78:	f000 fd66 	bl	8002648 <prvInitialiseTaskLists>
 8001b7c:	e00d      	b.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <prvAddNewTaskToReadyList+0x118>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <prvAddNewTaskToReadyList+0x114>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d802      	bhi.n	8001b9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b94:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <prvAddNewTaskToReadyList+0x114>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <prvAddNewTaskToReadyList+0x11c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <prvAddNewTaskToReadyList+0x11c>)
 8001ba2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <prvAddNewTaskToReadyList+0x11c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <prvAddNewTaskToReadyList+0x120>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4a2c      	ldr	r2, [pc, #176]	; (8001c6c <prvAddNewTaskToReadyList+0x120>)
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	492b      	ldr	r1, [pc, #172]	; (8001c70 <prvAddNewTaskToReadyList+0x124>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	3204      	adds	r2, #4
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <prvAddNewTaskToReadyList+0x124>)
 8001c02:	441a      	add	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	4918      	ldr	r1, [pc, #96]	; (8001c70 <prvAddNewTaskToReadyList+0x124>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1c59      	adds	r1, r3, #1
 8001c1c:	4814      	ldr	r0, [pc, #80]	; (8001c70 <prvAddNewTaskToReadyList+0x124>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4403      	add	r3, r0
 8001c28:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c2a:	f7ff f91f 	bl	8000e6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <prvAddNewTaskToReadyList+0x118>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00e      	beq.n	8001c54 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <prvAddNewTaskToReadyList+0x114>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <prvAddNewTaskToReadyList+0x128>)
 8001c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20012d58 	.word	0x20012d58
 8001c60:	20012c80 	.word	0x20012c80
 8001c64:	20012d64 	.word	0x20012d64
 8001c68:	20012d74 	.word	0x20012d74
 8001c6c:	20012d60 	.word	0x20012d60
 8001c70:	20012c84 	.word	0x20012c84
 8001c74:	e000ed04 	.word	0xe000ed04

08001c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <vTaskDelay+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <vTaskDelay+0x2e>
 8001c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c96:	f383 8811 	msr	BASEPRI, r3
 8001c9a:	f3bf 8f6f 	isb	sy
 8001c9e:	f3bf 8f4f 	dsb	sy
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	e7fe      	b.n	8001ca4 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001ca6:	f000 f86b 	bl	8001d80 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001caa:	2100      	movs	r1, #0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fd81 	bl	80027b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001cb2:	f000 f873 	bl	8001d9c <xTaskResumeAll>
 8001cb6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d107      	bne.n	8001cce <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <vTaskDelay+0x64>)
 8001cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f3bf 8f4f 	dsb	sy
 8001cca:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20012d80 	.word	0x20012d80
 8001cdc:	e000ed04 	.word	0xe000ed04

08001ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <vTaskStartScheduler+0x84>)
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2300      	movs	r3, #0
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2282      	movs	r2, #130	; 0x82
 8001cf2:	491d      	ldr	r1, [pc, #116]	; (8001d68 <vTaskStartScheduler+0x88>)
 8001cf4:	481d      	ldr	r0, [pc, #116]	; (8001d6c <vTaskStartScheduler+0x8c>)
 8001cf6:	f7ff fe45 	bl	8001984 <xTaskCreate>
 8001cfa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001d02:	f000 fdd7 	bl	80028b4 <xTimerCreateTimerTask>
 8001d06:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d115      	bne.n	8001d3a <vTaskStartScheduler+0x5a>
 8001d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d12:	f383 8811 	msr	BASEPRI, r3
 8001d16:	f3bf 8f6f 	isb	sy
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <vTaskStartScheduler+0x90>)
 8001d22:	f04f 32ff 	mov.w	r2, #4294967295
 8001d26:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <vTaskStartScheduler+0x94>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <vTaskStartScheduler+0x98>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001d34:	f7fe ffce 	bl	8000cd4 <xPortStartScheduler>
 8001d38:	e00d      	b.n	8001d56 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d109      	bne.n	8001d56 <vTaskStartScheduler+0x76>
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e7fe      	b.n	8001d54 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <vTaskStartScheduler+0x9c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20012d7c 	.word	0x20012d7c
 8001d68:	08003664 	.word	0x08003664
 8001d6c:	08002619 	.word	0x08002619
 8001d70:	20012d78 	.word	0x20012d78
 8001d74:	20012d64 	.word	0x20012d64
 8001d78:	20012d5c 	.word	0x20012d5c
 8001d7c:	20000014 	.word	0x20000014

08001d80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <vTaskSuspendAll+0x18>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <vTaskSuspendAll+0x18>)
 8001d8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20012d80 	.word	0x20012d80

08001d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001daa:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <xTaskResumeAll+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <xTaskResumeAll+0x2a>
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	e7fe      	b.n	8001dc4 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001dc6:	f7ff f823 	bl	8000e10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001dca:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <xTaskResumeAll+0x1d0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a66      	ldr	r2, [pc, #408]	; (8001f6c <xTaskResumeAll+0x1d0>)
 8001dd2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dd4:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <xTaskResumeAll+0x1d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80c0 	bne.w	8001f5e <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001dde:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <xTaskResumeAll+0x1d4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80bb 	beq.w	8001f5e <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001de8:	e08a      	b.n	8001f00 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <xTaskResumeAll+0x1d8>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	6a12      	ldr	r2, [r2, #32]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	69d2      	ldr	r2, [r2, #28]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3318      	adds	r3, #24
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d103      	bne.n	8001e20 <xTaskResumeAll+0x84>
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	6892      	ldr	r2, [r2, #8]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d103      	bne.n	8001e5e <xTaskResumeAll+0xc2>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <xTaskResumeAll+0x1dc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <xTaskResumeAll+0x1dc>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	493d      	ldr	r1, [pc, #244]	; (8001f7c <xTaskResumeAll+0x1e0>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3304      	adds	r3, #4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	3204      	adds	r2, #4
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <xTaskResumeAll+0x1e0>)
 8001ec4:	441a      	add	r2, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	492b      	ldr	r1, [pc, #172]	; (8001f7c <xTaskResumeAll+0x1e0>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	4827      	ldr	r0, [pc, #156]	; (8001f7c <xTaskResumeAll+0x1e0>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <xTaskResumeAll+0x1e4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <xTaskResumeAll+0x1e8>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <xTaskResumeAll+0x1d8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f af70 	bne.w	8001dea <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001f10:	f000 fc16 	bl	8002740 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <xTaskResumeAll+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001f20:	f000 f846 	bl	8001fb0 <xTaskIncrementTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <xTaskResumeAll+0x1e8>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f1      	bne.n	8001f20 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <xTaskResumeAll+0x1ec>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <xTaskResumeAll+0x1e8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <xTaskResumeAll+0x1f0>)
 8001f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f5e:	f7fe ff85 	bl	8000e6c <vPortExitCritical>

    return xAlreadyYielded;
 8001f62:	69bb      	ldr	r3, [r7, #24]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20012d80 	.word	0x20012d80
 8001f70:	20012d58 	.word	0x20012d58
 8001f74:	20012d18 	.word	0x20012d18
 8001f78:	20012d60 	.word	0x20012d60
 8001f7c:	20012c84 	.word	0x20012c84
 8001f80:	20012c80 	.word	0x20012c80
 8001f84:	20012d6c 	.word	0x20012d6c
 8001f88:	20012d68 	.word	0x20012d68
 8001f8c:	e000ed04 	.word	0xe000ed04

08001f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <xTaskGetTickCount+0x1c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20012d5c 	.word	0x20012d5c

08001fb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fba:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <xTaskIncrementTick+0x200>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80eb 	bne.w	800219a <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <xTaskIncrementTick+0x204>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001fcc:	4a79      	ldr	r2, [pc, #484]	; (80021b4 <xTaskIncrementTick+0x204>)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11f      	bne.n	8002018 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fd8:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <xTaskIncrementTick+0x208>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <xTaskIncrementTick+0x46>
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	e7fe      	b.n	8001ff4 <xTaskIncrementTick+0x44>
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <xTaskIncrementTick+0x208>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <xTaskIncrementTick+0x20c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6d      	ldr	r2, [pc, #436]	; (80021b8 <xTaskIncrementTick+0x208>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4a6d      	ldr	r2, [pc, #436]	; (80021bc <xTaskIncrementTick+0x20c>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <xTaskIncrementTick+0x210>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a6b      	ldr	r2, [pc, #428]	; (80021c0 <xTaskIncrementTick+0x210>)
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	f000 fb94 	bl	8002740 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <xTaskIncrementTick+0x214>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	429a      	cmp	r2, r3
 8002020:	f0c0 80a6 	bcc.w	8002170 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <xTaskIncrementTick+0x208>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d104      	bne.n	8002038 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <xTaskIncrementTick+0x214>)
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	601a      	str	r2, [r3, #0]
                    break;
 8002036:	e09b      	b.n	8002170 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002038:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <xTaskIncrementTick+0x208>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d203      	bcs.n	8002058 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002050:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <xTaskIncrementTick+0x214>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002056:	e08b      	b.n	8002170 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	6892      	ldr	r2, [r2, #8]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	3304      	adds	r3, #4
 800207a:	429a      	cmp	r2, r3
 800207c:	d103      	bne.n	8002086 <xTaskIncrementTick+0xd6>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1e5a      	subs	r2, r3, #1
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01e      	beq.n	80020dc <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	6a12      	ldr	r2, [r2, #32]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	69d2      	ldr	r2, [r2, #28]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3318      	adds	r3, #24
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d103      	bne.n	80020cc <xTaskIncrementTick+0x11c>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <xTaskIncrementTick+0x218>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	4a37      	ldr	r2, [pc, #220]	; (80021c8 <xTaskIncrementTick+0x218>)
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <xTaskIncrementTick+0x21c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3304      	adds	r3, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	3204      	adds	r2, #4
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1d1a      	adds	r2, r3, #4
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <xTaskIncrementTick+0x21c>)
 8002132:	441a      	add	r2, r3
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	4923      	ldr	r1, [pc, #140]	; (80021cc <xTaskIncrementTick+0x21c>)
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	481f      	ldr	r0, [pc, #124]	; (80021cc <xTaskIncrementTick+0x21c>)
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4403      	add	r3, r0
 8002158:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <xTaskIncrementTick+0x220>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	429a      	cmp	r2, r3
 8002166:	f4ff af5d 	bcc.w	8002024 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800216a:	2301      	movs	r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216e:	e759      	b.n	8002024 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <xTaskIncrementTick+0x220>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	4915      	ldr	r1, [pc, #84]	; (80021cc <xTaskIncrementTick+0x21c>)
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d901      	bls.n	800218c <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 8002188:	2301      	movs	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <xTaskIncrementTick+0x224>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e004      	b.n	80021a4 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <xTaskIncrementTick+0x228>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <xTaskIncrementTick+0x228>)
 80021a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20012d80 	.word	0x20012d80
 80021b4:	20012d5c 	.word	0x20012d5c
 80021b8:	20012d10 	.word	0x20012d10
 80021bc:	20012d14 	.word	0x20012d14
 80021c0:	20012d70 	.word	0x20012d70
 80021c4:	20012d78 	.word	0x20012d78
 80021c8:	20012d60 	.word	0x20012d60
 80021cc:	20012c84 	.word	0x20012c84
 80021d0:	20012c80 	.word	0x20012c80
 80021d4:	20012d6c 	.word	0x20012d6c
 80021d8:	20012d68 	.word	0x20012d68

080021dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <vTaskSwitchContext+0xa0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <vTaskSwitchContext+0xa4>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80021f0:	e03e      	b.n	8002270 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <vTaskSwitchContext+0xa4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <vTaskSwitchContext+0xa8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f1c3 031f 	rsb	r3, r3, #31
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	491e      	ldr	r1, [pc, #120]	; (8002288 <vTaskSwitchContext+0xac>)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	e7fe      	b.n	8002234 <vTaskSwitchContext+0x58>
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4a11      	ldr	r2, [pc, #68]	; (8002288 <vTaskSwitchContext+0xac>)
 8002242:	4413      	add	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3308      	adds	r3, #8
 8002258:	429a      	cmp	r2, r3
 800225a:	d104      	bne.n	8002266 <vTaskSwitchContext+0x8a>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a07      	ldr	r2, [pc, #28]	; (800228c <vTaskSwitchContext+0xb0>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20012d80 	.word	0x20012d80
 8002280:	20012d6c 	.word	0x20012d6c
 8002284:	20012d60 	.word	0x20012d60
 8002288:	20012c84 	.word	0x20012c84
 800228c:	20012c80 	.word	0x20012c80

08002290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <vTaskPlaceOnEventList+0x24>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e7fe      	b.n	80022b2 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <vTaskPlaceOnEventList+0x44>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3318      	adds	r3, #24
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7fe fc1c 	bl	8000afa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022c2:	2101      	movs	r1, #1
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f000 fa75 	bl	80027b4 <prvAddCurrentTaskToDelayedList>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20012c80 	.word	0x20012c80

080022d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <vTaskPlaceOnEventListRestricted+0x26>
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e7fe      	b.n	80022fc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <vTaskPlaceOnEventListRestricted+0x84>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <vTaskPlaceOnEventListRestricted+0x84>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6892      	ldr	r2, [r2, #8]
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <vTaskPlaceOnEventListRestricted+0x84>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	3218      	adds	r2, #24
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <vTaskPlaceOnEventListRestricted+0x84>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f103 0218 	add.w	r2, r3, #24
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <vTaskPlaceOnEventListRestricted+0x84>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68b8      	ldr	r0, [r7, #8]
 8002350:	f000 fa30 	bl	80027b4 <prvAddCurrentTaskToDelayedList>
    }
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20012c80 	.word	0x20012c80

08002360 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <xTaskRemoveFromEventList+0x2a>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e7fe      	b.n	8002388 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	6a12      	ldr	r2, [r2, #32]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	6a3a      	ldr	r2, [r7, #32]
 80023a0:	69d2      	ldr	r2, [r2, #28]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	3318      	adds	r3, #24
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d103      	bne.n	80023b8 <xTaskRemoveFromEventList+0x58>
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2200      	movs	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1e5a      	subs	r2, r3, #1
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <xTaskRemoveFromEventList+0x194>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d15e      	bne.n	800248e <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	68d2      	ldr	r2, [r2, #12]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	3304      	adds	r3, #4
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d103      	bne.n	80023fe <xTaskRemoveFromEventList+0x9e>
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2201      	movs	r2, #1
 8002414:	409a      	lsls	r2, r3
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <xTaskRemoveFromEventList+0x198>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <xTaskRemoveFromEventList+0x198>)
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <xTaskRemoveFromEventList+0x19c>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	3204      	adds	r2, #4
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <xTaskRemoveFromEventList+0x19c>)
 8002464:	441a      	add	r2, r3
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	615a      	str	r2, [r3, #20]
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	4923      	ldr	r1, [pc, #140]	; (80024fc <xTaskRemoveFromEventList+0x19c>)
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1c59      	adds	r1, r3, #1
 800247e:	481f      	ldr	r0, [pc, #124]	; (80024fc <xTaskRemoveFromEventList+0x19c>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	6019      	str	r1, [r3, #0]
 800248c:	e01b      	b.n	80024c6 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <xTaskRemoveFromEventList+0x1a0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	61da      	str	r2, [r3, #28]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	6a3a      	ldr	r2, [r7, #32]
 80024a8:	3218      	adds	r2, #24
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f103 0218 	add.w	r2, r3, #24
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	4a11      	ldr	r2, [pc, #68]	; (8002500 <xTaskRemoveFromEventList+0x1a0>)
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <xTaskRemoveFromEventList+0x1a0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <xTaskRemoveFromEventList+0x1a0>)
 80024c4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <xTaskRemoveFromEventList+0x1a4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d905      	bls.n	80024e0 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <xTaskRemoveFromEventList+0x1a8>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e001      	b.n	80024e4 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	372c      	adds	r7, #44	; 0x2c
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20012d80 	.word	0x20012d80
 80024f8:	20012d60 	.word	0x20012d60
 80024fc:	20012c84 	.word	0x20012c84
 8002500:	20012d18 	.word	0x20012d18
 8002504:	20012c80 	.word	0x20012c80
 8002508:	20012d6c 	.word	0x20012d6c

0800250c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <vTaskInternalSetTimeOutState+0x24>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <vTaskInternalSetTimeOutState+0x28>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	605a      	str	r2, [r3, #4]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20012d70 	.word	0x20012d70
 8002534:	20012d5c 	.word	0x20012d5c

08002538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <xTaskCheckForTimeOut+0x24>
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e7fe      	b.n	800255a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <xTaskCheckForTimeOut+0x3e>
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e7fe      	b.n	8002574 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002576:	f7fe fc4b 	bl	8000e10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <xTaskCheckForTimeOut+0xc0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d102      	bne.n	800259a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e026      	b.n	80025e8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <xTaskCheckForTimeOut+0xc4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d00a      	beq.n	80025bc <xTaskCheckForTimeOut+0x84>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d805      	bhi.n	80025bc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e015      	b.n	80025e8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d90b      	bls.n	80025de <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	1ad2      	subs	r2, r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff9a 	bl	800250c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e004      	b.n	80025e8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80025e8:	f7fe fc40 	bl	8000e6c <vPortExitCritical>

    return xReturn;
 80025ec:	69fb      	ldr	r3, [r7, #28]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20012d5c 	.word	0x20012d5c
 80025fc:	20012d70 	.word	0x20012d70

08002600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <vTaskMissedYield+0x14>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	20012d6c 	.word	0x20012d6c

08002618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002620:	f000 f852 	bl	80026c8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <prvIdleTask+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d9f9      	bls.n	8002620 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <prvIdleTask+0x2c>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800263c:	e7f0      	b.n	8002620 <prvIdleTask+0x8>
 800263e:	bf00      	nop
 8002640:	20012c84 	.word	0x20012c84
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e00c      	b.n	800266e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <prvInitialiseTaskLists+0x60>)
 8002660:	4413      	add	r3, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fa1c 	bl	8000aa0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d9ef      	bls.n	8002654 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <prvInitialiseTaskLists+0x64>)
 8002676:	f7fe fa13 	bl	8000aa0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <prvInitialiseTaskLists+0x68>)
 800267c:	f7fe fa10 	bl	8000aa0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <prvInitialiseTaskLists+0x6c>)
 8002682:	f7fe fa0d 	bl	8000aa0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <prvInitialiseTaskLists+0x70>)
 8002688:	f7fe fa0a 	bl	8000aa0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800268c:	480b      	ldr	r0, [pc, #44]	; (80026bc <prvInitialiseTaskLists+0x74>)
 800268e:	f7fe fa07 	bl	8000aa0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <prvInitialiseTaskLists+0x78>)
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <prvInitialiseTaskLists+0x64>)
 8002696:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <prvInitialiseTaskLists+0x7c>)
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <prvInitialiseTaskLists+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20012c84 	.word	0x20012c84
 80026ac:	20012ce8 	.word	0x20012ce8
 80026b0:	20012cfc 	.word	0x20012cfc
 80026b4:	20012d18 	.word	0x20012d18
 80026b8:	20012d2c 	.word	0x20012d2c
 80026bc:	20012d44 	.word	0x20012d44
 80026c0:	20012d10 	.word	0x20012d10
 80026c4:	20012d14 	.word	0x20012d14

080026c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026ce:	e019      	b.n	8002704 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80026d0:	f7fe fb9e 	bl	8000e10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <prvCheckTasksWaitingTermination+0x4c>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fa43 	bl	8000b6c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <prvCheckTasksWaitingTermination+0x50>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <prvCheckTasksWaitingTermination+0x50>)
 80026ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <prvCheckTasksWaitingTermination+0x54>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <prvCheckTasksWaitingTermination+0x54>)
 80026f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80026fa:	f7fe fbb7 	bl	8000e6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f80e 	bl	8002720 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <prvCheckTasksWaitingTermination+0x54>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e1      	bne.n	80026d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20012d2c 	.word	0x20012d2c
 8002718:	20012d58 	.word	0x20012d58
 800271c:	20012d40 	.word	0x20012d40

08002720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fd29 	bl	8001184 <vPortFree>
                vPortFree( pxTCB );
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fd26 	bl	8001184 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <prvResetNextTaskUnblockTime+0x30>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <prvResetNextTaskUnblockTime+0x34>)
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002756:	e005      	b.n	8002764 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <prvResetNextTaskUnblockTime+0x30>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <prvResetNextTaskUnblockTime+0x34>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20012d10 	.word	0x20012d10
 8002774:	20012d78 	.word	0x20012d78

08002778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <xTaskGetSchedulerState+0x34>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002786:	2301      	movs	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e008      	b.n	800279e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <xTaskGetSchedulerState+0x38>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002794:	2302      	movs	r3, #2
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	e001      	b.n	800279e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800279e:	687b      	ldr	r3, [r7, #4]
    }
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20012d64 	.word	0x20012d64
 80027b0:	20012d80 	.word	0x20012d80

080027b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <prvAddCurrentTaskToDelayedList+0xe4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3304      	adds	r3, #4
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe f9ce 	bl	8000b6c <uxListRemove>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2201      	movs	r2, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4013      	ands	r3, r2
 80027ea:	4a2d      	ldr	r2, [pc, #180]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80027ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d124      	bne.n	8002840 <prvAddCurrentTaskToDelayedList+0x8c>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d021      	beq.n	8002840 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	3204      	adds	r2, #4
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1d1a      	adds	r2, r3, #4
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002830:	615a      	str	r2, [r3, #20]
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800283e:	e026      	b.n	800288e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d209      	bcs.n	800286c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7fe f948 	bl	8000afa <vListInsert>
}
 800286a:	e010      	b.n	800288e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <prvAddCurrentTaskToDelayedList+0xf8>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7fe f93e 	bl	8000afa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d202      	bcs.n	800288e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20012d5c 	.word	0x20012d5c
 800289c:	20012c80 	.word	0x20012c80
 80028a0:	20012d60 	.word	0x20012d60
 80028a4:	20012d44 	.word	0x20012d44
 80028a8:	20012d14 	.word	0x20012d14
 80028ac:	20012d10 	.word	0x20012d10
 80028b0:	20012d78 	.word	0x20012d78

080028b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80028be:	f000 fa43 	bl	8002d48 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <xTimerCreateTimerTask+0x54>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <xTimerCreateTimerTask+0x58>)
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028d8:	490d      	ldr	r1, [pc, #52]	; (8002910 <xTimerCreateTimerTask+0x5c>)
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <xTimerCreateTimerTask+0x60>)
 80028dc:	f7ff f852 	bl	8001984 <xTaskCreate>
 80028e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <xTimerCreateTimerTask+0x48>
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e7fe      	b.n	80028fa <xTimerCreateTimerTask+0x46>
        return xReturn;
 80028fc:	687b      	ldr	r3, [r7, #4]
    }
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20012db4 	.word	0x20012db4
 800290c:	20012db8 	.word	0x20012db8
 8002910:	0800366c 	.word	0x0800366c
 8002914:	080029b9 	.word	0x080029b9

08002918 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002924:	e008      	b.n	8002938 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4413      	add	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	18d1      	adds	r1, r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f8db 	bl	8002b00 <prvInsertTimerInActiveList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ea      	bne.n	8002926 <prvReloadTimer+0xe>
        }
    }
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <prvProcessExpiredTimer+0x5c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe f8fb 	bl	8000b6c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ffc5 	bl	8002918 <prvReloadTimer>
 800298e:	e008      	b.n	80029a2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	4798      	blx	r3
    }
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20012dac 	.word	0x20012dac

080029b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f857 	bl	8002a78 <prvGetNextExpireTime>
 80029ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4619      	mov	r1, r3
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f803 	bl	80029dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80029d6:	f000 f8d5 	bl	8002b84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029da:	e7f1      	b.n	80029c0 <prvTimerTask+0x8>

080029dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80029e6:	f7ff f9cb 	bl	8001d80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f866 	bl	8002ac0 <prvSampleTimeNow>
 80029f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d130      	bne.n	8002a5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <prvProcessTimerOrBlockTask+0x3c>
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d806      	bhi.n	8002a18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a0a:	f7ff f9c7 	bl	8001d9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffa1 	bl	8002958 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a16:	e024      	b.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <prvProcessTimerOrBlockTask+0x90>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <prvProcessTimerOrBlockTask+0x50>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <prvProcessTimerOrBlockTask+0x52>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <prvProcessTimerOrBlockTask+0x94>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe ff6d 	bl	800191c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a42:	f7ff f9ab 	bl	8001d9c <xTaskResumeAll>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <prvProcessTimerOrBlockTask+0x98>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
    }
 8002a5c:	e001      	b.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002a5e:	f7ff f99d 	bl	8001d9c <xTaskResumeAll>
    }
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20012db0 	.word	0x20012db0
 8002a70:	20012db4 	.word	0x20012db4
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <prvGetNextExpireTime+0x44>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <prvGetNextExpireTime+0x16>
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	e000      	b.n	8002a90 <prvGetNextExpireTime+0x18>
 8002a8e:	2200      	movs	r2, #0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <prvGetNextExpireTime+0x44>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e001      	b.n	8002aac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002aac:	68fb      	ldr	r3, [r7, #12]
    }
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20012dac 	.word	0x20012dac

08002ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002ac8:	f7ff fa62 	bl	8001f90 <xTaskGetTickCount>
 8002acc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <prvSampleTimeNow+0x3c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d205      	bcs.n	8002ae4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002ad8:	f000 f910 	bl	8002cfc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e002      	b.n	8002aea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <prvSampleTimeNow+0x3c>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002af0:	68fb      	ldr	r3, [r7, #12]
    }
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20012dbc 	.word	0x20012dbc

08002b00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d812      	bhi.n	8002b4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e01b      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <prvInsertTimerInActiveList+0x7c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3304      	adds	r3, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7fd ffd8 	bl	8000afa <vListInsert>
 8002b4a:	e012      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d206      	bcs.n	8002b62 <prvInsertTimerInActiveList+0x62>
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e007      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <prvInsertTimerInActiveList+0x80>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fd ffc4 	bl	8000afa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002b72:	697b      	ldr	r3, [r7, #20]
    }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20012db0 	.word	0x20012db0
 8002b80:	20012dac 	.word	0x20012dac

08002b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b8a:	e0a5      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f2c0 80a2 	blt.w	8002cd8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd ffe1 	bl	8000b6c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff87 	bl	8002ac0 <prvSampleTimeNow>
 8002bb2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f200 808c 	bhi.w	8002cd6 <prvProcessReceivedCommands+0x152>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <prvProcessReceivedCommands+0x40>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002be9 	.word	0x08002be9
 8002bcc:	08002c51 	.word	0x08002c51
 8002bd0:	08002c65 	.word	0x08002c65
 8002bd4:	08002cad 	.word	0x08002cad
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002be9 	.word	0x08002be9
 8002be0:	08002c51 	.word	0x08002c51
 8002be4:	08002c65 	.word	0x08002c65
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	18d1      	adds	r1, r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	69f8      	ldr	r0, [r7, #28]
 8002c08:	f7ff ff7a 	bl	8002b00 <prvInsertTimerInActiveList>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d062      	beq.n	8002cd8 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4413      	add	r3, r2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	69f8      	ldr	r0, [r7, #28]
 8002c2e:	f7ff fe73 	bl	8002918 <prvReloadTimer>
 8002c32:	e008      	b.n	8002c46 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	69f8      	ldr	r0, [r7, #28]
 8002c4c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002c4e:	e043      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002c62:	e039      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <prvProcessReceivedCommands+0x114>
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e7fe      	b.n	8002c96 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	18d1      	adds	r1, r2, r3
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	69f8      	ldr	r0, [r7, #28]
 8002ca6:	f7ff ff2b 	bl	8002b00 <prvInsertTimerInActiveList>
                        break;
 8002caa:	e015      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8002cba:	69f8      	ldr	r0, [r7, #28]
 8002cbc:	f7fe fa62 	bl	8001184 <vPortFree>
 8002cc0:	e00a      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002cd4:	e000      	b.n	8002cd8 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002cd6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <prvProcessReceivedCommands+0x174>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f107 0108 	add.w	r1, r7, #8
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fc62 	bl	80015ac <xQueueReceive>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f af4e 	bne.w	8002b8c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20012db4 	.word	0x20012db4

08002cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d02:	e009      	b.n	8002d18 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <prvSwitchTimerLists+0x44>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fe20 	bl	8002958 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <prvSwitchTimerLists+0x44>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <prvSwitchTimerLists+0x44>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <prvSwitchTimerLists+0x48>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <prvSwitchTimerLists+0x44>)
 8002d2e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <prvSwitchTimerLists+0x48>)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6013      	str	r3, [r2, #0]
    }
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20012dac 	.word	0x20012dac
 8002d44:	20012db0 	.word	0x20012db0

08002d48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002d4c:	f7fe f860 	bl	8000e10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <prvCheckForValidListAndQueue+0x54>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11d      	bne.n	8002d94 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002d58:	4811      	ldr	r0, [pc, #68]	; (8002da0 <prvCheckForValidListAndQueue+0x58>)
 8002d5a:	f7fd fea1 	bl	8000aa0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <prvCheckForValidListAndQueue+0x5c>)
 8002d60:	f7fd fe9e 	bl	8000aa0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <prvCheckForValidListAndQueue+0x60>)
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <prvCheckForValidListAndQueue+0x58>)
 8002d68:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <prvCheckForValidListAndQueue+0x64>)
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <prvCheckForValidListAndQueue+0x5c>)
 8002d6e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d70:	2200      	movs	r2, #0
 8002d72:	210c      	movs	r1, #12
 8002d74:	200a      	movs	r0, #10
 8002d76:	f7fe fbab 	bl	80014d0 <xQueueGenericCreate>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <prvCheckForValidListAndQueue+0x54>)
 8002d7e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <prvCheckForValidListAndQueue+0x54>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <prvCheckForValidListAndQueue+0x54>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4908      	ldr	r1, [pc, #32]	; (8002db0 <prvCheckForValidListAndQueue+0x68>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fd76 	bl	8001880 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d94:	f7fe f86a 	bl	8000e6c <vPortExitCritical>
    }
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20012db4 	.word	0x20012db4
 8002da0:	20012d84 	.word	0x20012d84
 8002da4:	20012d98 	.word	0x20012d98
 8002da8:	20012dac 	.word	0x20012dac
 8002dac:	20012db0 	.word	0x20012db0
 8002db0:	08003674 	.word	0x08003674

08002db4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <Audio_MAL_IRQHandler+0xec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fd fab4 	bl	8000330 <DMA_GetFlagStatus>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d064      	beq.n	8002e98 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002dce:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d04c      	beq.n	8002e70 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002dd6:	bf00      	nop
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fa8f 	bl	8000300 <DMA_GetCmdStatus>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f7      	bne.n	8002dd8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <Audio_MAL_IRQHandler+0xec>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f7fd fad8 	bl	80003a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <Audio_MAL_IRQHandler+0xf4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <Audio_MAL_IRQHandler+0xf8>)
 8002e00:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	bf28      	it	cs
 8002e0e:	4613      	movcs	r3, r2
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <Audio_MAL_IRQHandler+0xf8>)
 8002e12:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4924      	ldr	r1, [pc, #144]	; (8002eac <Audio_MAL_IRQHandler+0xf8>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd f9fc 	bl	8000218 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fa4e 	bl	80002c8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <Audio_MAL_IRQHandler+0xf4>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d203      	bcs.n	8002e42 <Audio_MAL_IRQHandler+0x8e>
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	e000      	b.n	8002e44 <Audio_MAL_IRQHandler+0x90>
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <Audio_MAL_IRQHandler+0xfc>)
 8002e44:	4413      	add	r3, r2
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <Audio_MAL_IRQHandler+0xf4>)
 8002e48:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e56:	428b      	cmp	r3, r1
 8002e58:	bf28      	it	cs
 8002e5a:	460b      	movcs	r3, r1
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <Audio_MAL_IRQHandler+0xf0>)
 8002e60:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fa2d 	bl	80002c8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002e6e:	e013      	b.n	8002e98 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fa26 	bl	80002c8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <Audio_MAL_IRQHandler+0xe8>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <Audio_MAL_IRQHandler+0xec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7fd fa8e 	bl	80003a8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <Audio_MAL_IRQHandler+0xf4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f930 	bl	80030f8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000020 	.word	0x20000020
 8002ea0:	20000024 	.word	0x20000024
 8002ea4:	20000018 	.word	0x20000018
 8002ea8:	20012e08 	.word	0x20012e08
 8002eac:	20012e48 	.word	0x20012e48
 8002eb0:	0001fffe 	.word	0x0001fffe

08002eb4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002eb8:	f7ff ff7c 	bl	8002db4 <Audio_MAL_IRQHandler>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002ec4:	f7ff ff76 	bl	8002db4 <Audio_MAL_IRQHandler>
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	480d      	ldr	r0, [pc, #52]	; (8002f08 <SPI3_IRQHandler+0x3c>)
 8002ed4:	f7fd fcbf 	bl	8000856 <SPI_I2S_GetFlagStatus>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d011      	beq.n	8002f02 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <SPI3_IRQHandler+0x40>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d106      	bne.n	8002ef4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002ee6:	f000 f912 	bl	800310e <EVAL_AUDIO_GetSampleCallBack>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4619      	mov	r1, r3
 8002eee:	2004      	movs	r0, #4
 8002ef0:	f7fd f976 	bl	80001e0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002ef4:	f000 f90b 	bl	800310e <EVAL_AUDIO_GetSampleCallBack>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4619      	mov	r1, r3
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <SPI3_IRQHandler+0x3c>)
 8002efe:	f7fd fc9b 	bl	8000838 <SPI_I2S_SendData>
  }
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40003c00 	.word	0x40003c00
 8002f0c:	2000001c 	.word	0x2000001c

08002f10 <printMessage>:
void USART_Config();

void Task1Handler(void *params);
void Task2Handler(void *params);

void printMessage(char *message){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

	for(int i=0; i< strlen(message);i++){
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e013      	b.n	8002f46 <printMessage+0x36>

		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
 8002f1e:	bf00      	nop
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	480e      	ldr	r0, [pc, #56]	; (8002f5c <printMessage+0x4c>)
 8002f24:	f7fd fda0 	bl	8000a68 <USART_GetFlagStatus>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d1f8      	bne.n	8002f20 <printMessage+0x10>
		USART_SendData(USART2,message[i]);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4808      	ldr	r0, [pc, #32]	; (8002f5c <printMessage+0x4c>)
 8002f3c:	f7fd fd82 	bl	8000a44 <USART_SendData>
	for(int i=0; i< strlen(message);i++){
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd f942 	bl	80001d0 <strlen>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d8e4      	bhi.n	8002f1e <printMessage+0xe>
	}
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40004400 	.word	0x40004400

08002f60 <main>:

int main(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af02      	add	r7, sp, #8

	RCC_DeInit();
 8002f66:	f7fd fb51 	bl	800060c <RCC_DeInit>

	SystemCoreClockUpdate();
 8002f6a:	f000 f949 	bl	8003200 <SystemCoreClockUpdate>

	Sys_Init();
 8002f6e:	f000 f851 	bl	8003014 <Sys_Init>

	xTaskCreate(Task1Handler, "Task1",configMINIMAL_STACK_SIZE,NULL,2,&myTask1Handle);
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <main+0x40>)
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2302      	movs	r3, #2
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2282      	movs	r2, #130	; 0x82
 8002f7e:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <main+0x44>)
 8002f80:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <main+0x48>)
 8002f82:	f7fe fcff 	bl	8001984 <xTaskCreate>

	xTaskCreate(Task2Handler, "Task2", configMINIMAL_STACK_SIZE, NULL,3,&myTask2Handle);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <main+0x4c>)
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2282      	movs	r2, #130	; 0x82
 8002f92:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <main+0x50>)
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <main+0x54>)
 8002f96:	f7fe fcf5 	bl	8001984 <xTaskCreate>

	vTaskStartScheduler();
 8002f9a:	f7fe fea1 	bl	8001ce0 <vTaskStartScheduler>


  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <main+0x3e>
 8002fa0:	20012dc0 	.word	0x20012dc0
 8002fa4:	0800367c 	.word	0x0800367c
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	20012dc4 	.word	0x20012dc4
 8002fb0:	08003684 	.word	0x08003684
 8002fb4:	08002ff5 	.word	0x08002ff5

08002fb8 <Task1Handler>:

  }

}

void Task1Handler(void *params){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

	while(1){
		sprintf(mymessage, "Status of the leds: %d\r\n",
				GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15));
 8002fc0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <Task1Handler+0x30>)
 8002fc6:	f7fd faab 	bl	8000520 <GPIO_ReadOutputDataBit>
 8002fca:	4603      	mov	r3, r0
		sprintf(mymessage, "Status of the leds: %d\r\n",
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4907      	ldr	r1, [pc, #28]	; (8002fec <Task1Handler+0x34>)
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <Task1Handler+0x38>)
 8002fd2:	f000 faed 	bl	80035b0 <siprintf>

		printMessage(mymessage);
 8002fd6:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <Task1Handler+0x38>)
 8002fd8:	f7ff ff9a 	bl	8002f10 <printMessage>

		vTaskDelay(pdMS_TO_TICKS(1000));
 8002fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fe0:	f7fe fe4a 	bl	8001c78 <vTaskDelay>
		sprintf(mymessage, "Status of the leds: %d\r\n",
 8002fe4:	e7ec      	b.n	8002fc0 <Task1Handler+0x8>
 8002fe6:	bf00      	nop
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	0800368c 	.word	0x0800368c
 8002ff0:	20012e84 	.word	0x20012e84

08002ff4 <Task2Handler>:
	}

}

void Task2Handler(void *params){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	while(1){
		GPIO_ToggleBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8002ffc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003000:	4803      	ldr	r0, [pc, #12]	; (8003010 <Task2Handler+0x1c>)
 8003002:	f7fd faa7 	bl	8000554 <GPIO_ToggleBits>

		vTaskDelay(pdMS_TO_TICKS(1000));
 8003006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800300a:	f7fe fe35 	bl	8001c78 <vTaskDelay>
		GPIO_ToggleBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 800300e:	e7f5      	b.n	8002ffc <Task2Handler+0x8>
 8003010:	40020c00 	.word	0x40020c00

08003014 <Sys_Init>:

	}

}

void Sys_Init(){
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0

	GPIO_Config();
 8003018:	f000 f804 	bl	8003024 <GPIO_Config>
	USART_Config();
 800301c:	f000 f842 	bl	80030a4 <USART_Config>

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}

08003024 <GPIO_Config>:

void GPIO_Config(){
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800302a:	2101      	movs	r1, #1
 800302c:	2001      	movs	r0, #1
 800302e:	f7fd fbc3 	bl	80007b8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8003032:	2101      	movs	r1, #1
 8003034:	2008      	movs	r0, #8
 8003036:	f7fd fbbf 	bl	80007b8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303a:	463b      	mov	r3, r7
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8003042:	2302      	movs	r3, #2
 8003044:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003046:	2300      	movs	r3, #0
 8003048:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800304a:	230c      	movs	r3, #12
 800304c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800304e:	2301      	movs	r3, #1
 8003050:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8003052:	2303      	movs	r3, #3
 8003054:	717b      	strb	r3, [r7, #5]

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 8003056:	2207      	movs	r2, #7
 8003058:	2102      	movs	r1, #2
 800305a:	4810      	ldr	r0, [pc, #64]	; (800309c <GPIO_Config+0x78>)
 800305c:	f7fd fa8c 	bl	8000578 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 8003060:	2207      	movs	r2, #7
 8003062:	2103      	movs	r1, #3
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <GPIO_Config+0x78>)
 8003066:	f7fd fa87 	bl	8000578 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 800306a:	463b      	mov	r3, r7
 800306c:	4619      	mov	r1, r3
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <GPIO_Config+0x78>)
 8003070:	f7fd f9c8 	bl	8000404 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003074:	2301      	movs	r3, #1
 8003076:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003078:	2300      	movs	r3, #0
 800307a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800307c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003080:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8003086:	2303      	movs	r3, #3
 8003088:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOD,&GPIO_InitStruct);
 800308a:	463b      	mov	r3, r7
 800308c:	4619      	mov	r1, r3
 800308e:	4804      	ldr	r0, [pc, #16]	; (80030a0 <GPIO_Config+0x7c>)
 8003090:	f7fd f9b8 	bl	8000404 <GPIO_Init>



}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020c00 	.word	0x40020c00

080030a4 <USART_Config>:

void USART_Config(){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80030aa:	2101      	movs	r1, #1
 80030ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030b0:	f7fd fba2 	bl	80007f8 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStruct = {0};
 80030b4:	463b      	mov	r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]

	USART_InitStruct.USART_BaudRate = 9600;
 80030c0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80030c4:	603b      	str	r3, [r7, #0]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80030c6:	2300      	movs	r3, #0
 80030c8:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80030ca:	230c      	movs	r3, #12
 80030cc:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 80030ce:	2300      	movs	r3, #0
 80030d0:	813b      	strh	r3, [r7, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	80fb      	strh	r3, [r7, #6]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80030d6:	2300      	movs	r3, #0
 80030d8:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART2,&USART_InitStruct);
 80030da:	463b      	mov	r3, r7
 80030dc:	4619      	mov	r1, r3
 80030de:	4805      	ldr	r0, [pc, #20]	; (80030f4 <USART_Config+0x50>)
 80030e0:	f7fd fbd6 	bl	8000890 <USART_Init>

	USART_Cmd(USART2,ENABLE);
 80030e4:	2101      	movs	r1, #1
 80030e6:	4803      	ldr	r0, [pc, #12]	; (80030f4 <USART_Config+0x50>)
 80030e8:	f7fd fc8c 	bl	8000a04 <USART_Cmd>



}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40004400 	.word	0x40004400

080030f8 <EVAL_AUDIO_TransferComplete_CallBack>:



void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003102:	bf00      	nop
}
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <EVAL_AUDIO_GetSampleCallBack>:


uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003126:	e003      	b.n	8003130 <LoopCopyDataInit>

08003128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800312a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800312c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800312e:	3104      	adds	r1, #4

08003130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003138:	d3f6      	bcc.n	8003128 <CopyDataInit>
  ldr  r2, =_sbss
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800313c:	e002      	b.n	8003144 <LoopFillZerobss>

0800313e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800313e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003140:	f842 3b04 	str.w	r3, [r2], #4

08003144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003148:	d3f9      	bcc.n	800313e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800314a:	f000 f823 	bl	8003194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314e:	f000 fa45 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003152:	f7ff ff05 	bl	8002f60 <main>
  bx  lr    
 8003156:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003158:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800315c:	080036b0 	.word	0x080036b0
  ldr  r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003164:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8003168:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 800316c:	20012ee8 	.word	0x20012ee8

08003170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC_IRQHandler>

08003172 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003176:	e7fe      	b.n	8003176 <MemManage_Handler+0x4>

08003178 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800317c:	e7fe      	b.n	800317c <BusFault_Handler+0x4>

0800317e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003182:	e7fe      	b.n	8003182 <UsageFault_Handler+0x4>

08003184 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003198:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <SystemInit+0x60>)
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <SystemInit+0x60>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <SystemInit+0x64>)
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <SystemInit+0x64>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <SystemInit+0x64>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031ba:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <SystemInit+0x64>)
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <SystemInit+0x64>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <SystemInit+0x64>)
 80031cc:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <SystemInit+0x68>)
 80031ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <SystemInit+0x64>)
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <SystemInit+0x64>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <SystemInit+0x64>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80031e2:	f000 f889 	bl	80032f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e6:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <SystemInit+0x60>)
 80031e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ec:	609a      	str	r2, [r3, #8]
#endif
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	24003010 	.word	0x24003010

08003200 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	2302      	movs	r3, #2
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	2302      	movs	r3, #2
 8003218:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800321a:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d007      	beq.n	800323a <SystemCoreClockUpdate+0x3a>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d009      	beq.n	8003242 <SystemCoreClockUpdate+0x42>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d13d      	bne.n	80032ae <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 8003234:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <SystemCoreClockUpdate+0xec>)
 8003236:	601a      	str	r2, [r3, #0]
      break;
 8003238:	e03d      	b.n	80032b6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <SystemCoreClockUpdate+0xf0>)
 800323e:	601a      	str	r2, [r3, #0]
      break;
 8003240:	e039      	b.n	80032b6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0d9b      	lsrs	r3, r3, #22
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003256:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800325e:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <SystemCoreClockUpdate+0xf0>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	0992      	lsrs	r2, r2, #6
 800326c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e00b      	b.n	8003290 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <SystemCoreClockUpdate+0xec>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 8003282:	6852      	ldr	r2, [r2, #4]
 8003284:	0992      	lsrs	r2, r2, #6
 8003286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 80032aa:	6013      	str	r3, [r2, #0]
      break;
 80032ac:	e003      	b.n	80032b6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <SystemCoreClockUpdate+0xec>)
 80032b2:	601a      	str	r2, [r3, #0]
      break;
 80032b4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <SystemCoreClockUpdate+0xe4>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <SystemCoreClockUpdate+0xf4>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <SystemCoreClockUpdate+0xe8>)
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	20000028 	.word	0x20000028
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	007a1200 	.word	0x007a1200
 80032f4:	2000002c 	.word	0x2000002c

080032f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003306:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <SetSysClock+0xe8>)
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <SetSysClock+0xe8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <SetSysClock+0xe8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <SetSysClock+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800332e:	d1f0      	bne.n	8003312 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <SetSysClock+0xe8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800333c:	2301      	movs	r3, #1
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e001      	b.n	8003346 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d142      	bne.n	80033d2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <SetSysClock+0xe8>)
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <SetSysClock+0xe8>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <SetSysClock+0xec>)
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <SetSysClock+0xec>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003362:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <SetSysClock+0xe8>)
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <SetSysClock+0xe8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <SetSysClock+0xe8>)
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <SetSysClock+0xe8>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003376:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <SetSysClock+0xe8>)
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <SetSysClock+0xe8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003382:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <SetSysClock+0xe8>)
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <SetSysClock+0xf0>)
 8003388:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <SetSysClock+0xe8>)
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <SetSysClock+0xe8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003394:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003396:	bf00      	nop
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <SetSysClock+0xe8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f9      	beq.n	8003398 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <SetSysClock+0xf4>)
 80033a6:	f240 6205 	movw	r2, #1541	; 0x605
 80033aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <SetSysClock+0xe8>)
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <SetSysClock+0xe8>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80033b8:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <SetSysClock+0xe8>)
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <SetSysClock+0xe8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80033c4:	bf00      	nop
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <SetSysClock+0xe8>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d1f9      	bne.n	80033c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000
 80033e8:	07405408 	.word	0x07405408
 80033ec:	40023c00 	.word	0x40023c00

080033f0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
	int div = 1;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003400:	e004      	b.n	800340c <ts_itoa+0x1c>
		div *= base;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	fbb2 f2f3 	udiv	r2, r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d2f3      	bcs.n	8003402 <ts_itoa+0x12>

	while (div != 0)
 800341a:	e029      	b.n	8003470 <ts_itoa+0x80>
	{
		int num = d/div;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	fbb3 f1f2 	udiv	r1, r3, r2
 800342e:	fb02 f201 	mul.w	r2, r2, r1
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	fb92 f3f3 	sdiv	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b09      	cmp	r3, #9
 8003444:	dd0a      	ble.n	800345c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6011      	str	r1, [r2, #0]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	3237      	adds	r2, #55	; 0x37
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e009      	b.n	8003470 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	3230      	adds	r2, #48	; 0x30
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1d2      	bne.n	800341c <ts_itoa+0x2c>
	}
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b088      	sub	sp, #32
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003492:	e07d      	b.n	8003590 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b25      	cmp	r3, #37	; 0x25
 800349a:	d171      	bne.n	8003580 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d01e      	beq.n	80034e8 <ts_formatstring+0x66>
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	dc06      	bgt.n	80034bc <ts_formatstring+0x3a>
 80034ae:	2b58      	cmp	r3, #88	; 0x58
 80034b0:	d050      	beq.n	8003554 <ts_formatstring+0xd2>
 80034b2:	2b63      	cmp	r3, #99	; 0x63
 80034b4:	d00e      	beq.n	80034d4 <ts_formatstring+0x52>
 80034b6:	2b25      	cmp	r3, #37	; 0x25
 80034b8:	d058      	beq.n	800356c <ts_formatstring+0xea>
 80034ba:	e05d      	b.n	8003578 <ts_formatstring+0xf6>
 80034bc:	2b73      	cmp	r3, #115	; 0x73
 80034be:	d02b      	beq.n	8003518 <ts_formatstring+0x96>
 80034c0:	2b73      	cmp	r3, #115	; 0x73
 80034c2:	dc02      	bgt.n	80034ca <ts_formatstring+0x48>
 80034c4:	2b69      	cmp	r3, #105	; 0x69
 80034c6:	d00f      	beq.n	80034e8 <ts_formatstring+0x66>
 80034c8:	e056      	b.n	8003578 <ts_formatstring+0xf6>
 80034ca:	2b75      	cmp	r3, #117	; 0x75
 80034cc:	d037      	beq.n	800353e <ts_formatstring+0xbc>
 80034ce:	2b78      	cmp	r3, #120	; 0x78
 80034d0:	d040      	beq.n	8003554 <ts_formatstring+0xd2>
 80034d2:	e051      	b.n	8003578 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60fa      	str	r2, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	1d11      	adds	r1, r2, #4
 80034de:	6079      	str	r1, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
				break;
 80034e6:	e047      	b.n	8003578 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da07      	bge.n	8003508 <ts_formatstring+0x86>
					{
						val *= -1;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	425b      	negs	r3, r3
 80034fc:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	60fa      	str	r2, [r7, #12]
 8003504:	222d      	movs	r2, #45	; 0x2d
 8003506:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003508:	69f9      	ldr	r1, [r7, #28]
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	220a      	movs	r2, #10
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff6d 	bl	80033f0 <ts_itoa>
				}
				break;
 8003516:	e02f      	b.n	8003578 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003522:	e007      	b.n	8003534 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	60fa      	str	r2, [r7, #12]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	1c51      	adds	r1, r2, #1
 800352e:	61b9      	str	r1, [r7, #24]
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f3      	bne.n	8003524 <ts_formatstring+0xa2>
					}
				}
				break;
 800353c:	e01c      	b.n	8003578 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	220a      	movs	r2, #10
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff4f 	bl	80033f0 <ts_itoa>
				break;
 8003552:	e011      	b.n	8003578 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	2210      	movs	r2, #16
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff43 	bl	80033f0 <ts_itoa>
				break;
 800356a:	e005      	b.n	8003578 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	60fa      	str	r2, [r7, #12]
 8003572:	2225      	movs	r2, #37	; 0x25
 8003574:	701a      	strb	r2, [r3, #0]
				  break;
 8003576:	bf00      	nop
			}
			fmt++;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	3301      	adds	r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	e007      	b.n	8003590 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60fa      	str	r2, [r7, #12]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	1c51      	adds	r1, r2, #1
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af7d 	bne.w	8003494 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	461a      	mov	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad3      	subs	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80035b0:	b40e      	push	{r1, r2, r3}
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80035ba:	f107 0320 	add.w	r3, r7, #32
 80035be:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff5c 	bl	8003482 <ts_formatstring>
 80035ca:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035d8:	b003      	add	sp, #12
 80035da:	4770      	bx	lr

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4e0d      	ldr	r6, [pc, #52]	; (8003614 <__libc_init_array+0x38>)
 80035e0:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e2:	1ba4      	subs	r4, r4, r6
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	2500      	movs	r5, #0
 80035e8:	42a5      	cmp	r5, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	4e0b      	ldr	r6, [pc, #44]	; (800361c <__libc_init_array+0x40>)
 80035ee:	4c0c      	ldr	r4, [pc, #48]	; (8003620 <__libc_init_array+0x44>)
 80035f0:	f000 f82c 	bl	800364c <_init>
 80035f4:	1ba4      	subs	r4, r4, r6
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	2500      	movs	r5, #0
 80035fa:	42a5      	cmp	r5, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003604:	4798      	blx	r3
 8003606:	3501      	adds	r5, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800360e:	4798      	blx	r3
 8003610:	3501      	adds	r5, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	080036a8 	.word	0x080036a8
 8003618:	080036a8 	.word	0x080036a8
 800361c:	080036a8 	.word	0x080036a8
 8003620:	080036ac 	.word	0x080036ac

08003624 <memcpy>:
 8003624:	b510      	push	{r4, lr}
 8003626:	1e43      	subs	r3, r0, #1
 8003628:	440a      	add	r2, r1
 800362a:	4291      	cmp	r1, r2
 800362c:	d100      	bne.n	8003630 <memcpy+0xc>
 800362e:	bd10      	pop	{r4, pc}
 8003630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003638:	e7f7      	b.n	800362a <memcpy+0x6>

0800363a <memset>:
 800363a:	4402      	add	r2, r0
 800363c:	4603      	mov	r3, r0
 800363e:	4293      	cmp	r3, r2
 8003640:	d100      	bne.n	8003644 <memset+0xa>
 8003642:	4770      	bx	lr
 8003644:	f803 1b01 	strb.w	r1, [r3], #1
 8003648:	e7f9      	b.n	800363e <memset+0x4>
	...

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
