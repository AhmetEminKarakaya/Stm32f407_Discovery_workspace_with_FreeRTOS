
change_priority_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08003c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          00012eb0  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012eec  20012eec  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f285  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025df  00000000  00000000  0002f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d98  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c60  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069a6  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004db0  00000000  00000000  00039c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ea1e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000388c  00000000  00000000  0003ea9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00042328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000003c 	.word	0x2000003c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b6c 	.word	0x08003b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000040 	.word	0x20000040
 80001cc:	08003b6c 	.word	0x08003b6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <DAC_SetChannel1Data+0x34>)
 80001f2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	3308      	adds	r3, #8
 80001fc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	461a      	mov	r2, r3
 8000202:	887b      	ldrh	r3, [r7, #2]
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40007400 	.word	0x40007400

08000218 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <DMA_Init+0xac>)
 8000230:	4013      	ands	r3, r2
 8000232:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800025a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000260:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000266:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800026c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4313      	orrs	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f023 0307 	bic.w	r3, r3, #7
 8000286:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4313      	orrs	r3, r2
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	4313      	orrs	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	f01c803f 	.word	0xf01c803f

080002c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002e6:	e005      	b.n	80002f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 0201 	bic.w	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <DMA_GetFlagStatus+0x6c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d802      	bhi.n	8000350 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <DMA_GetFlagStatus+0x70>)
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	e001      	b.n	8000354 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <DMA_GetFlagStatus+0x74>)
 8000352:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d003      	beq.n	8000366 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e002      	b.n	800036c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000372:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000376:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	4013      	ands	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000382:	2301      	movs	r3, #1
 8000384:	75fb      	strb	r3, [r7, #23]
 8000386:	e001      	b.n	800038c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800038c:	7dfb      	ldrb	r3, [r7, #23]
}
 800038e:	4618      	mov	r0, r3
 8000390:	371c      	adds	r7, #28
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	4002640f 	.word	0x4002640f
 80003a0:	40026000 	.word	0x40026000
 80003a4:	40026400 	.word	0x40026400

080003a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <DMA_ClearFlag+0x50>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d802      	bhi.n	80003c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <DMA_ClearFlag+0x54>)
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e001      	b.n	80003c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <DMA_ClearFlag+0x58>)
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d007      	beq.n	80003de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003dc:	e006      	b.n	80003ec <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	6093      	str	r3, [r2, #8]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	4002640f 	.word	0x4002640f
 80003fc:	40026000 	.word	0x40026000
 8000400:	40026400 	.word	0x40026400

08000404 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000410:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <EXTI_Init+0xe0>)
 8000412:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	799b      	ldrb	r3, [r3, #6]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d04f      	beq.n	80004bc <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800041c:	4931      	ldr	r1, [pc, #196]	; (80004e4 <EXTI_Init+0xe0>)
 800041e:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <EXTI_Init+0xe0>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	43db      	mvns	r3, r3
 8000428:	4013      	ands	r3, r2
 800042a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800042c:	492d      	ldr	r1, [pc, #180]	; (80004e4 <EXTI_Init+0xe0>)
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <EXTI_Init+0xe0>)
 8000430:	685a      	ldr	r2, [r3, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	43db      	mvns	r3, r3
 8000438:	4013      	ands	r3, r2
 800043a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	4413      	add	r3, r2
 8000446:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	6811      	ldr	r1, [r2, #0]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000456:	4923      	ldr	r1, [pc, #140]	; (80004e4 <EXTI_Init+0xe0>)
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <EXTI_Init+0xe0>)
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	43db      	mvns	r3, r3
 8000462:	4013      	ands	r3, r2
 8000464:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000466:	491f      	ldr	r1, [pc, #124]	; (80004e4 <EXTI_Init+0xe0>)
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <EXTI_Init+0xe0>)
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	43db      	mvns	r3, r3
 8000472:	4013      	ands	r3, r2
 8000474:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2b10      	cmp	r3, #16
 800047c:	d10e      	bne.n	800049c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800047e:	4919      	ldr	r1, [pc, #100]	; (80004e4 <EXTI_Init+0xe0>)
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <EXTI_Init+0xe0>)
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4313      	orrs	r3, r2
 800048a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800048c:	4915      	ldr	r1, [pc, #84]	; (80004e4 <EXTI_Init+0xe0>)
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <EXTI_Init+0xe0>)
 8000490:	68da      	ldr	r2, [r3, #12]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4313      	orrs	r3, r2
 8000498:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800049a:	e01d      	b.n	80004d8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <EXTI_Init+0xe0>)
 800049e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	4413      	add	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	6811      	ldr	r1, [r2, #0]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	e00d      	b.n	80004d8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	461a      	mov	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	4413      	add	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	6811      	ldr	r1, [r2, #0]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	6812      	ldr	r2, [r2, #0]
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	400a      	ands	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40013c00 	.word	0x40013c00

080004e8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI_ClearITPendingBit+0x1c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6153      	str	r3, [r2, #20]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40013c00 	.word	0x40013c00

08000508 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e076      	b.n	8000612 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000524:	2201      	movs	r2, #1
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	d165      	bne.n	800060c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2103      	movs	r1, #3
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	4619      	mov	r1, r3
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d003      	beq.n	800057e <GPIO_Init+0x76>
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d12e      	bne.n	80005dc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	4619      	mov	r1, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	2301      	movs	r3, #1
 80005b8:	408b      	lsls	r3, r1
 80005ba:	43db      	mvns	r3, r3
 80005bc:	401a      	ands	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	7992      	ldrb	r2, [r2, #6]
 80005ca:	4611      	mov	r1, r2
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	b292      	uxth	r2, r2
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	b292      	uxth	r2, r2
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	2103      	movs	r1, #3
 80005e8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	401a      	ands	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d985      	bls.n	8000524 <GPIO_Init+0x1c>
    }
  }
}
 8000618:	bf00      	nop
 800061a:	371c      	adds	r7, #28
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e001      	b.n	800064a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
 8000664:	4613      	mov	r3, r2
 8000666:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000670:	787a      	ldrb	r2, [r7, #1]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000680:	887b      	ldrh	r3, [r7, #2]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b29b      	uxth	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	b29b      	uxth	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3208      	adds	r2, #8
 8000694:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	210f      	movs	r1, #15
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	ea02 0103 	and.w	r1, r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f100 0208 	add.w	r2, r0, #8
 80006b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3208      	adds	r2, #8
 80006c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3208      	adds	r2, #8
 80006d8:	68b9      	ldr	r1, [r7, #8]
 80006da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <RCC_DeInit+0x50>)
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <RCC_DeInit+0x50>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <RCC_DeInit+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <RCC_DeInit+0x50>)
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <RCC_DeInit+0x50>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800070c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000710:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <RCC_DeInit+0x50>)
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <RCC_DeInit+0x54>)
 8000716:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <RCC_DeInit+0x50>)
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <RCC_DeInit+0x58>)
 800071c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <RCC_DeInit+0x50>)
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <RCC_DeInit+0x50>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800072a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <RCC_DeInit+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800
 8000740:	24003010 	.word	0x24003010
 8000744:	20003000 	.word	0x20003000

08000748 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000748:	b480      	push	{r7}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	2302      	movs	r3, #2
 8000766:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000768:	4b47      	ldr	r3, [pc, #284]	; (8000888 <RCC_GetClocksFreq+0x140>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 030c 	and.w	r3, r3, #12
 8000770:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	2b04      	cmp	r3, #4
 8000776:	d007      	beq.n	8000788 <RCC_GetClocksFreq+0x40>
 8000778:	2b08      	cmp	r3, #8
 800077a:	d009      	beq.n	8000790 <RCC_GetClocksFreq+0x48>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d13d      	bne.n	80007fc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a42      	ldr	r2, [pc, #264]	; (800088c <RCC_GetClocksFreq+0x144>)
 8000784:	601a      	str	r2, [r3, #0]
      break;
 8000786:	e03d      	b.n	8000804 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a41      	ldr	r2, [pc, #260]	; (8000890 <RCC_GetClocksFreq+0x148>)
 800078c:	601a      	str	r2, [r3, #0]
      break;
 800078e:	e039      	b.n	8000804 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000790:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <RCC_GetClocksFreq+0x140>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	0d9b      	lsrs	r3, r3, #22
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <RCC_GetClocksFreq+0x140>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007a4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00c      	beq.n	80007c6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007ac:	4a38      	ldr	r2, [pc, #224]	; (8000890 <RCC_GetClocksFreq+0x148>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b4:	4a34      	ldr	r2, [pc, #208]	; (8000888 <RCC_GetClocksFreq+0x140>)
 80007b6:	6852      	ldr	r2, [r2, #4]
 80007b8:	0992      	lsrs	r2, r2, #6
 80007ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	e00b      	b.n	80007de <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007c6:	4a31      	ldr	r2, [pc, #196]	; (800088c <RCC_GetClocksFreq+0x144>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4a2e      	ldr	r2, [pc, #184]	; (8000888 <RCC_GetClocksFreq+0x140>)
 80007d0:	6852      	ldr	r2, [r2, #4]
 80007d2:	0992      	lsrs	r2, r2, #6
 80007d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <RCC_GetClocksFreq+0x140>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	3301      	adds	r3, #1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]
      break;
 80007fa:	e003      	b.n	8000804 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <RCC_GetClocksFreq+0x144>)
 8000800:	601a      	str	r2, [r3, #0]
      break;
 8000802:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <RCC_GetClocksFreq+0x140>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800080c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	091b      	lsrs	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <RCC_GetClocksFreq+0x14c>)
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	40da      	lsrs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <RCC_GetClocksFreq+0x140>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000834:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	0a9b      	lsrs	r3, r3, #10
 800083a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800083c:	4a15      	ldr	r2, [pc, #84]	; (8000894 <RCC_GetClocksFreq+0x14c>)
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	40da      	lsrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <RCC_GetClocksFreq+0x140>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800085c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	0b5b      	lsrs	r3, r3, #13
 8000862:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <RCC_GetClocksFreq+0x14c>)
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	40da      	lsrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3724      	adds	r7, #36	; 0x24
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800
 800088c:	00f42400 	.word	0x00f42400
 8000890:	007a1200 	.word	0x007a1200
 8000894:	20000000 	.word	0x20000000

08000898 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d006      	beq.n	80008b8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008aa:	490a      	ldr	r1, [pc, #40]	; (80008d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008b6:	e006      	b.n	80008c6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008b8:	4906      	ldr	r1, [pc, #24]	; (80008d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	4013      	ands	r3, r2
 80008c4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008ea:	490a      	ldr	r1, [pc, #40]	; (8000914 <RCC_APB1PeriphClockCmd+0x3c>)
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <RCC_APB1PeriphClockCmd+0x3c>)
 80008ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008f6:	e006      	b.n	8000906 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <RCC_APB1PeriphClockCmd+0x3c>)
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <RCC_APB1PeriphClockCmd+0x3c>)
 80008fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	43db      	mvns	r3, r3
 8000902:	4013      	ands	r3, r2
 8000904:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800092a:	490a      	ldr	r1, [pc, #40]	; (8000954 <RCC_APB2PeriphClockCmd+0x3c>)
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <RCC_APB2PeriphClockCmd+0x3c>)
 800092e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000936:	e006      	b.n	8000946 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <RCC_APB2PeriphClockCmd+0x3c>)
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <RCC_APB2PeriphClockCmd+0x3c>)
 800093c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	43db      	mvns	r3, r3
 8000942:	4013      	ands	r3, r2
 8000944:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	887a      	ldrh	r2, [r7, #2]
 8000968:	819a      	strh	r2, [r3, #12]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000976:	b480      	push	{r7}
 8000978:	b085      	sub	sp, #20
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	891b      	ldrh	r3, [r3, #8]
 800098a:	b29a      	uxth	r2, r3
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	4013      	ands	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000996:	2301      	movs	r3, #1
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e001      	b.n	80009a0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80009b0:	b490      	push	{r4, r7}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80009d4:	4916      	ldr	r1, [pc, #88]	; (8000a30 <SYSCFG_EXTILineConfig+0x80>)
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <SYSCFG_EXTILineConfig+0x80>)
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3302      	adds	r3, #2
 80009e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	401a      	ands	r2, r3
 80009f2:	1c83      	adds	r3, r0, #2
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <SYSCFG_EXTILineConfig+0x80>)
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461c      	mov	r4, r3
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <SYSCFG_EXTILineConfig+0x80>)
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a10:	79f9      	ldrb	r1, [r7, #7]
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	1ca3      	adds	r3, r4, #2
 8000a22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc90      	pop	{r4, r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40013800 	.word	0x40013800

08000a34 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8a1b      	ldrh	r3, [r3, #16]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	88db      	ldrh	r3, [r3, #6]
 8000a62:	461a      	mov	r2, r3
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	4313      	orrs	r3, r2
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	899b      	ldrh	r3, [r3, #12]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a80:	f023 030c 	bic.w	r3, r3, #12
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	889a      	ldrh	r2, [r3, #4]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	891b      	ldrh	r3, [r3, #8]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	8a9b      	ldrh	r3, [r3, #20]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe38 	bl	8000748 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <USART_Init+0x168>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d003      	beq.n	8000ae8 <USART_Init+0xb4>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <USART_Init+0x16c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d102      	bne.n	8000aee <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	e001      	b.n	8000af2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	899b      	ldrh	r3, [r3, #12]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da0c      	bge.n	8000b18 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000afe:	6a3a      	ldr	r2, [r7, #32]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	009a      	lsls	r2, r3, #2
 8000b08:	441a      	add	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e00b      	b.n	8000b30 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009a      	lsls	r2, r3, #2
 8000b22:	441a      	add	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <USART_Init+0x170>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	095b      	lsrs	r3, r3, #5
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	2264      	movs	r2, #100	; 0x64
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	899b      	ldrh	r3, [r3, #12]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da0c      	bge.n	8000b74 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	3332      	adds	r3, #50	; 0x32
 8000b60:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <USART_Init+0x170>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	e00b      	b.n	8000b8c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	3332      	adds	r3, #50	; 0x32
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <USART_Init+0x170>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	811a      	strh	r2, [r3, #8]
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	51eb851f 	.word	0x51eb851f

08000ba8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	899b      	ldrh	r3, [r3, #12]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000bca:	e007      	b.n	8000bdc <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	899b      	ldrh	r3, [r3, #12]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	819a      	strh	r2, [r3, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	809a      	strh	r2, [r3, #4]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	4013      	ands	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e001      	b.n	8000c36 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f103 0208 	add.w	r2, r3, #8
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f103 0208 	add.w	r2, r3, #8
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f103 0208 	add.w	r2, r3, #8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d103      	bne.n	8000cbe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e00c      	b.n	8000cd8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e002      	b.n	8000ccc <vListInsert+0x2e>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d9f6      	bls.n	8000cc6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6892      	ldr	r2, [r2, #8]
 8000d26:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d103      	bne.n	8000d44 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b04      	subs	r3, #4
 8000d74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3b04      	subs	r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	f023 0201 	bic.w	r2, r3, #1
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b04      	subs	r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <pxPortInitialiseStack+0x64>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3b14      	subs	r3, #20
 8000d9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3b04      	subs	r3, #4
 8000daa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f06f 0202 	mvn.w	r2, #2
 8000db2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3b20      	subs	r3, #32
 8000db8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	08000dcd 	.word	0x08000dcd

08000dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <prvTaskExitError+0x50>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dde:	d009      	beq.n	8000df4 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e7fe      	b.n	8000df2 <prvTaskExitError+0x26>
 8000df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df8:	f383 8811 	msr	BASEPRI, r3
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f3bf 8f4f 	dsb	sy
 8000e04:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000e06:	bf00      	nop
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0fc      	beq.n	8000e08 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000010 	.word	0x20000010

08000e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <pxCurrentTCBConst2>)
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	6808      	ldr	r0, [r1, #0]
 8000e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e2a:	f380 8809 	msr	PSP, r0
 8000e2e:	f3bf 8f6f 	isb	sy
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	f380 8811 	msr	BASEPRI, r0
 8000e3a:	4770      	bx	lr
 8000e3c:	f3af 8000 	nop.w

08000e40 <pxCurrentTCBConst2>:
 8000e40:	20012c80 	.word	0x20012c80
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop

08000e48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <prvPortStartFirstTask+0x24>)
 8000e4a:	6800      	ldr	r0, [r0, #0]
 8000e4c:	6800      	ldr	r0, [r0, #0]
 8000e4e:	f380 8808 	msr	MSP, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	f380 8814 	msr	CONTROL, r0
 8000e5a:	b662      	cpsie	i
 8000e5c:	b661      	cpsie	f
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	f3bf 8f6f 	isb	sy
 8000e66:	df00      	svc	0
 8000e68:	bf00      	nop
 8000e6a:	0000      	.short	0x0000
 8000e6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop

08000e74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000e7a:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <xPortStartScheduler+0x118>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <xPortStartScheduler+0x11c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d109      	bne.n	8000e98 <xPortStartScheduler+0x24>
 8000e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e88:	f383 8811 	msr	BASEPRI, r3
 8000e8c:	f3bf 8f6f 	isb	sy
 8000e90:	f3bf 8f4f 	dsb	sy
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e7fe      	b.n	8000e96 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <xPortStartScheduler+0x118>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a3d      	ldr	r2, [pc, #244]	; (8000f94 <xPortStartScheduler+0x120>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d109      	bne.n	8000eb6 <xPortStartScheduler+0x42>
 8000ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea6:	f383 8811 	msr	BASEPRI, r3
 8000eaa:	f3bf 8f6f 	isb	sy
 8000eae:	f3bf 8f4f 	dsb	sy
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e7fe      	b.n	8000eb4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <xPortStartScheduler+0x124>)
 8000eb8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <xPortStartScheduler+0x128>)
 8000edc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000ee4:	e009      	b.n	8000efa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000eee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b80      	cmp	r3, #128	; 0x80
 8000f04:	d0ef      	beq.n	8000ee6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d009      	beq.n	8000f26 <xPortStartScheduler+0xb2>
 8000f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f16:	f383 8811 	msr	BASEPRI, r3
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	e7fe      	b.n	8000f24 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000f2e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <xPortStartScheduler+0x12c>)
 8000f3a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <xPortStartScheduler+0x130>)
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <xPortStartScheduler+0x130>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <xPortStartScheduler+0x130>)
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <xPortStartScheduler+0x130>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000f5a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000f5c:	f000 f8d4 	bl	8001108 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <xPortStartScheduler+0x134>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000f66:	f000 f8f3 	bl	8001150 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <xPortStartScheduler+0x138>)
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <xPortStartScheduler+0x138>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000f74:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000f76:	f7ff ff67 	bl	8000e48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000f7a:	f001 fab7 	bl	80024ec <vTaskSwitchContext>
    prvTaskExitError();
 8000f7e:	f7ff ff25 	bl	8000dcc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	410fc271 	.word	0x410fc271
 8000f94:	410fc270 	.word	0x410fc270
 8000f98:	e000e400 	.word	0xe000e400
 8000f9c:	20000058 	.word	0x20000058
 8000fa0:	2000005c 	.word	0x2000005c
 8000fa4:	e000ed20 	.word	0xe000ed20
 8000fa8:	20000010 	.word	0x20000010
 8000fac:	e000ef34 	.word	0xe000ef34

08000fb0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <vPortEnterCritical+0x54>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <vPortEnterCritical+0x54>)
 8000fd0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <vPortEnterCritical+0x54>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10e      	bne.n	8000ff8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <vPortEnterCritical+0x58>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d009      	beq.n	8000ff8 <vPortEnterCritical+0x48>
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	e7fe      	b.n	8000ff6 <vPortEnterCritical+0x46>
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000010 	.word	0x20000010
 8001008:	e000ed04 	.word	0xe000ed04

0800100c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <vPortExitCritical+0x4c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <vPortExitCritical+0x22>
 800101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e7fe      	b.n	800102c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <vPortExitCritical+0x4c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <vPortExitCritical+0x4c>)
 8001036:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <vPortExitCritical+0x4c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d104      	bne.n	800104a <vPortExitCritical+0x3e>
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010
 800105c:	00000000 	.word	0x00000000

08001060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001060:	f3ef 8009 	mrs	r0, PSP
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <pxCurrentTCBConst>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f01e 0f10 	tst.w	lr, #16
 8001070:	bf08      	it	eq
 8001072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107a:	6010      	str	r0, [r2, #0]
 800107c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001084:	f380 8811 	msr	BASEPRI, r0
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f001 fa2c 	bl	80024ec <vTaskSwitchContext>
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	f380 8811 	msr	BASEPRI, r0
 800109c:	bc09      	pop	{r0, r3}
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	6808      	ldr	r0, [r1, #0]
 80010a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a6:	f01e 0f10 	tst.w	lr, #16
 80010aa:	bf08      	it	eq
 80010ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80010b0:	f380 8809 	msr	PSP, r0
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w

080010c0 <pxCurrentTCBConst>:
 80010c0:	20012c80 	.word	0x20012c80
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop

080010c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
        __asm volatile
 80010ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	f3bf 8f6f 	isb	sy
 80010da:	f3bf 8f4f 	dsb	sy
 80010de:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80010e0:	f001 f8ee 	bl	80022c0 <xTaskIncrementTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SysTick_Handler+0x3c>)
 80010ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	e000ed04 	.word	0xe000ed04

08001108 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <vPortSetupTimerInterrupt+0x34>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <vPortSetupTimerInterrupt+0x38>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <vPortSetupTimerInterrupt+0x3c>)
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <vPortSetupTimerInterrupt+0x40>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	490b      	ldr	r1, [pc, #44]	; (800114c <vPortSetupTimerInterrupt+0x44>)
 8001120:	fba1 1303 	umull	r1, r3, r1, r3
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	3b01      	subs	r3, #1
 8001128:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <vPortSetupTimerInterrupt+0x34>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010
 8001140:	e000e018 	.word	0xe000e018
 8001144:	e000e014 	.word	0xe000e014
 8001148:	20000028 	.word	0x20000028
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001150:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001160 <vPortEnableVFP+0x10>
 8001154:	6801      	ldr	r1, [r0, #0]
 8001156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800115a:	6001      	str	r1, [r0, #0]
 800115c:	4770      	bx	lr
 800115e:	0000      	.short	0x0000
 8001160:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop

08001168 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001174:	f000 ff8c 	bl	8002090 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001178:	4b64      	ldr	r3, [pc, #400]	; (800130c <pvPortMalloc+0x1a4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001180:	f000 f930 	bl	80013e4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001184:	4b62      	ldr	r3, [pc, #392]	; (8001310 <pvPortMalloc+0x1a8>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 80a6 	bne.w	80012de <pvPortMalloc+0x176>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02d      	beq.n	80011f4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001198:	2208      	movs	r2, #8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	441a      	add	r2, r3
            if( ( xWantedSize > 0 ) &&
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d927      	bls.n	80011f4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80011a4:	2208      	movs	r2, #8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d021      	beq.n	80011fa <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f023 0307 	bic.w	r3, r3, #7
 80011bc:	f103 0208 	add.w	r2, r3, #8
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d913      	bls.n	80011ee <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f023 0307 	bic.w	r3, r3, #7
 80011cc:	3308      	adds	r3, #8
 80011ce:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00f      	beq.n	80011fa <pvPortMalloc+0x92>
        __asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e7fe      	b.n	80011ec <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80011f2:	e002      	b.n	80011fa <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e000      	b.n	80011fc <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80011fa:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06d      	beq.n	80012de <pvPortMalloc+0x176>
 8001202:	4b44      	ldr	r3, [pc, #272]	; (8001314 <pvPortMalloc+0x1ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	d868      	bhi.n	80012de <pvPortMalloc+0x176>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <pvPortMalloc+0x1b0>)
 800120e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <pvPortMalloc+0x1b0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001216:	e004      	b.n	8001222 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d203      	bcs.n	8001234 <pvPortMalloc+0xcc>
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f1      	bne.n	8001218 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001234:	4b35      	ldr	r3, [pc, #212]	; (800130c <pvPortMalloc+0x1a4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	429a      	cmp	r2, r3
 800123c:	d04f      	beq.n	80012de <pvPortMalloc+0x176>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2208      	movs	r2, #8
 8001244:	4413      	add	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	2308      	movs	r3, #8
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	429a      	cmp	r2, r3
 800125e:	d91e      	bls.n	800129e <pvPortMalloc+0x136>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <pvPortMalloc+0x11e>
 8001272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001276:	f383 8811 	msr	BASEPRI, r3
 800127a:	f3bf 8f6f 	isb	sy
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	e7fe      	b.n	8001284 <pvPortMalloc+0x11c>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1ad2      	subs	r2, r2, r3
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001298:	69b8      	ldr	r0, [r7, #24]
 800129a:	f000 f905 	bl	80014a8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <pvPortMalloc+0x1ac>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <pvPortMalloc+0x1ac>)
 80012aa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <pvPortMalloc+0x1ac>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <pvPortMalloc+0x1b4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d203      	bcs.n	80012c0 <pvPortMalloc+0x158>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <pvPortMalloc+0x1ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <pvPortMalloc+0x1b4>)
 80012be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <pvPortMalloc+0x1a8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <pvPortMalloc+0x1b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <pvPortMalloc+0x1b8>)
 80012dc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80012de:	f000 fee5 	bl	80020ac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <pvPortMalloc+0x198>
 80012ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f0:	f383 8811 	msr	BASEPRI, r3
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	f3bf 8f4f 	dsb	sy
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e7fe      	b.n	80012fe <pvPortMalloc+0x196>
    return pvReturn;
 8001300:	69fb      	ldr	r3, [r7, #28]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20012c68 	.word	0x20012c68
 8001310:	20012c7c 	.word	0x20012c7c
 8001314:	20012c6c 	.word	0x20012c6c
 8001318:	20012c60 	.word	0x20012c60
 800131c:	20012c70 	.word	0x20012c70
 8001320:	20012c74 	.word	0x20012c74

08001324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04b      	beq.n	80013ce <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001336:	2308      	movs	r3, #8
 8001338:	425b      	negs	r3, r3
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <vPortFree+0xb4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <vPortFree+0x42>
 8001352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001356:	f383 8811 	msr	BASEPRI, r3
 800135a:	f3bf 8f6f 	isb	sy
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e7fe      	b.n	8001364 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <vPortFree+0x5e>
 800136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e7fe      	b.n	8001380 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <vPortFree+0xb4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01e      	beq.n	80013ce <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11a      	bne.n	80013ce <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <vPortFree+0xb4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80013a8:	f000 fe72 	bl	8002090 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <vPortFree+0xb8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <vPortFree+0xb8>)
 80013b8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80013ba:	6938      	ldr	r0, [r7, #16]
 80013bc:	f000 f874 	bl	80014a8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <vPortFree+0xbc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <vPortFree+0xbc>)
 80013c8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80013ca:	f000 fe6f 	bl	80020ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20012c7c 	.word	0x20012c7c
 80013dc:	20012c6c 	.word	0x20012c6c
 80013e0:	20012c78 	.word	0x20012c78

080013e4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013ea:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80013ee:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <prvHeapInit+0xac>)
 80013f2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3307      	adds	r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 0307 	bic.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <prvHeapInit+0xac>)
 8001414:	4413      	add	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <prvHeapInit+0xb0>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <prvHeapInit+0xb0>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001430:	2208      	movs	r2, #8
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 0307 	bic.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <prvHeapInit+0xb4>)
 8001444:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <prvHeapInit+0xb4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <prvHeapInit+0xb4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	1ad2      	subs	r2, r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <prvHeapInit+0xb4>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <prvHeapInit+0xb8>)
 8001472:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <prvHeapInit+0xbc>)
 800147a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <prvHeapInit+0xc0>)
 800147e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000060 	.word	0x20000060
 8001494:	20012c60 	.word	0x20012c60
 8001498:	20012c68 	.word	0x20012c68
 800149c:	20012c70 	.word	0x20012c70
 80014a0:	20012c6c 	.word	0x20012c6c
 80014a4:	20012c7c 	.word	0x20012c7c

080014a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <prvInsertBlockIntoFreeList+0xac>)
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e002      	b.n	80014bc <prvInsertBlockIntoFreeList+0x14>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f7      	bcc.n	80014b6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	441a      	add	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d108      	bne.n	80014ea <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	441a      	add	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	441a      	add	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d118      	bne.n	8001530 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <prvInsertBlockIntoFreeList+0xb0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d00d      	beq.n	8001526 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	441a      	add	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e008      	b.n	8001538 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <prvInsertBlockIntoFreeList+0xb0>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e003      	b.n	8001538 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d002      	beq.n	8001546 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20012c60 	.word	0x20012c60
 8001558:	20012c68 	.word	0x20012c68

0800155c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <xQueueGenericReset+0x2c>
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e7fe      	b.n	8001586 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d05a      	beq.n	8001644 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001592:	2b00      	cmp	r3, #0
 8001594:	d056      	beq.n	8001644 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	f04f 32ff 	mov.w	r2, #4294967295
 800159e:	fbb2 f2f3 	udiv	r2, r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d34c      	bcc.n	8001644 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 80015aa:	f7ff fd01 	bl	8000fb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	441a      	add	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	3b01      	subs	r3, #1
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	441a      	add	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	22ff      	movs	r2, #255	; 0xff
 80015f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d114      	bne.n	800162a <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01a      	beq.n	800163e <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	3310      	adds	r3, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f001 f82f 	bl	8002670 <xTaskRemoveFromEventList>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d012      	beq.n	800163e <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <xQueueGenericReset+0x110>)
 800161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f3bf 8f4f 	dsb	sy
 8001624:	f3bf 8f6f 	isb	sy
 8001628:	e009      	b.n	800163e <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	3310      	adds	r3, #16
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb08 	bl	8000c44 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3324      	adds	r3, #36	; 0x24
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb03 	bl	8000c44 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800163e:	f7ff fce5 	bl	800100c <vPortExitCritical>
 8001642:	e001      	b.n	8001648 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <xQueueGenericReset+0x106>
 800164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001652:	f383 8811 	msr	BASEPRI, r3
 8001656:	f3bf 8f6f 	isb	sy
 800165a:	f3bf 8f4f 	dsb	sy
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	e7fe      	b.n	8001660 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001662:	697b      	ldr	r3, [r7, #20]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000ed04 	.word	0xe000ed04

08001670 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d02b      	beq.n	80016e0 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d323      	bcc.n	80016e0 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80016a0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80016a4:	d81c      	bhi.n	80016e0 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3350      	adds	r3, #80	; 0x50
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd57 	bl	8001168 <pvPortMalloc>
 80016ba:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01b      	beq.n	80016fa <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3350      	adds	r3, #80	; 0x50
 80016ca:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4613      	mov	r3, r2
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f813 	bl	8001704 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80016de:	e00c      	b.n	80016fa <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <xQueueGenericCreate+0x8a>
 80016e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ea:	f383 8811 	msr	BASEPRI, r3
 80016ee:	f3bf 8f6f 	isb	sy
 80016f2:	f3bf 8f4f 	dsb	sy
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	e7fe      	b.n	80016f8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80016fa:	69fb      	ldr	r3, [r7, #28]
    }
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e002      	b.n	8001726 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001732:	2101      	movs	r1, #1
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f7ff ff11 	bl	800155c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <xQueueReceive+0x2e>
 8001766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176a:	f383 8811 	msr	BASEPRI, r3
 800176e:	f3bf 8f6f 	isb	sy
 8001772:	f3bf 8f4f 	dsb	sy
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	e7fe      	b.n	8001778 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <xQueueReceive+0x3c>
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <xQueueReceive+0x40>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <xQueueReceive+0x42>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <xQueueReceive+0x5a>
 8001792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e7fe      	b.n	80017a4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017a6:	f001 f96f 	bl	8002a88 <xTaskGetSchedulerState>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <xQueueReceive+0x6a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <xQueueReceive+0x6e>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <xQueueReceive+0x70>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <xQueueReceive+0x88>
 80017c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c4:	f383 8811 	msr	BASEPRI, r3
 80017c8:	f3bf 8f6f 	isb	sy
 80017cc:	f3bf 8f4f 	dsb	sy
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	e7fe      	b.n	80017d2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80017d4:	f7ff fbec 	bl	8000fb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01f      	beq.n	8001824 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017e8:	f000 f88c 	bl	8001904 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00f      	beq.n	800181c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	3310      	adds	r3, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f000 ff35 	bl	8002670 <xTaskRemoveFromEventList>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800180c:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <xQueueReceive+0x1b4>)
 800180e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800181c:	f7ff fbf6 	bl	800100c <vPortExitCritical>
                return pdPASS;
 8001820:	2301      	movs	r3, #1
 8001822:	e069      	b.n	80018f8 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d103      	bne.n	8001832 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800182a:	f7ff fbef 	bl	800100c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800182e:	2300      	movs	r3, #0
 8001830:	e062      	b.n	80018f8 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d106      	bne.n	8001846 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4618      	mov	r0, r3
 800183e:	f000 ffed 	bl	800281c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001842:	2301      	movs	r3, #1
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001846:	f7ff fbe1 	bl	800100c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800184a:	f000 fc21 	bl	8002090 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800184e:	f7ff fbaf 	bl	8000fb0 <vPortEnterCritical>
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001858:	b25b      	sxtb	r3, r3
 800185a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185e:	d103      	bne.n	8001868 <xQueueReceive+0x11c>
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d103      	bne.n	800187e <xQueueReceive+0x132>
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800187e:	f7ff fbc5 	bl	800100c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001882:	1d3a      	adds	r2, r7, #4
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 ffdc 	bl	8002848 <xTaskCheckForTimeOut>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001898:	f000 f8ac 	bl	80019f4 <prvIsQueueEmpty>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d017      	beq.n	80018d2 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	3324      	adds	r3, #36	; 0x24
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fe78 	bl	80025a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80018b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018b2:	f000 f84d 	bl	8001950 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80018b6:	f000 fbf9 	bl	80020ac <xTaskResumeAll>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d189      	bne.n	80017d4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <xQueueReceive+0x1b4>)
 80018c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f3bf 8f4f 	dsb	sy
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	e780      	b.n	80017d4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80018d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018d4:	f000 f83c 	bl	8001950 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80018d8:	f000 fbe8 	bl	80020ac <xTaskResumeAll>
 80018dc:	e77a      	b.n	80017d4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80018de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018e0:	f000 f836 	bl	8001950 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80018e4:	f000 fbe2 	bl	80020ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ea:	f000 f883 	bl	80019f4 <prvIsQueueEmpty>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f43f af6f 	beq.w	80017d4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80018f6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3730      	adds	r7, #48	; 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	e000ed04 	.word	0xe000ed04

08001904 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d018      	beq.n	8001948 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	441a      	add	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	429a      	cmp	r2, r3
 800192e:	d303      	bcc.n	8001938 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68d9      	ldr	r1, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	461a      	mov	r2, r3
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f002 f8fe 	bl	8003b44 <memcpy>
    }
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001958:	f7ff fb2a 	bl	8000fb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001962:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001964:	e011      	b.n	800198a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d012      	beq.n	8001994 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3324      	adds	r3, #36	; 0x24
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fe7c 	bl	8002670 <xTaskRemoveFromEventList>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800197e:	f000 ffc7 	bl	8002910 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3b01      	subs	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dce9      	bgt.n	8001966 <prvUnlockQueue+0x16>
 8001992:	e000      	b.n	8001996 <prvUnlockQueue+0x46>
                        break;
 8001994:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	22ff      	movs	r2, #255	; 0xff
 800199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800199e:	f7ff fb35 	bl	800100c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80019a2:	f7ff fb05 	bl	8000fb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019ae:	e011      	b.n	80019d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3310      	adds	r3, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fe57 	bl	8002670 <xTaskRemoveFromEventList>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80019c8:	f000 ffa2 	bl	8002910 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dce9      	bgt.n	80019b0 <prvUnlockQueue+0x60>
 80019dc:	e000      	b.n	80019e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80019de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80019e8:	f7ff fb10 	bl	800100c <vPortExitCritical>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80019fc:	f7ff fad8 	bl	8000fb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e001      	b.n	8001a12 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001a12:	f7ff fafb 	bl	800100c <vPortExitCritical>

    return xReturn;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <vQueueAddToRegistry+0x24>
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e7fe      	b.n	8001a42 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e01e      	b.n	8001a92 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001a54:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <vQueueAddToRegistry+0x98>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d105      	bne.n	8001a70 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <vQueueAddToRegistry+0x98>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
                    break;
 8001a6e:	e013      	b.n	8001a98 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <vQueueAddToRegistry+0x6c>
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <vQueueAddToRegistry+0x98>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <vQueueAddToRegistry+0x98>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d9dd      	bls.n	8001a54 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20012dcc 	.word	0x20012dcc

08001abc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001acc:	f7ff fa70 	bl	8000fb0 <vPortEnterCritical>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d103      	bne.n	8001ae6 <vQueueWaitForMessageRestricted+0x2a>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d103      	bne.n	8001afc <vQueueWaitForMessageRestricted+0x40>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001afc:	f7ff fa86 	bl	800100c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3324      	adds	r3, #36	; 0x24
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fd69 	bl	80025e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff1a 	bl	8001950 <prvUnlockQueue>
    }
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb15 	bl	8001168 <pvPortMalloc>
 8001b3e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b46:	2058      	movs	r0, #88	; 0x58
 8001b48:	f7ff fb0e 	bl	8001168 <pvPortMalloc>
 8001b4c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5a:	e005      	b.n	8001b68 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff fbe1 	bl	8001324 <vPortFree>
 8001b62:	e001      	b.n	8001b68 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d013      	beq.n	8001b96 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9303      	str	r3, [sp, #12]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f80e 	bl	8001ba6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001b8a:	69f8      	ldr	r0, [r7, #28]
 8001b8c:	f000 f8ae 	bl	8001cec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	e002      	b.n	8001b9c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
    }
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b088      	sub	sp, #32
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	21a5      	movs	r1, #165	; 0xa5
 8001bc0:	f001 ffcb 	bl	8003b5a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f023 0307 	bic.w	r3, r3, #7
 8001bdc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <prvInitialiseNewTask+0x56>
 8001be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bec:	f383 8811 	msr	BASEPRI, r3
 8001bf0:	f3bf 8f6f 	isb	sy
 8001bf4:	f3bf 8f4f 	dsb	sy
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e7fe      	b.n	8001bfa <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01f      	beq.n	8001c42 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e012      	b.n	8001c2e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	7819      	ldrb	r1, [r3, #0]
 8001c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	3334      	adds	r3, #52	; 0x34
 8001c18:	460a      	mov	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d9e9      	bls.n	8001c08 <prvInitialiseNewTask+0x62>
 8001c34:	e000      	b.n	8001c38 <prvInitialiseNewTask+0x92>
            {
                break;
 8001c36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001c40:	e003      	b.n	8001c4a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d909      	bls.n	8001c64 <prvInitialiseNewTask+0xbe>
 8001c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	f3bf 8f6f 	isb	sy
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e7fe      	b.n	8001c62 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d901      	bls.n	8001c6e <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c78:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	3304      	adds	r3, #4
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fffd 	bl	8000c84 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fff8 	bl	8000c84 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c98:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	f1c3 0205 	rsb	r2, r3, #5
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cac:	3350      	adds	r3, #80	; 0x50
 8001cae:	2204      	movs	r2, #4
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 ff51 	bl	8003b5a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	3354      	adds	r3, #84	; 0x54
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 ff4a 	bl	8003b5a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	69b8      	ldr	r0, [r7, #24]
 8001ccc:	f7ff f84a 	bl	8000d64 <pxPortInitialiseStack>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001cf4:	f7ff f95c 	bl	8000fb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <prvAddNewTaskToReadyList+0x110>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <prvAddNewTaskToReadyList+0x110>)
 8001d00:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <prvAddNewTaskToReadyList+0x114>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001d0a:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <prvAddNewTaskToReadyList+0x114>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <prvAddNewTaskToReadyList+0x110>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d110      	bne.n	8001d3a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001d18:	f000 fe1e 	bl	8002958 <prvInitialiseTaskLists>
 8001d1c:	e00d      	b.n	8001d3a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <prvAddNewTaskToReadyList+0x118>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <prvAddNewTaskToReadyList+0x114>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d802      	bhi.n	8001d3a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001d34:	4a32      	ldr	r2, [pc, #200]	; (8001e00 <prvAddNewTaskToReadyList+0x114>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <prvAddNewTaskToReadyList+0x11c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <prvAddNewTaskToReadyList+0x11c>)
 8001d42:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <prvAddNewTaskToReadyList+0x11c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <prvAddNewTaskToReadyList+0x120>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <prvAddNewTaskToReadyList+0x120>)
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	492b      	ldr	r1, [pc, #172]	; (8001e10 <prvAddNewTaskToReadyList+0x124>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	3204      	adds	r2, #4
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1d1a      	adds	r2, r3, #4
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <prvAddNewTaskToReadyList+0x124>)
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dac:	4918      	ldr	r1, [pc, #96]	; (8001e10 <prvAddNewTaskToReadyList+0x124>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	4814      	ldr	r0, [pc, #80]	; (8001e10 <prvAddNewTaskToReadyList+0x124>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4403      	add	r3, r0
 8001dc8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001dca:	f7ff f91f 	bl	800100c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <prvAddNewTaskToReadyList+0x118>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00e      	beq.n	8001df4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <prvAddNewTaskToReadyList+0x114>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <prvAddNewTaskToReadyList+0x128>)
 8001de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20012d58 	.word	0x20012d58
 8001e00:	20012c80 	.word	0x20012c80
 8001e04:	20012d64 	.word	0x20012d64
 8001e08:	20012d74 	.word	0x20012d74
 8001e0c:	20012d60 	.word	0x20012d60
 8001e10:	20012c84 	.word	0x20012c84
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8001e20:	f7ff f8c6 	bl	8000fb0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <uxTaskPriorityGet+0x18>
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <uxTaskPriorityGet+0x30>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <uxTaskPriorityGet+0x1a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8001e3a:	f7ff f8e7 	bl	800100c <vPortExitCritical>

        return uxReturn;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    }
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20012c80 	.word	0x20012c80

08001e4c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d909      	bls.n	8001e74 <vTaskPrioritySet+0x28>
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	e7fe      	b.n	8001e72 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d901      	bls.n	8001e7e <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8001e7e:	f7ff f897 	bl	8000fb0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <vTaskPrioritySet+0x42>
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <vTaskPrioritySet+0x194>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <vTaskPrioritySet+0x44>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f000 8098 	beq.w	8001fd2 <vTaskPrioritySet+0x186>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d90d      	bls.n	8001ec6 <vTaskPrioritySet+0x7a>
                {
                    if( pxTCB != pxCurrentTCB )
 8001eaa:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <vTaskPrioritySet+0x194>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d00f      	beq.n	8001ed4 <vTaskPrioritySet+0x88>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <vTaskPrioritySet+0x194>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d809      	bhi.n	8001ed4 <vTaskPrioritySet+0x88>
                        {
                            xYieldRequired = pdTRUE;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	e006      	b.n	8001ed4 <vTaskPrioritySet+0x88>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <vTaskPrioritySet+0x194>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d101      	bne.n	8001ed4 <vTaskPrioritySet+0x88>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d102      	bne.n	8001eec <vTaskPrioritySet+0xa0>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db04      	blt.n	8001f04 <vTaskPrioritySet+0xb8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f1c3 0205 	rsb	r2, r3, #5
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6959      	ldr	r1, [r3, #20]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <vTaskPrioritySet+0x198>)
 8001f14:	4413      	add	r3, r2
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d150      	bne.n	8001fbc <vTaskPrioritySet+0x170>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fef6 	bl	8000d10 <uxListRemove>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <vTaskPrioritySet+0xf2>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <vTaskPrioritySet+0x19c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <vTaskPrioritySet+0x19c>)
 8001f3c:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <vTaskPrioritySet+0x19c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <vTaskPrioritySet+0x19c>)
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	4923      	ldr	r1, [pc, #140]	; (8001fe4 <vTaskPrioritySet+0x198>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3304      	adds	r3, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	3204      	adds	r2, #4
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1d1a      	adds	r2, r3, #4
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <vTaskPrioritySet+0x198>)
 8001f94:	441a      	add	r2, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <vTaskPrioritySet+0x198>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <vTaskPrioritySet+0x198>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <vTaskPrioritySet+0x186>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <vTaskPrioritySet+0x1a0>)
 8001fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8001fd2:	f7ff f81b 	bl	800100c <vPortExitCritical>
    }
 8001fd6:	bf00      	nop
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20012c80 	.word	0x20012c80
 8001fe4:	20012c84 	.word	0x20012c84
 8001fe8:	20012d60 	.word	0x20012d60
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <vTaskStartScheduler+0x84>)
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	2282      	movs	r2, #130	; 0x82
 8002002:	491d      	ldr	r1, [pc, #116]	; (8002078 <vTaskStartScheduler+0x88>)
 8002004:	481d      	ldr	r0, [pc, #116]	; (800207c <vTaskStartScheduler+0x8c>)
 8002006:	f7ff fd8d 	bl	8001b24 <xTaskCreate>
 800200a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002012:	f000 fdd7 	bl	8002bc4 <xTimerCreateTimerTask>
 8002016:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d115      	bne.n	800204a <vTaskStartScheduler+0x5a>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <vTaskStartScheduler+0x90>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <vTaskStartScheduler+0x94>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <vTaskStartScheduler+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002044:	f7fe ff16 	bl	8000e74 <xPortStartScheduler>
 8002048:	e00d      	b.n	8002066 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d109      	bne.n	8002066 <vTaskStartScheduler+0x76>
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e7fe      	b.n	8002064 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <vTaskStartScheduler+0x9c>)
 8002068:	681b      	ldr	r3, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20012d7c 	.word	0x20012d7c
 8002078:	08003b84 	.word	0x08003b84
 800207c:	08002929 	.word	0x08002929
 8002080:	20012d78 	.word	0x20012d78
 8002084:	20012d64 	.word	0x20012d64
 8002088:	20012d5c 	.word	0x20012d5c
 800208c:	20000014 	.word	0x20000014

08002090 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <vTaskSuspendAll+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <vTaskSuspendAll+0x18>)
 800209c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20012d80 	.word	0x20012d80

080020ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80020ba:	4b70      	ldr	r3, [pc, #448]	; (800227c <xTaskResumeAll+0x1d0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <xTaskResumeAll+0x2a>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	e7fe      	b.n	80020d4 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80020d6:	f7fe ff6b 	bl	8000fb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <xTaskResumeAll+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	4a66      	ldr	r2, [pc, #408]	; (800227c <xTaskResumeAll+0x1d0>)
 80020e2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e4:	4b65      	ldr	r3, [pc, #404]	; (800227c <xTaskResumeAll+0x1d0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 80c0 	bne.w	800226e <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020ee:	4b64      	ldr	r3, [pc, #400]	; (8002280 <xTaskResumeAll+0x1d4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80bb 	beq.w	800226e <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020f8:	e08a      	b.n	8002210 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020fa:	4b62      	ldr	r3, [pc, #392]	; (8002284 <xTaskResumeAll+0x1d8>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	6a12      	ldr	r2, [r2, #32]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	69d2      	ldr	r2, [r2, #28]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3318      	adds	r3, #24
 8002124:	429a      	cmp	r2, r3
 8002126:	d103      	bne.n	8002130 <xTaskResumeAll+0x84>
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	6892      	ldr	r2, [r2, #8]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	429a      	cmp	r2, r3
 8002164:	d103      	bne.n	800216e <xTaskResumeAll+0xc2>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	4b40      	ldr	r3, [pc, #256]	; (8002288 <xTaskResumeAll+0x1dc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <xTaskResumeAll+0x1dc>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	493d      	ldr	r1, [pc, #244]	; (800228c <xTaskResumeAll+0x1e0>)
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3304      	adds	r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	3204      	adds	r2, #4
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	1d1a      	adds	r2, r3, #4
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4a2e      	ldr	r2, [pc, #184]	; (800228c <xTaskResumeAll+0x1e0>)
 80021d4:	441a      	add	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	615a      	str	r2, [r3, #20]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021de:	492b      	ldr	r1, [pc, #172]	; (800228c <xTaskResumeAll+0x1e0>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	4827      	ldr	r0, [pc, #156]	; (800228c <xTaskResumeAll+0x1e0>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <xTaskResumeAll+0x1e4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d302      	bcc.n	8002210 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <xTaskResumeAll+0x1e8>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <xTaskResumeAll+0x1d8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f af70 	bne.w	80020fa <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002220:	f000 fc16 	bl	8002a50 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <xTaskResumeAll+0x1ec>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002230:	f000 f846 	bl	80022c0 <xTaskIncrementTick>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <xTaskResumeAll+0x1e8>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3b01      	subs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f1      	bne.n	8002230 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <xTaskResumeAll+0x1ec>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <xTaskResumeAll+0x1e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800225a:	2301      	movs	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <xTaskResumeAll+0x1f0>)
 8002260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800226e:	f7fe fecd 	bl	800100c <vPortExitCritical>

    return xAlreadyYielded;
 8002272:	69bb      	ldr	r3, [r7, #24]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20012d80 	.word	0x20012d80
 8002280:	20012d58 	.word	0x20012d58
 8002284:	20012d18 	.word	0x20012d18
 8002288:	20012d60 	.word	0x20012d60
 800228c:	20012c84 	.word	0x20012c84
 8002290:	20012c80 	.word	0x20012c80
 8002294:	20012d6c 	.word	0x20012d6c
 8002298:	20012d68 	.word	0x20012d68
 800229c:	e000ed04 	.word	0xe000ed04

080022a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <xTaskGetTickCount+0x1c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20012d5c 	.word	0x20012d5c

080022c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <xTaskIncrementTick+0x200>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80eb 	bne.w	80024aa <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <xTaskIncrementTick+0x204>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <xTaskIncrementTick+0x204>)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11f      	bne.n	8002328 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80022e8:	4b77      	ldr	r3, [pc, #476]	; (80024c8 <xTaskIncrementTick+0x208>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <xTaskIncrementTick+0x46>
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	e7fe      	b.n	8002304 <xTaskIncrementTick+0x44>
 8002306:	4b70      	ldr	r3, [pc, #448]	; (80024c8 <xTaskIncrementTick+0x208>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <xTaskIncrementTick+0x20c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6d      	ldr	r2, [pc, #436]	; (80024c8 <xTaskIncrementTick+0x208>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4a6d      	ldr	r2, [pc, #436]	; (80024cc <xTaskIncrementTick+0x20c>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <xTaskIncrementTick+0x210>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a6b      	ldr	r2, [pc, #428]	; (80024d0 <xTaskIncrementTick+0x210>)
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	f000 fb94 	bl	8002a50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002328:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <xTaskIncrementTick+0x214>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	f0c0 80a6 	bcc.w	8002480 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002334:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <xTaskIncrementTick+0x208>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <xTaskIncrementTick+0x214>)
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	601a      	str	r2, [r3, #0]
                    break;
 8002346:	e09b      	b.n	8002480 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002348:	4b5f      	ldr	r3, [pc, #380]	; (80024c8 <xTaskIncrementTick+0x208>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d203      	bcs.n	8002368 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002360:	4a5c      	ldr	r2, [pc, #368]	; (80024d4 <xTaskIncrementTick+0x214>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002366:	e08b      	b.n	8002480 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	6892      	ldr	r2, [r2, #8]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3304      	adds	r3, #4
 800238a:	429a      	cmp	r2, r3
 800238c:	d103      	bne.n	8002396 <xTaskIncrementTick+0xd6>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01e      	beq.n	80023ec <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	6a12      	ldr	r2, [r2, #32]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	69d2      	ldr	r2, [r2, #28]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	3318      	adds	r3, #24
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d103      	bne.n	80023dc <xTaskIncrementTick+0x11c>
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <xTaskIncrementTick+0x218>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <xTaskIncrementTick+0x218>)
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	4936      	ldr	r1, [pc, #216]	; (80024dc <xTaskIncrementTick+0x21c>)
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	3204      	adds	r2, #4
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <xTaskIncrementTick+0x21c>)
 8002442:	441a      	add	r2, r3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	4923      	ldr	r1, [pc, #140]	; (80024dc <xTaskIncrementTick+0x21c>)
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	481f      	ldr	r0, [pc, #124]	; (80024dc <xTaskIncrementTick+0x21c>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <xTaskIncrementTick+0x220>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	429a      	cmp	r2, r3
 8002476:	f4ff af5d 	bcc.w	8002334 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800247e:	e759      	b.n	8002334 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <xTaskIncrementTick+0x220>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002486:	4915      	ldr	r1, [pc, #84]	; (80024dc <xTaskIncrementTick+0x21c>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d901      	bls.n	800249c <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <xTaskIncrementTick+0x224>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	e004      	b.n	80024b4 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <xTaskIncrementTick+0x228>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <xTaskIncrementTick+0x228>)
 80024b2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20012d80 	.word	0x20012d80
 80024c4:	20012d5c 	.word	0x20012d5c
 80024c8:	20012d10 	.word	0x20012d10
 80024cc:	20012d14 	.word	0x20012d14
 80024d0:	20012d70 	.word	0x20012d70
 80024d4:	20012d78 	.word	0x20012d78
 80024d8:	20012d60 	.word	0x20012d60
 80024dc:	20012c84 	.word	0x20012c84
 80024e0:	20012c80 	.word	0x20012c80
 80024e4:	20012d6c 	.word	0x20012d6c
 80024e8:	20012d68 	.word	0x20012d68

080024ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <vTaskSwitchContext+0xa0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <vTaskSwitchContext+0xa4>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002500:	e03e      	b.n	8002580 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <vTaskSwitchContext+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <vTaskSwitchContext+0xa8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f1c3 031f 	rsb	r3, r3, #31
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	491e      	ldr	r1, [pc, #120]	; (8002598 <vTaskSwitchContext+0xac>)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	e7fe      	b.n	8002544 <vTaskSwitchContext+0x58>
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <vTaskSwitchContext+0xac>)
 8002552:	4413      	add	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3308      	adds	r3, #8
 8002568:	429a      	cmp	r2, r3
 800256a:	d104      	bne.n	8002576 <vTaskSwitchContext+0x8a>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <vTaskSwitchContext+0xb0>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20012d80 	.word	0x20012d80
 8002590:	20012d6c 	.word	0x20012d6c
 8002594:	20012d60 	.word	0x20012d60
 8002598:	20012c84 	.word	0x20012c84
 800259c:	20012c80 	.word	0x20012c80

080025a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <vTaskPlaceOnEventList+0x24>
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e7fe      	b.n	80025c2 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <vTaskPlaceOnEventList+0x44>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3318      	adds	r3, #24
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fe fb66 	bl	8000c9e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025d2:	2101      	movs	r1, #1
 80025d4:	6838      	ldr	r0, [r7, #0]
 80025d6:	f000 fa75 	bl	8002ac4 <prvAddCurrentTaskToDelayedList>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20012c80 	.word	0x20012c80

080025e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <vTaskPlaceOnEventListRestricted+0x26>
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e7fe      	b.n	800260c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <vTaskPlaceOnEventListRestricted+0x84>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <vTaskPlaceOnEventListRestricted+0x84>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	621a      	str	r2, [r3, #32]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <vTaskPlaceOnEventListRestricted+0x84>)
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	3218      	adds	r2, #24
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <vTaskPlaceOnEventListRestricted+0x84>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f103 0218 	add.w	r2, r3, #24
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <vTaskPlaceOnEventListRestricted+0x84>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	68b8      	ldr	r0, [r7, #8]
 8002660:	f000 fa30 	bl	8002ac4 <prvAddCurrentTaskToDelayedList>
    }
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20012c80 	.word	0x20012c80

08002670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002670:	b480      	push	{r7}
 8002672:	b08b      	sub	sp, #44	; 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <xTaskRemoveFromEventList+0x2a>
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e7fe      	b.n	8002698 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	6a12      	ldr	r2, [r2, #32]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	69d2      	ldr	r2, [r2, #28]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	3318      	adds	r3, #24
 80026bc:	429a      	cmp	r2, r3
 80026be:	d103      	bne.n	80026c8 <xTaskRemoveFromEventList+0x58>
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2200      	movs	r2, #0
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d8:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <xTaskRemoveFromEventList+0x194>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d15e      	bne.n	800279e <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	3304      	adds	r3, #4
 8002702:	429a      	cmp	r2, r3
 8002704:	d103      	bne.n	800270e <xTaskRemoveFromEventList+0x9e>
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	2201      	movs	r2, #1
 8002724:	409a      	lsls	r2, r3
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <xTaskRemoveFromEventList+0x198>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	4a36      	ldr	r2, [pc, #216]	; (8002808 <xTaskRemoveFromEventList+0x198>)
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <xTaskRemoveFromEventList+0x19c>)
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	6a3a      	ldr	r2, [r7, #32]
 800275a:	3204      	adds	r2, #4
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <xTaskRemoveFromEventList+0x19c>)
 8002774:	441a      	add	r2, r3
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	615a      	str	r2, [r3, #20]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277e:	4923      	ldr	r1, [pc, #140]	; (800280c <xTaskRemoveFromEventList+0x19c>)
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1c59      	adds	r1, r3, #1
 800278e:	481f      	ldr	r0, [pc, #124]	; (800280c <xTaskRemoveFromEventList+0x19c>)
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	6019      	str	r1, [r3, #0]
 800279c:	e01b      	b.n	80027d6 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <xTaskRemoveFromEventList+0x1a0>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	6a3a      	ldr	r2, [r7, #32]
 80027b8:	3218      	adds	r2, #24
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f103 0218 	add.w	r2, r3, #24
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <xTaskRemoveFromEventList+0x1a0>)
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <xTaskRemoveFromEventList+0x1a0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <xTaskRemoveFromEventList+0x1a0>)
 80027d4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <xTaskRemoveFromEventList+0x1a4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d905      	bls.n	80027f0 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <xTaskRemoveFromEventList+0x1a8>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e001      	b.n	80027f4 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	372c      	adds	r7, #44	; 0x2c
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20012d80 	.word	0x20012d80
 8002808:	20012d60 	.word	0x20012d60
 800280c:	20012c84 	.word	0x20012c84
 8002810:	20012d18 	.word	0x20012d18
 8002814:	20012c80 	.word	0x20012c80
 8002818:	20012d6c 	.word	0x20012d6c

0800281c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <vTaskInternalSetTimeOutState+0x24>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <vTaskInternalSetTimeOutState+0x28>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	20012d70 	.word	0x20012d70
 8002844:	20012d5c 	.word	0x20012d5c

08002848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <xTaskCheckForTimeOut+0x24>
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e7fe      	b.n	800286a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <xTaskCheckForTimeOut+0x3e>
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e7fe      	b.n	8002884 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002886:	f7fe fb93 	bl	8000fb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <xTaskCheckForTimeOut+0xc0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d102      	bne.n	80028aa <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	e026      	b.n	80028f8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <xTaskCheckForTimeOut+0xc4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d00a      	beq.n	80028cc <xTaskCheckForTimeOut+0x84>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d805      	bhi.n	80028cc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e015      	b.n	80028f8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90b      	bls.n	80028ee <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff9a 	bl	800281c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	e004      	b.n	80028f8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80028f8:	f7fe fb88 	bl	800100c <vPortExitCritical>

    return xReturn;
 80028fc:	69fb      	ldr	r3, [r7, #28]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20012d5c 	.word	0x20012d5c
 800290c:	20012d70 	.word	0x20012d70

08002910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <vTaskMissedYield+0x14>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20012d6c 	.word	0x20012d6c

08002928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002930:	f000 f852 	bl	80029d8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvIdleTask+0x28>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d9f9      	bls.n	8002930 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <prvIdleTask+0x2c>)
 800293e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800294c:	e7f0      	b.n	8002930 <prvIdleTask+0x8>
 800294e:	bf00      	nop
 8002950:	20012c84 	.word	0x20012c84
 8002954:	e000ed04 	.word	0xe000ed04

08002958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	e00c      	b.n	800297e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <prvInitialiseTaskLists+0x60>)
 8002970:	4413      	add	r3, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f966 	bl	8000c44 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3301      	adds	r3, #1
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d9ef      	bls.n	8002964 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002984:	480d      	ldr	r0, [pc, #52]	; (80029bc <prvInitialiseTaskLists+0x64>)
 8002986:	f7fe f95d 	bl	8000c44 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <prvInitialiseTaskLists+0x68>)
 800298c:	f7fe f95a 	bl	8000c44 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <prvInitialiseTaskLists+0x6c>)
 8002992:	f7fe f957 	bl	8000c44 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002996:	480c      	ldr	r0, [pc, #48]	; (80029c8 <prvInitialiseTaskLists+0x70>)
 8002998:	f7fe f954 	bl	8000c44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <prvInitialiseTaskLists+0x74>)
 800299e:	f7fe f951 	bl	8000c44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <prvInitialiseTaskLists+0x78>)
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <prvInitialiseTaskLists+0x64>)
 80029a6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <prvInitialiseTaskLists+0x7c>)
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <prvInitialiseTaskLists+0x68>)
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20012c84 	.word	0x20012c84
 80029bc:	20012ce8 	.word	0x20012ce8
 80029c0:	20012cfc 	.word	0x20012cfc
 80029c4:	20012d18 	.word	0x20012d18
 80029c8:	20012d2c 	.word	0x20012d2c
 80029cc:	20012d44 	.word	0x20012d44
 80029d0:	20012d10 	.word	0x20012d10
 80029d4:	20012d14 	.word	0x20012d14

080029d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029de:	e019      	b.n	8002a14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029e0:	f7fe fae6 	bl	8000fb0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <prvCheckTasksWaitingTermination+0x4c>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f98d 	bl	8000d10 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <prvCheckTasksWaitingTermination+0x50>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <prvCheckTasksWaitingTermination+0x50>)
 80029fe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <prvCheckTasksWaitingTermination+0x54>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <prvCheckTasksWaitingTermination+0x54>)
 8002a08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a0a:	f7fe faff 	bl	800100c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f80e 	bl	8002a30 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <prvCheckTasksWaitingTermination+0x54>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e1      	bne.n	80029e0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20012d2c 	.word	0x20012d2c
 8002a28:	20012d58 	.word	0x20012d58
 8002a2c:	20012d40 	.word	0x20012d40

08002a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fc71 	bl	8001324 <vPortFree>
                vPortFree( pxTCB );
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fc6e 	bl	8001324 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <prvResetNextTaskUnblockTime+0x30>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <prvResetNextTaskUnblockTime+0x34>)
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a66:	e005      	b.n	8002a74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <prvResetNextTaskUnblockTime+0x30>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <prvResetNextTaskUnblockTime+0x34>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20012d10 	.word	0x20012d10
 8002a84:	20012d78 	.word	0x20012d78

08002a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <xTaskGetSchedulerState+0x34>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002a96:	2301      	movs	r3, #1
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	e008      	b.n	8002aae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <xTaskGetSchedulerState+0x38>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e001      	b.n	8002aae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002aae:	687b      	ldr	r3, [r7, #4]
    }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20012d64 	.word	0x20012d64
 8002ac0:	20012d80 	.word	0x20012d80

08002ac4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f918 	bl	8000d10 <uxListRemove>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2201      	movs	r2, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4013      	ands	r3, r2
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002afc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d124      	bne.n	8002b50 <prvAddCurrentTaskToDelayedList+0x8c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	6892      	ldr	r2, [r2, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a20      	ldr	r2, [pc, #128]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	3204      	adds	r2, #4
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1d1a      	adds	r2, r3, #4
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002b40:	615a      	str	r2, [r3, #20]
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002b4e:	e026      	b.n	8002b9e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d209      	bcs.n	8002b7c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7fe f892 	bl	8000c9e <vListInsert>
}
 8002b7a:	e010      	b.n	8002b9e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f7fe f888 	bl	8000c9e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d202      	bcs.n	8002b9e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20012d5c 	.word	0x20012d5c
 8002bac:	20012c80 	.word	0x20012c80
 8002bb0:	20012d60 	.word	0x20012d60
 8002bb4:	20012d44 	.word	0x20012d44
 8002bb8:	20012d14 	.word	0x20012d14
 8002bbc:	20012d10 	.word	0x20012d10
 8002bc0:	20012d78 	.word	0x20012d78

08002bc4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002bce:	f000 fa43 	bl	8003058 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <xTimerCreateTimerTask+0x54>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <xTimerCreateTimerTask+0x58>)
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	2302      	movs	r3, #2
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002be8:	490d      	ldr	r1, [pc, #52]	; (8002c20 <xTimerCreateTimerTask+0x5c>)
 8002bea:	480e      	ldr	r0, [pc, #56]	; (8002c24 <xTimerCreateTimerTask+0x60>)
 8002bec:	f7fe ff9a 	bl	8001b24 <xTaskCreate>
 8002bf0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <xTimerCreateTimerTask+0x48>
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	e7fe      	b.n	8002c0a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002c0c:	687b      	ldr	r3, [r7, #4]
    }
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20012db4 	.word	0x20012db4
 8002c1c:	20012db8 	.word	0x20012db8
 8002c20:	08003b8c 	.word	0x08003b8c
 8002c24:	08002cc9 	.word	0x08002cc9

08002c28 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002c34:	e008      	b.n	8002c48 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	18d1      	adds	r1, r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8db 	bl	8002e10 <prvInsertTimerInActiveList>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ea      	bne.n	8002c36 <prvReloadTimer+0xe>
        }
    }
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <prvProcessExpiredTimer+0x5c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f845 	bl	8000d10 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff ffc5 	bl	8002c28 <prvReloadTimer>
 8002c9e:	e008      	b.n	8002cb2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	4798      	blx	r3
    }
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20012dac 	.word	0x20012dac

08002cc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f857 	bl	8002d88 <prvGetNextExpireTime>
 8002cda:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f803 	bl	8002cec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002ce6:	f000 f8d5 	bl	8002e94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002cea:	e7f1      	b.n	8002cd0 <prvTimerTask+0x8>

08002cec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002cf6:	f7ff f9cb 	bl	8002090 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f866 	bl	8002dd0 <prvSampleTimeNow>
 8002d04:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d130      	bne.n	8002d6e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <prvProcessTimerOrBlockTask+0x3c>
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d806      	bhi.n	8002d28 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002d1a:	f7ff f9c7 	bl	80020ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ffa1 	bl	8002c68 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002d26:	e024      	b.n	8002d72 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <prvProcessTimerOrBlockTask+0x90>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <prvProcessTimerOrBlockTask+0x50>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <prvProcessTimerOrBlockTask+0x52>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <prvProcessTimerOrBlockTask+0x94>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7fe feb5 	bl	8001abc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002d52:	f7ff f9ab 	bl	80020ac <xTaskResumeAll>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <prvProcessTimerOrBlockTask+0x98>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
    }
 8002d6c:	e001      	b.n	8002d72 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002d6e:	f7ff f99d 	bl	80020ac <xTaskResumeAll>
    }
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20012db0 	.word	0x20012db0
 8002d80:	20012db4 	.word	0x20012db4
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <prvGetNextExpireTime+0x44>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <prvGetNextExpireTime+0x16>
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	e000      	b.n	8002da0 <prvGetNextExpireTime+0x18>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <prvGetNextExpireTime+0x44>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e001      	b.n	8002dbc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    }
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20012dac 	.word	0x20012dac

08002dd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002dd8:	f7ff fa62 	bl	80022a0 <xTaskGetTickCount>
 8002ddc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <prvSampleTimeNow+0x3c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d205      	bcs.n	8002df4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002de8:	f000 f910 	bl	800300c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e002      	b.n	8002dfa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <prvSampleTimeNow+0x3c>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002e00:	68fb      	ldr	r3, [r7, #12]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20012dbc 	.word	0x20012dbc

08002e10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d812      	bhi.n	8002e5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad2      	subs	r2, r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e01b      	b.n	8002e82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <prvInsertTimerInActiveList+0x7c>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7fd ff22 	bl	8000c9e <vListInsert>
 8002e5a:	e012      	b.n	8002e82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d206      	bcs.n	8002e72 <prvInsertTimerInActiveList+0x62>
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e007      	b.n	8002e82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <prvInsertTimerInActiveList+0x80>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f7fd ff0e 	bl	8000c9e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e82:	697b      	ldr	r3, [r7, #20]
    }
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20012db0 	.word	0x20012db0
 8002e90:	20012dac 	.word	0x20012dac

08002e94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e9a:	e0a5      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f2c0 80a2 	blt.w	8002fe8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd ff2b 	bl	8000d10 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff87 	bl	8002dd0 <prvSampleTimeNow>
 8002ec2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	f200 808c 	bhi.w	8002fe6 <prvProcessReceivedCommands+0x152>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <prvProcessReceivedCommands+0x40>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002ef9 	.word	0x08002ef9
 8002edc:	08002f61 	.word	0x08002f61
 8002ee0:	08002f75 	.word	0x08002f75
 8002ee4:	08002fbd 	.word	0x08002fbd
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002ef9 	.word	0x08002ef9
 8002ef0:	08002f61 	.word	0x08002f61
 8002ef4:	08002f75 	.word	0x08002f75
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	18d1      	adds	r1, r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	69f8      	ldr	r0, [r7, #28]
 8002f18:	f7ff ff7a 	bl	8002e10 <prvInsertTimerInActiveList>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d062      	beq.n	8002fe8 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	69f8      	ldr	r0, [r7, #28]
 8002f3e:	f7ff fe73 	bl	8002c28 <prvReloadTimer>
 8002f42:	e008      	b.n	8002f56 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	69f8      	ldr	r0, [r7, #28]
 8002f5c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002f5e:	e043      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002f72:	e039      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <prvProcessReceivedCommands+0x114>
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e7fe      	b.n	8002fa6 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	18d1      	adds	r1, r2, r3
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	69f8      	ldr	r0, [r7, #28]
 8002fb6:	f7ff ff2b 	bl	8002e10 <prvInsertTimerInActiveList>
                        break;
 8002fba:	e015      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8002fca:	69f8      	ldr	r0, [r7, #28]
 8002fcc:	f7fe f9aa 	bl	8001324 <vPortFree>
 8002fd0:	e00a      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002fe4:	e000      	b.n	8002fe8 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002fe6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <prvProcessReceivedCommands+0x174>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f107 0108 	add.w	r1, r7, #8
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fbaa 	bl	800174c <xQueueReceive>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f af4e 	bne.w	8002e9c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003000:	bf00      	nop
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20012db4 	.word	0x20012db4

0800300c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003012:	e009      	b.n	8003028 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <prvSwitchTimerLists+0x44>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800301e:	f04f 31ff 	mov.w	r1, #4294967295
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fe20 	bl	8002c68 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <prvSwitchTimerLists+0x44>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <prvSwitchTimerLists+0x44>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <prvSwitchTimerLists+0x48>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <prvSwitchTimerLists+0x44>)
 800303e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <prvSwitchTimerLists+0x48>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6013      	str	r3, [r2, #0]
    }
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20012dac 	.word	0x20012dac
 8003054:	20012db0 	.word	0x20012db0

08003058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800305c:	f7fd ffa8 	bl	8000fb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <prvCheckForValidListAndQueue+0x54>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11d      	bne.n	80030a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003068:	4811      	ldr	r0, [pc, #68]	; (80030b0 <prvCheckForValidListAndQueue+0x58>)
 800306a:	f7fd fdeb 	bl	8000c44 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800306e:	4811      	ldr	r0, [pc, #68]	; (80030b4 <prvCheckForValidListAndQueue+0x5c>)
 8003070:	f7fd fde8 	bl	8000c44 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <prvCheckForValidListAndQueue+0x60>)
 8003076:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <prvCheckForValidListAndQueue+0x58>)
 8003078:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <prvCheckForValidListAndQueue+0x64>)
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <prvCheckForValidListAndQueue+0x5c>)
 800307e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003080:	2200      	movs	r2, #0
 8003082:	210c      	movs	r1, #12
 8003084:	200a      	movs	r0, #10
 8003086:	f7fe faf3 	bl	8001670 <xQueueGenericCreate>
 800308a:	4602      	mov	r2, r0
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <prvCheckForValidListAndQueue+0x54>)
 800308e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <prvCheckForValidListAndQueue+0x54>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <prvCheckForValidListAndQueue+0x54>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4908      	ldr	r1, [pc, #32]	; (80030c0 <prvCheckForValidListAndQueue+0x68>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fcbe 	bl	8001a20 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030a4:	f7fd ffb2 	bl	800100c <vPortExitCritical>
    }
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20012db4 	.word	0x20012db4
 80030b0:	20012d84 	.word	0x20012d84
 80030b4:	20012d98 	.word	0x20012d98
 80030b8:	20012dac 	.word	0x20012dac
 80030bc:	20012db0 	.word	0x20012db0
 80030c0:	08003b94 	.word	0x08003b94

080030c4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <Audio_MAL_IRQHandler+0xec>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7fd f92c 	bl	8000330 <DMA_GetFlagStatus>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d064      	beq.n	80031a8 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04c      	beq.n	8003180 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80030e6:	bf00      	nop
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd f907 	bl	8000300 <DMA_GetCmdStatus>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f7      	bne.n	80030e8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80030f8:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <Audio_MAL_IRQHandler+0xec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7fd f950 	bl	80003a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <Audio_MAL_IRQHandler+0xf4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <Audio_MAL_IRQHandler+0xf8>)
 8003110:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800311a:	4293      	cmp	r3, r2
 800311c:	bf28      	it	cs
 800311e:	4613      	movcs	r3, r2
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <Audio_MAL_IRQHandler+0xf8>)
 8003122:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4924      	ldr	r1, [pc, #144]	; (80031bc <Audio_MAL_IRQHandler+0xf8>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f874 	bl	8000218 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f8c6 	bl	80002c8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <Audio_MAL_IRQHandler+0xf4>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d203      	bcs.n	8003152 <Audio_MAL_IRQHandler+0x8e>
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	e000      	b.n	8003154 <Audio_MAL_IRQHandler+0x90>
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <Audio_MAL_IRQHandler+0xfc>)
 8003154:	4413      	add	r3, r2
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <Audio_MAL_IRQHandler+0xf4>)
 8003158:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003166:	428b      	cmp	r3, r1
 8003168:	bf28      	it	cs
 800316a:	460b      	movcs	r3, r1
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <Audio_MAL_IRQHandler+0xf0>)
 8003170:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f8a5 	bl	80002c8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800317e:	e013      	b.n	80031a8 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f89e 	bl	80002c8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <Audio_MAL_IRQHandler+0xe8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <Audio_MAL_IRQHandler+0xec>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fd f906 	bl	80003a8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <Audio_MAL_IRQHandler+0xf4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fa37 	bl	8003616 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000020 	.word	0x20000020
 80031b0:	20000024 	.word	0x20000024
 80031b4:	20000018 	.word	0x20000018
 80031b8:	20012e0c 	.word	0x20012e0c
 80031bc:	20012e4c 	.word	0x20012e4c
 80031c0:	0001fffe 	.word	0x0001fffe

080031c4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80031c8:	f7ff ff7c 	bl	80030c4 <Audio_MAL_IRQHandler>
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80031d4:	f7ff ff76 	bl	80030c4 <Audio_MAL_IRQHandler>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80031e0:	2102      	movs	r1, #2
 80031e2:	480d      	ldr	r0, [pc, #52]	; (8003218 <SPI3_IRQHandler+0x3c>)
 80031e4:	f7fd fbc7 	bl	8000976 <SPI_I2S_GetFlagStatus>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <SPI3_IRQHandler+0x40>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d106      	bne.n	8003204 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80031f6:	f000 fa19 	bl	800362c <EVAL_AUDIO_GetSampleCallBack>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4619      	mov	r1, r3
 80031fe:	2004      	movs	r0, #4
 8003200:	f7fc ffee 	bl	80001e0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003204:	f000 fa12 	bl	800362c <EVAL_AUDIO_GetSampleCallBack>
 8003208:	4603      	mov	r3, r0
 800320a:	4619      	mov	r1, r3
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <SPI3_IRQHandler+0x3c>)
 800320e:	f7fd fba3 	bl	8000958 <SPI_I2S_SendData>
  }
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40003c00 	.word	0x40003c00
 800321c:	2000001c 	.word	0x2000001c

08003220 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800322a:	4909      	ldr	r1, [pc, #36]	; (8003250 <NVIC_EnableIRQ+0x30>)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	79fa      	ldrb	r2, [r7, #7]
 8003234:	f002 021f 	and.w	r2, r2, #31
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	da0b      	bge.n	8003280 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003268:	490d      	ldr	r1, [pc, #52]	; (80032a0 <NVIC_SetPriority+0x4c>)
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	3b04      	subs	r3, #4
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800327e:	e009      	b.n	8003294 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003280:	4908      	ldr	r1, [pc, #32]	; (80032a4 <NVIC_SetPriority+0x50>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00
 80032a4:	e000e100 	.word	0xe000e100

080032a8 <EXTI0_IRQHandler>:
void EXTI_Config();

void Task1Handler(void *params);
void Task2Handler(void *params);

void EXTI0_IRQHandler(void){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line0);
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7fd f91b 	bl	80004e8 <EXTI_ClearITPendingBit>

	if(GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_0) == Bit_SET){
 80032b2:	2101      	movs	r1, #1
 80032b4:	4805      	ldr	r0, [pc, #20]	; (80032cc <EXTI0_IRQHandler+0x24>)
 80032b6:	f7fd f9b5 	bl	8000624 <GPIO_ReadOutputDataBit>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <EXTI0_IRQHandler+0x1e>

		buton_state = 1;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <EXTI0_IRQHandler+0x28>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
	}

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020000 	.word	0x40020000
 80032d0:	20012dc8 	.word	0x20012dc8

080032d4 <print_message>:

void print_message(char *message){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]


	for(int i=0; i<strlen(message); i++){
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e013      	b.n	800330a <print_message+0x36>

		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
 80032e2:	bf00      	nop
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <print_message+0x4c>)
 80032e8:	f7fd fc90 	bl	8000c0c <USART_GetFlagStatus>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d1f8      	bne.n	80032e4 <print_message+0x10>
		USART_SendData(USART2,message[i]);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	4808      	ldr	r0, [pc, #32]	; (8003320 <print_message+0x4c>)
 8003300:	f7fd fc72 	bl	8000be8 <USART_SendData>
	for(int i=0; i<strlen(message); i++){
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fc ff60 	bl	80001d0 <strlen>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8e4      	bhi.n	80032e2 <print_message+0xe>

	}

}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40004400 	.word	0x40004400

08003324 <main>:


int main(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af02      	add	r7, sp, #8
	RCC_DeInit();
 800332a:	f7fd f9df 	bl	80006ec <RCC_DeInit>

	SystemCoreClockUpdate();
 800332e:	f000 f9f7 	bl	8003720 <SystemCoreClockUpdate>

	Sys_Config();
 8003332:	f000 f8db 	bl	80034ec <Sys_Config>

	xTaskCreate(Task1Handler,"Task1",configMINIMAL_STACK_SIZE,NULL,4,&TaskHandle1);
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <main+0x40>)
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	2304      	movs	r3, #4
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2300      	movs	r3, #0
 8003340:	2282      	movs	r2, #130	; 0x82
 8003342:	4909      	ldr	r1, [pc, #36]	; (8003368 <main+0x44>)
 8003344:	4809      	ldr	r0, [pc, #36]	; (800336c <main+0x48>)
 8003346:	f7fe fbed 	bl	8001b24 <xTaskCreate>
	xTaskCreate(Task2Handler,"Task2",configMINIMAL_STACK_SIZE,NULL,2,&TaskHandle2);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <main+0x4c>)
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2302      	movs	r3, #2
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	2282      	movs	r2, #130	; 0x82
 8003356:	4907      	ldr	r1, [pc, #28]	; (8003374 <main+0x50>)
 8003358:	4807      	ldr	r0, [pc, #28]	; (8003378 <main+0x54>)
 800335a:	f7fe fbe3 	bl	8001b24 <xTaskCreate>

	vTaskStartScheduler();
 800335e:	f7fe fe47 	bl	8001ff0 <vTaskStartScheduler>

  while (1)
 8003362:	e7fe      	b.n	8003362 <main+0x3e>
 8003364:	20012dc0 	.word	0x20012dc0
 8003368:	08003b9c 	.word	0x08003b9c
 800336c:	0800337d 	.word	0x0800337d
 8003370:	20012dc4 	.word	0x20012dc4
 8003374:	08003ba4 	.word	0x08003ba4
 8003378:	08003435 	.word	0x08003435

0800337c <Task1Handler>:
  {

  }
}

void Task1Handler(void *params){
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

	UBaseType_t p1,p2;

	sprintf(mymessage,"Task1 calisiyor\r\n");
 8003384:	4a24      	ldr	r2, [pc, #144]	; (8003418 <Task1Handler+0x9c>)
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <Task1Handler+0xa0>)
 8003388:	4615      	mov	r5, r2
 800338a:	461c      	mov	r4, r3
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	6028      	str	r0, [r5, #0]
 8003390:	6069      	str	r1, [r5, #4]
 8003392:	60aa      	str	r2, [r5, #8]
 8003394:	60eb      	str	r3, [r5, #12]
 8003396:	8823      	ldrh	r3, [r4, #0]
 8003398:	822b      	strh	r3, [r5, #16]
	print_message(mymessage);
 800339a:	481f      	ldr	r0, [pc, #124]	; (8003418 <Task1Handler+0x9c>)
 800339c:	f7ff ff9a 	bl	80032d4 <print_message>

	sprintf(mymessage,"Task1 onceligi: %d\r\n", uxTaskPriorityGet(TaskHandle1));
 80033a0:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <Task1Handler+0xa4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fd37 	bl	8001e18 <uxTaskPriorityGet>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	491d      	ldr	r1, [pc, #116]	; (8003424 <Task1Handler+0xa8>)
 80033b0:	4819      	ldr	r0, [pc, #100]	; (8003418 <Task1Handler+0x9c>)
 80033b2:	f000 fb8d 	bl	8003ad0 <siprintf>
	print_message(mymessage);
 80033b6:	4818      	ldr	r0, [pc, #96]	; (8003418 <Task1Handler+0x9c>)
 80033b8:	f7ff ff8c 	bl	80032d4 <print_message>

	sprintf(mymessage,"Task2 onceligi: %d\r\n", uxTaskPriorityGet(TaskHandle2));
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <Task1Handler+0xac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fd29 	bl	8001e18 <uxTaskPriorityGet>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	4918      	ldr	r1, [pc, #96]	; (800342c <Task1Handler+0xb0>)
 80033cc:	4812      	ldr	r0, [pc, #72]	; (8003418 <Task1Handler+0x9c>)
 80033ce:	f000 fb7f 	bl	8003ad0 <siprintf>
	print_message(mymessage);
 80033d2:	4811      	ldr	r0, [pc, #68]	; (8003418 <Task1Handler+0x9c>)
 80033d4:	f7ff ff7e 	bl	80032d4 <print_message>

	while(1){

		if(buton_state == 1){
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <Task1Handler+0xb4>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d1fb      	bne.n	80033d8 <Task1Handler+0x5c>

			buton_state = 0;
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <Task1Handler+0xb4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]

			p1 = uxTaskPriorityGet(TaskHandle1);
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <Task1Handler+0xa4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fd14 	bl	8001e18 <uxTaskPriorityGet>
 80033f0:	60f8      	str	r0, [r7, #12]
			p2 = uxTaskPriorityGet(TaskHandle2);
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <Task1Handler+0xac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fd0e 	bl	8001e18 <uxTaskPriorityGet>
 80033fc:	60b8      	str	r0, [r7, #8]

			vTaskPrioritySet(TaskHandle1,p2);
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <Task1Handler+0xa4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fd21 	bl	8001e4c <vTaskPrioritySet>
			vTaskPrioritySet(TaskHandle2,p1);
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <Task1Handler+0xac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fd1b 	bl	8001e4c <vTaskPrioritySet>
		if(buton_state == 1){
 8003416:	e7df      	b.n	80033d8 <Task1Handler+0x5c>
 8003418:	20012e88 	.word	0x20012e88
 800341c:	08003bac 	.word	0x08003bac
 8003420:	20012dc0 	.word	0x20012dc0
 8003424:	08003bc0 	.word	0x08003bc0
 8003428:	20012dc4 	.word	0x20012dc4
 800342c:	08003bd8 	.word	0x08003bd8
 8003430:	20012dc8 	.word	0x20012dc8

08003434 <Task2Handler>:
		}
	}

}
void Task2Handler(void *params){
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

	UBaseType_t p1,p2;

	sprintf(mymessage,"Task2 calisiyor\r\n");
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <Task2Handler+0x9c>)
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <Task2Handler+0xa0>)
 8003440:	4615      	mov	r5, r2
 8003442:	461c      	mov	r4, r3
 8003444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003446:	6028      	str	r0, [r5, #0]
 8003448:	6069      	str	r1, [r5, #4]
 800344a:	60aa      	str	r2, [r5, #8]
 800344c:	60eb      	str	r3, [r5, #12]
 800344e:	8823      	ldrh	r3, [r4, #0]
 8003450:	822b      	strh	r3, [r5, #16]
	print_message(mymessage);
 8003452:	481f      	ldr	r0, [pc, #124]	; (80034d0 <Task2Handler+0x9c>)
 8003454:	f7ff ff3e 	bl	80032d4 <print_message>

	sprintf(mymessage,"Task1 onceligi: %d\r\n", uxTaskPriorityGet(TaskHandle1));
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <Task2Handler+0xa4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe fcdb 	bl	8001e18 <uxTaskPriorityGet>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	491d      	ldr	r1, [pc, #116]	; (80034dc <Task2Handler+0xa8>)
 8003468:	4819      	ldr	r0, [pc, #100]	; (80034d0 <Task2Handler+0x9c>)
 800346a:	f000 fb31 	bl	8003ad0 <siprintf>
	print_message(mymessage);
 800346e:	4818      	ldr	r0, [pc, #96]	; (80034d0 <Task2Handler+0x9c>)
 8003470:	f7ff ff30 	bl	80032d4 <print_message>

	sprintf(mymessage,"Task2 onceligi: %d\r\n", uxTaskPriorityGet(TaskHandle2));
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <Task2Handler+0xac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fccd 	bl	8001e18 <uxTaskPriorityGet>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4918      	ldr	r1, [pc, #96]	; (80034e4 <Task2Handler+0xb0>)
 8003484:	4812      	ldr	r0, [pc, #72]	; (80034d0 <Task2Handler+0x9c>)
 8003486:	f000 fb23 	bl	8003ad0 <siprintf>
	print_message(mymessage);
 800348a:	4811      	ldr	r0, [pc, #68]	; (80034d0 <Task2Handler+0x9c>)
 800348c:	f7ff ff22 	bl	80032d4 <print_message>

	while(1){
		if(buton_state == 1){
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <Task2Handler+0xb4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d1fb      	bne.n	8003490 <Task2Handler+0x5c>

		buton_state = 0;
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <Task2Handler+0xb4>)
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]

		p1 = uxTaskPriorityGet(TaskHandle1);
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <Task2Handler+0xa4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fcb8 	bl	8001e18 <uxTaskPriorityGet>
 80034a8:	60f8      	str	r0, [r7, #12]
		p2 = uxTaskPriorityGet(TaskHandle2);
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <Task2Handler+0xac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fcb2 	bl	8001e18 <uxTaskPriorityGet>
 80034b4:	60b8      	str	r0, [r7, #8]

		vTaskPrioritySet(TaskHandle1,p2);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <Task2Handler+0xa4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fcc5 	bl	8001e4c <vTaskPrioritySet>
		vTaskPrioritySet(TaskHandle2,p1);
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <Task2Handler+0xac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fcbf 	bl	8001e4c <vTaskPrioritySet>
		if(buton_state == 1){
 80034ce:	e7df      	b.n	8003490 <Task2Handler+0x5c>
 80034d0:	20012e88 	.word	0x20012e88
 80034d4:	08003bf0 	.word	0x08003bf0
 80034d8:	20012dc0 	.word	0x20012dc0
 80034dc:	08003bc0 	.word	0x08003bc0
 80034e0:	20012dc4 	.word	0x20012dc4
 80034e4:	08003bd8 	.word	0x08003bd8
 80034e8:	20012dc8 	.word	0x20012dc8

080034ec <Sys_Config>:
	}
}
}

void Sys_Config(){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	GPIO_Config();
 80034f0:	f000 f806 	bl	8003500 <GPIO_Config>
	USART_Config();
 80034f4:	f000 f842 	bl	800357c <USART_Config>
	EXTI_Config();
 80034f8:	f000 f86a 	bl	80035d0 <EXTI_Config>

}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <GPIO_Config>:

void GPIO_Config(){
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8003506:	2101      	movs	r1, #1
 8003508:	2001      	movs	r0, #1
 800350a:	f7fd f9c5 	bl	8000898 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_Init_Struct = {0};
 800350e:	463b      	mov	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]

	GPIO_Init_Struct.GPIO_Mode = GPIO_Mode_IN;
 8003516:	2300      	movs	r3, #0
 8003518:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Struct.GPIO_OType = GPIO_OType_PP;
 800351a:	2300      	movs	r3, #0
 800351c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init_Struct.GPIO_Pin = GPIO_Pin_0;
 800351e:	2301      	movs	r3, #1
 8003520:	603b      	str	r3, [r7, #0]
	GPIO_Init_Struct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Struct.GPIO_Speed = GPIO_Speed_100MHz;
 8003526:	2303      	movs	r3, #3
 8003528:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIO_Init_Struct);
 800352a:	463b      	mov	r3, r7
 800352c:	4619      	mov	r1, r3
 800352e:	4812      	ldr	r0, [pc, #72]	; (8003578 <GPIO_Config+0x78>)
 8003530:	f7fc ffea 	bl	8000508 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
 8003534:	2100      	movs	r1, #0
 8003536:	2000      	movs	r0, #0
 8003538:	f7fd fa3a 	bl	80009b0 <SYSCFG_EXTILineConfig>

	GPIO_Init_Struct.GPIO_Mode = GPIO_Mode_AF;
 800353c:	2302      	movs	r3, #2
 800353e:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Struct.GPIO_OType = GPIO_OType_PP;
 8003540:	2300      	movs	r3, #0
 8003542:	71bb      	strb	r3, [r7, #6]
	GPIO_Init_Struct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8003544:	230c      	movs	r3, #12
 8003546:	603b      	str	r3, [r7, #0]
	GPIO_Init_Struct.GPIO_PuPd = GPIO_PuPd_UP;
 8003548:	2301      	movs	r3, #1
 800354a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Struct.GPIO_Speed = GPIO_Speed_100MHz;
 800354c:	2303      	movs	r3, #3
 800354e:	717b      	strb	r3, [r7, #5]

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 8003550:	2207      	movs	r2, #7
 8003552:	2102      	movs	r1, #2
 8003554:	4808      	ldr	r0, [pc, #32]	; (8003578 <GPIO_Config+0x78>)
 8003556:	f7fd f87f 	bl	8000658 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 800355a:	2207      	movs	r2, #7
 800355c:	2103      	movs	r1, #3
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <GPIO_Config+0x78>)
 8003560:	f7fd f87a 	bl	8000658 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA,&GPIO_Init_Struct);
 8003564:	463b      	mov	r3, r7
 8003566:	4619      	mov	r1, r3
 8003568:	4803      	ldr	r0, [pc, #12]	; (8003578 <GPIO_Config+0x78>)
 800356a:	f7fc ffcd 	bl	8000508 <GPIO_Init>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40020000 	.word	0x40020000

0800357c <USART_Config>:

void USART_Config(){
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8003582:	2101      	movs	r1, #1
 8003584:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003588:	f7fd f9a6 	bl	80008d8 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_Init_Struct = {0};
 800358c:	463b      	mov	r3, r7
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]

	USART_Init_Struct.USART_BaudRate = 9600;
 8003598:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800359c:	603b      	str	r3, [r7, #0]
	USART_Init_Struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800359e:	2300      	movs	r3, #0
 80035a0:	81bb      	strh	r3, [r7, #12]
	USART_Init_Struct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80035a2:	230c      	movs	r3, #12
 80035a4:	817b      	strh	r3, [r7, #10]
	USART_Init_Struct.USART_Parity = USART_Parity_No;
 80035a6:	2300      	movs	r3, #0
 80035a8:	813b      	strh	r3, [r7, #8]
	USART_Init_Struct.USART_StopBits = USART_StopBits_1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	80fb      	strh	r3, [r7, #6]
	USART_Init_Struct.USART_WordLength = USART_WordLength_8b;
 80035ae:	2300      	movs	r3, #0
 80035b0:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART2,&USART_Init_Struct);
 80035b2:	463b      	mov	r3, r7
 80035b4:	4619      	mov	r1, r3
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <USART_Config+0x50>)
 80035b8:	f7fd fa3c 	bl	8000a34 <USART_Init>

	USART_Cmd(USART2,ENABLE);
 80035bc:	2101      	movs	r1, #1
 80035be:	4803      	ldr	r0, [pc, #12]	; (80035cc <USART_Config+0x50>)
 80035c0:	f7fd faf2 	bl	8000ba8 <USART_Cmd>

}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40004400 	.word	0x40004400

080035d0 <EXTI_Config>:

void EXTI_Config(){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80035d6:	2101      	movs	r1, #1
 80035d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035dc:	f7fd f99c 	bl	8000918 <RCC_APB2PeriphClockCmd>

	EXTI_InitTypeDef EXTI_Init_Struct = {0};
 80035e0:	463b      	mov	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]

	EXTI_Init_Struct.EXTI_Line = EXTI_Line0;
 80035e8:	2301      	movs	r3, #1
 80035ea:	603b      	str	r3, [r7, #0]
	EXTI_Init_Struct.EXTI_LineCmd = ENABLE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	71bb      	strb	r3, [r7, #6]
	EXTI_Init_Struct.EXTI_Mode = EXTI_Mode_Interrupt;
 80035f0:	2300      	movs	r3, #0
 80035f2:	713b      	strb	r3, [r7, #4]
	EXTI_Init_Struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80035f4:	2308      	movs	r3, #8
 80035f6:	717b      	strb	r3, [r7, #5]

	EXTI_Init(&EXTI_Init_Struct);
 80035f8:	463b      	mov	r3, r7
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ff02 	bl	8000404 <EXTI_Init>

	NVIC_SetPriority(EXTI0_IRQn,2);
 8003600:	2102      	movs	r1, #2
 8003602:	2006      	movs	r0, #6
 8003604:	f7ff fe26 	bl	8003254 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8003608:	2006      	movs	r0, #6
 800360a:	f7ff fe09 	bl	8003220 <NVIC_EnableIRQ>


}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <EVAL_AUDIO_TransferComplete_CallBack>:


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003620:	bf00      	nop
}
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <EVAL_AUDIO_GetSampleCallBack>:


uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8003630:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003678 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003646:	e003      	b.n	8003650 <LoopCopyDataInit>

08003648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800364a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800364c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800364e:	3104      	adds	r1, #4

08003650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003650:	480b      	ldr	r0, [pc, #44]	; (8003680 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003658:	d3f6      	bcc.n	8003648 <CopyDataInit>
  ldr  r2, =_sbss
 800365a:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800365c:	e002      	b.n	8003664 <LoopFillZerobss>

0800365e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800365e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003660:	f842 3b04 	str.w	r3, [r2], #4

08003664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003668:	d3f9      	bcc.n	800365e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800366a:	f000 f823 	bl	80036b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800366e:	f000 fa45 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7ff fe57 	bl	8003324 <main>
  bx  lr    
 8003676:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003678:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800367c:	08003c0c 	.word	0x08003c0c
  ldr  r0, =_sdata
 8003680:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003684:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8003688:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 800368c:	20012eec 	.word	0x20012eec

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>

08003692 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003696:	e7fe      	b.n	8003696 <MemManage_Handler+0x4>

08003698 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800369c:	e7fe      	b.n	800369c <BusFault_Handler+0x4>

0800369e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <UsageFault_Handler+0x4>

080036a4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <SystemInit+0x60>)
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <SystemInit+0x60>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <SystemInit+0x64>)
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <SystemInit+0x64>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <SystemInit+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80036da:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <SystemInit+0x64>)
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <SystemInit+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <SystemInit+0x64>)
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <SystemInit+0x68>)
 80036ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <SystemInit+0x64>)
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <SystemInit+0x64>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <SystemInit+0x64>)
 80036fe:	2200      	movs	r2, #0
 8003700:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003702:	f000 f889 	bl	8003818 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <SystemInit+0x60>)
 8003708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370c:	609a      	str	r2, [r3, #8]
#endif
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000ed00 	.word	0xe000ed00
 8003718:	40023800 	.word	0x40023800
 800371c:	24003010 	.word	0x24003010

08003720 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	2302      	movs	r3, #2
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	2302      	movs	r3, #2
 8003738:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d007      	beq.n	800375a <SystemCoreClockUpdate+0x3a>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d009      	beq.n	8003762 <SystemCoreClockUpdate+0x42>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 8003754:	4a2d      	ldr	r2, [pc, #180]	; (800380c <SystemCoreClockUpdate+0xec>)
 8003756:	601a      	str	r2, [r3, #0]
      break;
 8003758:	e03d      	b.n	80037d6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <SystemCoreClockUpdate+0xf0>)
 800375e:	601a      	str	r2, [r3, #0]
      break;
 8003760:	e039      	b.n	80037d6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	0d9b      	lsrs	r3, r3, #22
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800376e:	4b25      	ldr	r3, [pc, #148]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003776:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800377e:	4a24      	ldr	r2, [pc, #144]	; (8003810 <SystemCoreClockUpdate+0xf0>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 8003788:	6852      	ldr	r2, [r2, #4]
 800378a:	0992      	lsrs	r2, r2, #6
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e00b      	b.n	80037b0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <SystemCoreClockUpdate+0xec>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	0992      	lsrs	r2, r2, #6
 80037a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 80037ca:	6013      	str	r3, [r2, #0]
      break;
 80037cc:	e003      	b.n	80037d6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 80037d0:	4a0e      	ldr	r2, [pc, #56]	; (800380c <SystemCoreClockUpdate+0xec>)
 80037d2:	601a      	str	r2, [r3, #0]
      break;
 80037d4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <SystemCoreClockUpdate+0xe4>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <SystemCoreClockUpdate+0xf4>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a05      	ldr	r2, [pc, #20]	; (8003808 <SystemCoreClockUpdate+0xe8>)
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	20000028 	.word	0x20000028
 800380c:	00f42400 	.word	0x00f42400
 8003810:	007a1200 	.word	0x007a1200
 8003814:	2000002c 	.word	0x2000002c

08003818 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003826:	4a36      	ldr	r2, [pc, #216]	; (8003900 <SetSysClock+0xe8>)
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <SetSysClock+0xe8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <SetSysClock+0xe8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3301      	adds	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <SetSysClock+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800384e:	d1f0      	bne.n	8003832 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <SetSysClock+0xe8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800385c:	2301      	movs	r3, #1
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	e001      	b.n	8003866 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d142      	bne.n	80038f2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <SetSysClock+0xe8>)
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <SetSysClock+0xe8>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <SetSysClock+0xec>)
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <SetSysClock+0xec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003882:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <SetSysClock+0xe8>)
 8003886:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <SetSysClock+0xe8>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <SetSysClock+0xe8>)
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <SetSysClock+0xe8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003896:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <SetSysClock+0xe8>)
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <SetSysClock+0xe8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80038a2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <SetSysClock+0xe8>)
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <SetSysClock+0xf0>)
 80038a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <SetSysClock+0xe8>)
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <SetSysClock+0xe8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80038b6:	bf00      	nop
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <SetSysClock+0xe8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f9      	beq.n	80038b8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <SetSysClock+0xf4>)
 80038c6:	f240 6205 	movw	r2, #1541	; 0x605
 80038ca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80038cc:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <SetSysClock+0xe8>)
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <SetSysClock+0xe8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <SetSysClock+0xe8>)
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <SetSysClock+0xe8>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80038e4:	bf00      	nop
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <SetSysClock+0xe8>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d1f9      	bne.n	80038e6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40007000 	.word	0x40007000
 8003908:	07405408 	.word	0x07405408
 800390c:	40023c00 	.word	0x40023c00

08003910 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003920:	e004      	b.n	800392c <ts_itoa+0x1c>
		div *= base;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	fbb2 f2f3 	udiv	r2, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d2f3      	bcs.n	8003922 <ts_itoa+0x12>

	while (div != 0)
 800393a:	e029      	b.n	8003990 <ts_itoa+0x80>
	{
		int num = d/div;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	fbb3 f1f2 	udiv	r1, r3, r2
 800394e:	fb02 f201 	mul.w	r2, r2, r1
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	fb92 f3f3 	sdiv	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b09      	cmp	r3, #9
 8003964:	dd0a      	ble.n	800397c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	6011      	str	r1, [r2, #0]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	3237      	adds	r2, #55	; 0x37
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e009      	b.n	8003990 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1c59      	adds	r1, r3, #1
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	3230      	adds	r2, #48	; 0x30
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1d2      	bne.n	800393c <ts_itoa+0x2c>
	}
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80039b2:	e07d      	b.n	8003ab0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b25      	cmp	r3, #37	; 0x25
 80039ba:	d171      	bne.n	8003aa0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d01e      	beq.n	8003a08 <ts_formatstring+0x66>
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	dc06      	bgt.n	80039dc <ts_formatstring+0x3a>
 80039ce:	2b58      	cmp	r3, #88	; 0x58
 80039d0:	d050      	beq.n	8003a74 <ts_formatstring+0xd2>
 80039d2:	2b63      	cmp	r3, #99	; 0x63
 80039d4:	d00e      	beq.n	80039f4 <ts_formatstring+0x52>
 80039d6:	2b25      	cmp	r3, #37	; 0x25
 80039d8:	d058      	beq.n	8003a8c <ts_formatstring+0xea>
 80039da:	e05d      	b.n	8003a98 <ts_formatstring+0xf6>
 80039dc:	2b73      	cmp	r3, #115	; 0x73
 80039de:	d02b      	beq.n	8003a38 <ts_formatstring+0x96>
 80039e0:	2b73      	cmp	r3, #115	; 0x73
 80039e2:	dc02      	bgt.n	80039ea <ts_formatstring+0x48>
 80039e4:	2b69      	cmp	r3, #105	; 0x69
 80039e6:	d00f      	beq.n	8003a08 <ts_formatstring+0x66>
 80039e8:	e056      	b.n	8003a98 <ts_formatstring+0xf6>
 80039ea:	2b75      	cmp	r3, #117	; 0x75
 80039ec:	d037      	beq.n	8003a5e <ts_formatstring+0xbc>
 80039ee:	2b78      	cmp	r3, #120	; 0x78
 80039f0:	d040      	beq.n	8003a74 <ts_formatstring+0xd2>
 80039f2:	e051      	b.n	8003a98 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	60fa      	str	r2, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	1d11      	adds	r1, r2, #4
 80039fe:	6079      	str	r1, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
				break;
 8003a06:	e047      	b.n	8003a98 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da07      	bge.n	8003a28 <ts_formatstring+0x86>
					{
						val *= -1;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	425b      	negs	r3, r3
 8003a1c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	222d      	movs	r2, #45	; 0x2d
 8003a26:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	f107 030c 	add.w	r3, r7, #12
 8003a2e:	220a      	movs	r2, #10
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff6d 	bl	8003910 <ts_itoa>
				}
				break;
 8003a36:	e02f      	b.n	8003a98 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003a42:	e007      	b.n	8003a54 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	60fa      	str	r2, [r7, #12]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	1c51      	adds	r1, r2, #1
 8003a4e:	61b9      	str	r1, [r7, #24]
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f3      	bne.n	8003a44 <ts_formatstring+0xa2>
					}
				}
				break;
 8003a5c:	e01c      	b.n	8003a98 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	1d1a      	adds	r2, r3, #4
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	220a      	movs	r2, #10
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff4f 	bl	8003910 <ts_itoa>
				break;
 8003a72:	e011      	b.n	8003a98 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	2210      	movs	r2, #16
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff43 	bl	8003910 <ts_itoa>
				break;
 8003a8a:	e005      	b.n	8003a98 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	60fa      	str	r2, [r7, #12]
 8003a92:	2225      	movs	r2, #37	; 0x25
 8003a94:	701a      	strb	r2, [r3, #0]
				  break;
 8003a96:	bf00      	nop
			}
			fmt++;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	e007      	b.n	8003ab0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	60fa      	str	r2, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	1c51      	adds	r1, r2, #1
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f47f af7d 	bne.w	80039b4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8003ad0:	b40e      	push	{r1, r2, r3}
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003ada:	f107 0320 	add.w	r3, r7, #32
 8003ade:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	69f9      	ldr	r1, [r7, #28]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff5c 	bl	80039a2 <ts_formatstring>
 8003aea:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af8:	b003      	add	sp, #12
 8003afa:	4770      	bx	lr

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0d      	ldr	r6, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1ba4      	subs	r4, r4, r6
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2500      	movs	r5, #0
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4e0b      	ldr	r6, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f82c 	bl	8003b6c <_init>
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	42a5      	cmp	r5, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b24:	4798      	blx	r3
 8003b26:	3501      	adds	r5, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003c04 	.word	0x08003c04
 8003b38:	08003c04 	.word	0x08003c04
 8003b3c:	08003c04 	.word	0x08003c04
 8003b40:	08003c08 	.word	0x08003c08

08003b44 <memcpy>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	1e43      	subs	r3, r0, #1
 8003b48:	440a      	add	r2, r1
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	d100      	bne.n	8003b50 <memcpy+0xc>
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b58:	e7f7      	b.n	8003b4a <memcpy+0x6>

08003b5a <memset>:
 8003b5a:	4402      	add	r2, r0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d100      	bne.n	8003b64 <memset+0xa>
 8003b62:	4770      	bx	lr
 8003b64:	f803 1b01 	strb.w	r1, [r3], #1
 8003b68:	e7f9      	b.n	8003b5e <memset+0x4>
	...

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
