
idle_hook_kullanimi_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08002f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  7 .bss          00012e48  2000002c  2000002c  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e74  20012e74  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c62e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001dee  00000000  00000000  0002c68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b70  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a78  00000000  00000000  0002efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c26  00000000  00000000  0002fa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000451e  00000000  00000000  00035686  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039ba4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f44  00000000  00000000  00039c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003cb64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f04 	.word	0x08002f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08002f04 	.word	0x08002f04

080001d0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <DAC_SetChannel1Data+0x34>)
 80001e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	3308      	adds	r3, #8
 80001ec:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	461a      	mov	r2, r3
 80001f2:	887b      	ldrh	r3, [r7, #2]
 80001f4:	6013      	str	r3, [r2, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40007400 	.word	0x40007400

08000208 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <DMA_Init+0xac>)
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000232:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800025c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4313      	orrs	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f023 0307 	bic.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4313      	orrs	r3, r2
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	4313      	orrs	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	691a      	ldr	r2, [r3, #16]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	f01c803f 	.word	0xf01c803f

080002b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002d6:	e005      	b.n	80002e4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f023 0201 	bic.w	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <DMA_GetFlagStatus+0x6c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d802      	bhi.n	8000340 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <DMA_GetFlagStatus+0x70>)
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e001      	b.n	8000344 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <DMA_GetFlagStatus+0x74>)
 8000342:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e002      	b.n	800035c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000362:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000366:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	4013      	ands	r3, r2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000372:	2301      	movs	r3, #1
 8000374:	75fb      	strb	r3, [r7, #23]
 8000376:	e001      	b.n	800037c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800037c:	7dfb      	ldrb	r3, [r7, #23]
}
 800037e:	4618      	mov	r0, r3
 8000380:	371c      	adds	r7, #28
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	4002640f 	.word	0x4002640f
 8000390:	40026000 	.word	0x40026000
 8000394:	40026400 	.word	0x40026400

08000398 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <DMA_ClearFlag+0x50>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d802      	bhi.n	80003b0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <DMA_ClearFlag+0x54>)
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e001      	b.n	80003b4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <DMA_ClearFlag+0x58>)
 80003b2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003cc:	e006      	b.n	80003dc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	6093      	str	r3, [r2, #8]
}
 80003dc:	bf00      	nop
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	4002640f 	.word	0x4002640f
 80003ec:	40026000 	.word	0x40026000
 80003f0:	40026400 	.word	0x40026400

080003f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e076      	b.n	80004fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000410:	2201      	movs	r2, #1
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	4013      	ands	r3, r2
 8000422:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d165      	bne.n	80004f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	4619      	mov	r1, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d003      	beq.n	800046a <GPIO_Init+0x76>
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d12e      	bne.n	80004c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	4619      	mov	r1, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	2301      	movs	r3, #1
 80004a4:	408b      	lsls	r3, r1
 80004a6:	43db      	mvns	r3, r3
 80004a8:	401a      	ands	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	7992      	ldrb	r2, [r2, #6]
 80004b6:	4611      	mov	r1, r2
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	b292      	uxth	r2, r2
 80004c2:	431a      	orrs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	79db      	ldrb	r3, [r3, #7]
 80004e8:	4619      	mov	r1, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d985      	bls.n	8000410 <GPIO_Init+0x1c>
    }
  }
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	405a      	eors	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	615a      	str	r2, [r3, #20]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <RCC_DeInit+0x50>)
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <RCC_DeInit+0x50>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <RCC_DeInit+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <RCC_DeInit+0x50>)
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <RCC_DeInit+0x50>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <RCC_DeInit+0x50>)
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <RCC_DeInit+0x54>)
 800055e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <RCC_DeInit+0x50>)
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <RCC_DeInit+0x58>)
 8000564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <RCC_DeInit+0x50>)
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <RCC_DeInit+0x50>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <RCC_DeInit+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40023800 	.word	0x40023800
 8000588:	24003010 	.word	0x24003010
 800058c:	20003000 	.word	0x20003000

08000590 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005a2:	490a      	ldr	r1, [pc, #40]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005ae:	e006      	b.n	80005be <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <RCC_AHB1PeriphClockCmd+0x3c>)
 80005b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	43db      	mvns	r3, r3
 80005ba:	4013      	ands	r3, r2
 80005bc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	887a      	ldrh	r2, [r7, #2]
 80005e0:	819a      	strh	r2, [r3, #12]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	891b      	ldrh	r3, [r3, #8]
 8000602:	b29a      	uxth	r2, r3
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	4013      	ands	r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800060e:	2301      	movs	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e001      	b.n	8000618 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000618:	7bfb      	ldrb	r3, [r7, #15]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0208 	add.w	r2, r3, #8
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f04f 32ff 	mov.w	r2, #4294967295
 800063e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f103 0208 	add.w	r2, r3, #8
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 0208 	add.w	r2, r3, #8
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000696:	d103      	bne.n	80006a0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00c      	b.n	80006ba <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3308      	adds	r3, #8
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	e002      	b.n	80006ae <vListInsert+0x2e>
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d9f6      	bls.n	80006a8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	6892      	ldr	r2, [r2, #8]
 8000708:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6852      	ldr	r2, [r2, #4]
 8000712:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d103      	bne.n	8000726 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3b04      	subs	r3, #4
 8000758:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000760:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3b04      	subs	r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	f023 0201 	bic.w	r2, r3, #1
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3b04      	subs	r3, #4
 8000776:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <pxPortInitialiseStack+0x64>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3b14      	subs	r3, #20
 8000782:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b04      	subs	r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f06f 0202 	mvn.w	r2, #2
 8000796:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3b20      	subs	r3, #32
 800079c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	080007b1 	.word	0x080007b1

080007b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <prvTaskExitError+0x50>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c2:	d009      	beq.n	80007d8 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e7fe      	b.n	80007d6 <prvTaskExitError+0x26>
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	f383 8811 	msr	BASEPRI, r3
 80007e0:	f3bf 8f6f 	isb	sy
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80007ea:	bf00      	nop
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0fc      	beq.n	80007ec <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000000 	.word	0x20000000
	...

08000810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <pxCurrentTCBConst2>)
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	6808      	ldr	r0, [r1, #0]
 8000816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800081a:	f380 8809 	msr	PSP, r0
 800081e:	f3bf 8f6f 	isb	sy
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f380 8811 	msr	BASEPRI, r0
 800082a:	4770      	bx	lr
 800082c:	f3af 8000 	nop.w

08000830 <pxCurrentTCBConst2>:
 8000830:	20012c70 	.word	0x20012c70
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop

08000838 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <prvPortStartFirstTask+0x24>)
 800083a:	6800      	ldr	r0, [r0, #0]
 800083c:	6800      	ldr	r0, [r0, #0]
 800083e:	f380 8808 	msr	MSP, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f380 8814 	msr	CONTROL, r0
 800084a:	b662      	cpsie	i
 800084c:	b661      	cpsie	f
 800084e:	f3bf 8f4f 	dsb	sy
 8000852:	f3bf 8f6f 	isb	sy
 8000856:	df00      	svc	0
 8000858:	bf00      	nop
 800085a:	0000      	.short	0x0000
 800085c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop

08000864 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <xPortStartScheduler+0x118>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a44      	ldr	r2, [pc, #272]	; (8000980 <xPortStartScheduler+0x11c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d109      	bne.n	8000888 <xPortStartScheduler+0x24>
 8000874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000878:	f383 8811 	msr	BASEPRI, r3
 800087c:	f3bf 8f6f 	isb	sy
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	e7fe      	b.n	8000886 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <xPortStartScheduler+0x118>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a3d      	ldr	r2, [pc, #244]	; (8000984 <xPortStartScheduler+0x120>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d109      	bne.n	80008a6 <xPortStartScheduler+0x42>
 8000892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e7fe      	b.n	80008a4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <xPortStartScheduler+0x124>)
 80008a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	22ff      	movs	r2, #255	; 0xff
 80008b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <xPortStartScheduler+0x128>)
 80008cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <xPortStartScheduler+0x12c>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80008d4:	e009      	b.n	80008ea <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <xPortStartScheduler+0x12c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	4a2c      	ldr	r2, [pc, #176]	; (8000990 <xPortStartScheduler+0x12c>)
 80008de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	2b80      	cmp	r3, #128	; 0x80
 80008f4:	d0ef      	beq.n	80008d6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <xPortStartScheduler+0x12c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d009      	beq.n	8000916 <xPortStartScheduler+0xb2>
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	e7fe      	b.n	8000914 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <xPortStartScheduler+0x12c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <xPortStartScheduler+0x12c>)
 800091e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <xPortStartScheduler+0x12c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <xPortStartScheduler+0x12c>)
 800092a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <xPortStartScheduler+0x130>)
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <xPortStartScheduler+0x130>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <xPortStartScheduler+0x130>)
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <xPortStartScheduler+0x130>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800094a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800094c:	f000 f8d4 	bl	8000af8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <xPortStartScheduler+0x134>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000956:	f000 f8f3 	bl	8000b40 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <xPortStartScheduler+0x138>)
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <xPortStartScheduler+0x138>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000964:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000966:	f7ff ff67 	bl	8000838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800096a:	f001 f9ff 	bl	8001d6c <vTaskSwitchContext>
    prvTaskExitError();
 800096e:	f7ff ff1f 	bl	80007b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	410fc271 	.word	0x410fc271
 8000984:	410fc270 	.word	0x410fc270
 8000988:	e000e400 	.word	0xe000e400
 800098c:	20000048 	.word	0x20000048
 8000990:	2000004c 	.word	0x2000004c
 8000994:	e000ed20 	.word	0xe000ed20
 8000998:	20000000 	.word	0x20000000
 800099c:	e000ef34 	.word	0xe000ef34

080009a0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009aa:	f383 8811 	msr	BASEPRI, r3
 80009ae:	f3bf 8f6f 	isb	sy
 80009b2:	f3bf 8f4f 	dsb	sy
 80009b6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <vPortEnterCritical+0x54>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <vPortEnterCritical+0x54>)
 80009c0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <vPortEnterCritical+0x54>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d10e      	bne.n	80009e8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <vPortEnterCritical+0x58>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d009      	beq.n	80009e8 <vPortEnterCritical+0x48>
 80009d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d8:	f383 8811 	msr	BASEPRI, r3
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	e7fe      	b.n	80009e6 <vPortEnterCritical+0x46>
    }
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000000 	.word	0x20000000
 80009f8:	e000ed04 	.word	0xe000ed04

080009fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <vPortExitCritical+0x4c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d109      	bne.n	8000a1e <vPortExitCritical+0x22>
 8000a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	e7fe      	b.n	8000a1c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <vPortExitCritical+0x4c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <vPortExitCritical+0x4c>)
 8000a26:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <vPortExitCritical+0x4c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d104      	bne.n	8000a3a <vPortExitCritical+0x3e>
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	00000000 	.word	0x00000000

08000a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000a50:	f3ef 8009 	mrs	r0, PSP
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <pxCurrentTCBConst>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	f01e 0f10 	tst.w	lr, #16
 8000a60:	bf08      	it	eq
 8000a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a6a:	6010      	str	r0, [r2, #0]
 8000a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000a74:	f380 8811 	msr	BASEPRI, r0
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	f3bf 8f6f 	isb	sy
 8000a80:	f001 f974 	bl	8001d6c <vTaskSwitchContext>
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	f380 8811 	msr	BASEPRI, r0
 8000a8c:	bc09      	pop	{r0, r3}
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	6808      	ldr	r0, [r1, #0]
 8000a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a96:	f01e 0f10 	tst.w	lr, #16
 8000a9a:	bf08      	it	eq
 8000a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000aa0:	f380 8809 	msr	PSP, r0
 8000aa4:	f3bf 8f6f 	isb	sy
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	f3af 8000 	nop.w

08000ab0 <pxCurrentTCBConst>:
 8000ab0:	20012c70 	.word	0x20012c70
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop

08000ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
        __asm volatile
 8000abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac2:	f383 8811 	msr	BASEPRI, r3
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	f3bf 8f4f 	dsb	sy
 8000ace:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000ad0:	f001 f836 	bl	8001b40 <xTaskIncrementTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SysTick_Handler+0x3c>)
 8000adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <vPortSetupTimerInterrupt+0x34>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <vPortSetupTimerInterrupt+0x38>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <vPortSetupTimerInterrupt+0x3c>)
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <vPortSetupTimerInterrupt+0x40>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	490b      	ldr	r1, [pc, #44]	; (8000b3c <vPortSetupTimerInterrupt+0x44>)
 8000b10:	fba1 1303 	umull	r1, r3, r1, r3
 8000b14:	099b      	lsrs	r3, r3, #6
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <vPortSetupTimerInterrupt+0x34>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010
 8000b30:	e000e018 	.word	0xe000e018
 8000b34:	e000e014 	.word	0xe000e014
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	10624dd3 	.word	0x10624dd3

08000b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000b50 <vPortEnableVFP+0x10>
 8000b44:	6801      	ldr	r1, [r0, #0]
 8000b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b4a:	6001      	str	r1, [r0, #0]
 8000b4c:	4770      	bx	lr
 8000b4e:	0000      	.short	0x0000
 8000b50:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop

08000b58 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8000b64:	f000 fed4 	bl	8001910 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000b68:	4b64      	ldr	r3, [pc, #400]	; (8000cfc <pvPortMalloc+0x1a4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000b70:	f000 f930 	bl	8000dd4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b74:	4b62      	ldr	r3, [pc, #392]	; (8000d00 <pvPortMalloc+0x1a8>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 80a6 	bne.w	8000cce <pvPortMalloc+0x176>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d02d      	beq.n	8000be4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000b88:	2208      	movs	r2, #8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	441a      	add	r2, r3
            if( ( xWantedSize > 0 ) &&
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d927      	bls.n	8000be4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8000b94:	2208      	movs	r2, #8
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d021      	beq.n	8000bea <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f023 0307 	bic.w	r3, r3, #7
 8000bac:	f103 0208 	add.w	r2, r3, #8
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d913      	bls.n	8000bde <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f023 0307 	bic.w	r3, r3, #7
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00f      	beq.n	8000bea <pvPortMalloc+0x92>
        __asm volatile
 8000bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	f3bf 8f6f 	isb	sy
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e7fe      	b.n	8000bdc <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000be2:	e002      	b.n	8000bea <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	e000      	b.n	8000bec <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000bea:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d06d      	beq.n	8000cce <pvPortMalloc+0x176>
 8000bf2:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <pvPortMalloc+0x1ac>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d868      	bhi.n	8000cce <pvPortMalloc+0x176>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000bfc:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <pvPortMalloc+0x1b0>)
 8000bfe:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <pvPortMalloc+0x1b0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c06:	e004      	b.n	8000c12 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d203      	bcs.n	8000c24 <pvPortMalloc+0xcc>
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f1      	bne.n	8000c08 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <pvPortMalloc+0x1a4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d04f      	beq.n	8000cce <pvPortMalloc+0x176>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2208      	movs	r2, #8
 8000c34:	4413      	add	r3, r2
 8000c36:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1ad2      	subs	r2, r2, r3
 8000c48:	2308      	movs	r3, #8
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d91e      	bls.n	8000c8e <pvPortMalloc+0x136>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <pvPortMalloc+0x11e>
 8000c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	f3bf 8f4f 	dsb	sy
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	e7fe      	b.n	8000c74 <pvPortMalloc+0x11c>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1ad2      	subs	r2, r2, r3
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c88:	69b8      	ldr	r0, [r7, #24]
 8000c8a:	f000 f905 	bl	8000e98 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <pvPortMalloc+0x1ac>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <pvPortMalloc+0x1ac>)
 8000c9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <pvPortMalloc+0x1ac>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <pvPortMalloc+0x1b4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d203      	bcs.n	8000cb0 <pvPortMalloc+0x158>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <pvPortMalloc+0x1ac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <pvPortMalloc+0x1b4>)
 8000cae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <pvPortMalloc+0x1a8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <pvPortMalloc+0x1b8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <pvPortMalloc+0x1b8>)
 8000ccc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000cce:	f000 fe2d 	bl	800192c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <pvPortMalloc+0x198>
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e7fe      	b.n	8000cee <pvPortMalloc+0x196>
    return pvReturn;
 8000cf0:	69fb      	ldr	r3, [r7, #28]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20012c58 	.word	0x20012c58
 8000d00:	20012c6c 	.word	0x20012c6c
 8000d04:	20012c5c 	.word	0x20012c5c
 8000d08:	20012c50 	.word	0x20012c50
 8000d0c:	20012c60 	.word	0x20012c60
 8000d10:	20012c64 	.word	0x20012c64

08000d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d04b      	beq.n	8000dbe <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000d26:	2308      	movs	r3, #8
 8000d28:	425b      	negs	r3, r3
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <vPortFree+0xb4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <vPortFree+0x42>
 8000d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e7fe      	b.n	8000d54 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d009      	beq.n	8000d72 <vPortFree+0x5e>
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	e7fe      	b.n	8000d70 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <vPortFree+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01e      	beq.n	8000dbe <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11a      	bne.n	8000dbe <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <vPortFree+0xb4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000d98:	f000 fdba 	bl	8001910 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <vPortFree+0xb8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <vPortFree+0xb8>)
 8000da8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000daa:	6938      	ldr	r0, [r7, #16]
 8000dac:	f000 f874 	bl	8000e98 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <vPortFree+0xbc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <vPortFree+0xbc>)
 8000db8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000dba:	f000 fdb7 	bl	800192c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20012c6c 	.word	0x20012c6c
 8000dcc:	20012c5c 	.word	0x20012c5c
 8000dd0:	20012c68 	.word	0x20012c68

08000dd4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000dda:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000dde:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <prvHeapInit+0xac>)
 8000de2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00c      	beq.n	8000e08 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3307      	adds	r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f023 0307 	bic.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <prvHeapInit+0xac>)
 8000e04:	4413      	add	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <prvHeapInit+0xb0>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <prvHeapInit+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000e20:	2208      	movs	r2, #8
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f023 0307 	bic.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <prvHeapInit+0xb4>)
 8000e34:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <prvHeapInit+0xb4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <prvHeapInit+0xb4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	1ad2      	subs	r2, r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <prvHeapInit+0xb4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <prvHeapInit+0xb8>)
 8000e62:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <prvHeapInit+0xbc>)
 8000e6a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <prvHeapInit+0xc0>)
 8000e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000050 	.word	0x20000050
 8000e84:	20012c50 	.word	0x20012c50
 8000e88:	20012c58 	.word	0x20012c58
 8000e8c:	20012c60 	.word	0x20012c60
 8000e90:	20012c5c 	.word	0x20012c5c
 8000e94:	20012c6c 	.word	0x20012c6c

08000e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <prvInsertBlockIntoFreeList+0xac>)
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e002      	b.n	8000eac <prvInsertBlockIntoFreeList+0x14>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3f7      	bcc.n	8000ea6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d108      	bne.n	8000eda <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	441a      	add	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	441a      	add	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d118      	bne.n	8000f20 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <prvInsertBlockIntoFreeList+0xb0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d00d      	beq.n	8000f16 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	441a      	add	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e008      	b.n	8000f28 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <prvInsertBlockIntoFreeList+0xb0>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e003      	b.n	8000f28 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d002      	beq.n	8000f36 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20012c50 	.word	0x20012c50
 8000f48:	20012c58 	.word	0x20012c58

08000f4c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <xQueueGenericReset+0x2c>
 8000f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f68:	f383 8811 	msr	BASEPRI, r3
 8000f6c:	f3bf 8f6f 	isb	sy
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e7fe      	b.n	8000f76 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d05a      	beq.n	8001034 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d056      	beq.n	8001034 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d34c      	bcc.n	8001034 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8000f9a:	f7ff fd01 	bl	80009a0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	6939      	ldr	r1, [r7, #16]
 8000fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000faa:	fb01 f303 	mul.w	r3, r1, r3
 8000fae:	441a      	add	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6939      	ldr	r1, [r7, #16]
 8000fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	441a      	add	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	22ff      	movs	r2, #255	; 0xff
 8000fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d114      	bne.n	800101a <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01a      	beq.n	800102e <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 ff77 	bl	8001ef0 <xTaskRemoveFromEventList>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d012      	beq.n	800102e <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <xQueueGenericReset+0x110>)
 800100a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	f3bf 8f4f 	dsb	sy
 8001014:	f3bf 8f6f 	isb	sy
 8001018:	e009      	b.n	800102e <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3310      	adds	r3, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb01 	bl	8000626 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3324      	adds	r3, #36	; 0x24
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fafc 	bl	8000626 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800102e:	f7ff fce5 	bl	80009fc <vPortExitCritical>
 8001032:	e001      	b.n	8001038 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReset+0x106>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001052:	697b      	ldr	r3, [r7, #20]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	e000ed04 	.word	0xe000ed04

08001060 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02b      	beq.n	80010d0 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d323      	bcc.n	80010d0 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001090:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001094:	d81c      	bhi.n	80010d0 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	3350      	adds	r3, #80	; 0x50
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd57 	bl	8000b58 <pvPortMalloc>
 80010aa:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01b      	beq.n	80010ea <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3350      	adds	r3, #80	; 0x50
 80010ba:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4613      	mov	r3, r2
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f813 	bl	80010f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80010ce:	e00c      	b.n	80010ea <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <xQueueGenericCreate+0x8a>
 80010d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010da:	f383 8811 	msr	BASEPRI, r3
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	e7fe      	b.n	80010e8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80010ea:	69fb      	ldr	r3, [r7, #28]
    }
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d103      	bne.n	8001110 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e002      	b.n	8001116 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001122:	2101      	movs	r1, #1
 8001124:	69b8      	ldr	r0, [r7, #24]
 8001126:	f7ff ff11 	bl	8000f4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <xQueueReceive+0x2e>
 8001156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	e7fe      	b.n	8001168 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <xQueueReceive+0x3c>
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <xQueueReceive+0x40>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <xQueueReceive+0x42>
 800117c:	2300      	movs	r3, #0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <xQueueReceive+0x5a>
 8001182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	f3bf 8f4f 	dsb	sy
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e7fe      	b.n	8001194 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001196:	f001 f8b9 	bl	800230c <xTaskGetSchedulerState>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <xQueueReceive+0x6a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <xQueueReceive+0x6e>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <xQueueReceive+0x70>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d109      	bne.n	80011c4 <xQueueReceive+0x88>
 80011b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	e7fe      	b.n	80011c2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80011c4:	f7ff fbec 	bl	80009a0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01f      	beq.n	8001214 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011d8:	f000 f88c 	bl	80012f4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00f      	beq.n	800120c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	3310      	adds	r3, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fe7d 	bl	8001ef0 <xTaskRemoveFromEventList>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80011fc:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <xQueueReceive+0x1b4>)
 80011fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f3bf 8f4f 	dsb	sy
 8001208:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800120c:	f7ff fbf6 	bl	80009fc <vPortExitCritical>
                return pdPASS;
 8001210:	2301      	movs	r3, #1
 8001212:	e069      	b.n	80012e8 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800121a:	f7ff fbef 	bl	80009fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800121e:	2300      	movs	r3, #0
 8001220:	e062      	b.n	80012e8 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f000 ff35 	bl	800209c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001232:	2301      	movs	r3, #1
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001236:	f7ff fbe1 	bl	80009fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800123a:	f000 fb69 	bl	8001910 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800123e:	f7ff fbaf 	bl	80009a0 <vPortEnterCritical>
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001248:	b25b      	sxtb	r3, r3
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d103      	bne.n	8001258 <xQueueReceive+0x11c>
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800125e:	b25b      	sxtb	r3, r3
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d103      	bne.n	800126e <xQueueReceive+0x132>
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800126e:	f7ff fbc5 	bl	80009fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001272:	1d3a      	adds	r2, r7, #4
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f000 ff24 	bl	80020c8 <xTaskCheckForTimeOut>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d123      	bne.n	80012ce <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001288:	f000 f8ac 	bl	80013e4 <prvIsQueueEmpty>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d017      	beq.n	80012c2 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	3324      	adds	r3, #36	; 0x24
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fdc0 	bl	8001e20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012a2:	f000 f84d 	bl	8001340 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80012a6:	f000 fb41 	bl	800192c <xTaskResumeAll>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d189      	bne.n	80011c4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <xQueueReceive+0x1b4>)
 80012b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f3bf 8f4f 	dsb	sy
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	e780      	b.n	80011c4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80012c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012c4:	f000 f83c 	bl	8001340 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012c8:	f000 fb30 	bl	800192c <xTaskResumeAll>
 80012cc:	e77a      	b.n	80011c4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80012ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012d0:	f000 f836 	bl	8001340 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012d4:	f000 fb2a 	bl	800192c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012da:	f000 f883 	bl	80013e4 <prvIsQueueEmpty>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f43f af6f 	beq.w	80011c4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80012e6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3730      	adds	r7, #48	; 0x30
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	e000ed04 	.word	0xe000ed04

080012f4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d018      	beq.n	8001338 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	441a      	add	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	d303      	bcc.n	8001328 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68d9      	ldr	r1, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	461a      	mov	r2, r3
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f001 fdd2 	bl	8002edc <memcpy>
    }
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001348:	f7ff fb2a 	bl	80009a0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001352:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001354:	e011      	b.n	800137a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3324      	adds	r3, #36	; 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fdc4 	bl	8001ef0 <xTaskRemoveFromEventList>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800136e:	f000 ff0f 	bl	8002190 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	dce9      	bgt.n	8001356 <prvUnlockQueue+0x16>
 8001382:	e000      	b.n	8001386 <prvUnlockQueue+0x46>
                        break;
 8001384:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	22ff      	movs	r2, #255	; 0xff
 800138a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800138e:	f7ff fb35 	bl	80009fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001392:	f7ff fb05 	bl	80009a0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800139c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800139e:	e011      	b.n	80013c4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d012      	beq.n	80013ce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3310      	adds	r3, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd9f 	bl	8001ef0 <xTaskRemoveFromEventList>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80013b8:	f000 feea 	bl	8002190 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	3b01      	subs	r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dce9      	bgt.n	80013a0 <prvUnlockQueue+0x60>
 80013cc:	e000      	b.n	80013d0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80013ce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80013d8:	f7ff fb10 	bl	80009fc <vPortExitCritical>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80013ec:	f7ff fad8 	bl	80009a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e001      	b.n	8001402 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001402:	f7ff fafb 	bl	80009fc <vPortExitCritical>

    return xReturn;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <vQueueAddToRegistry+0x24>
 8001420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e7fe      	b.n	8001432 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d024      	beq.n	8001488 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e01e      	b.n	8001482 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <vQueueAddToRegistry+0x98>)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d105      	bne.n	8001460 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <vQueueAddToRegistry+0x98>)
 800145a:	4413      	add	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
                    break;
 800145e:	e013      	b.n	8001488 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10a      	bne.n	800147c <vQueueAddToRegistry+0x6c>
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <vQueueAddToRegistry+0x98>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <vQueueAddToRegistry+0x98>)
 8001478:	4413      	add	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b07      	cmp	r3, #7
 8001486:	d9dd      	bls.n	8001444 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20012db8 	.word	0x20012db8

080014ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80014bc:	f7ff fa70 	bl	80009a0 <vPortEnterCritical>
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d103      	bne.n	80014d6 <vQueueWaitForMessageRestricted+0x2a>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d103      	bne.n	80014ec <vQueueWaitForMessageRestricted+0x40>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014ec:	f7ff fa86 	bl	80009fc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3324      	adds	r3, #36	; 0x24
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fcb1 	bl	8001e68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff1a 	bl	8001340 <prvUnlockQueue>
    }
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af04      	add	r7, sp, #16
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb15 	bl	8000b58 <pvPortMalloc>
 800152e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00e      	beq.n	8001554 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001536:	2058      	movs	r0, #88	; 0x58
 8001538:	f7ff fb0e 	bl	8000b58 <pvPortMalloc>
 800153c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
 800154a:	e005      	b.n	8001558 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f7ff fbe1 	bl	8000d14 <vPortFree>
 8001552:	e001      	b.n	8001558 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d013      	beq.n	8001586 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	2300      	movs	r3, #0
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f80e 	bl	8001596 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800157a:	69f8      	ldr	r0, [r7, #28]
 800157c:	f000 f8ae 	bl	80016dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	e002      	b.n	800158c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800158c:	69bb      	ldr	r3, [r7, #24]
    }
 800158e:	4618      	mov	r0, r3
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	461a      	mov	r2, r3
 80015ae:	21a5      	movs	r1, #165	; 0xa5
 80015b0:	f001 fc9f 	bl	8002ef2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015be:	3b01      	subs	r3, #1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	f023 0307 	bic.w	r3, r3, #7
 80015cc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <prvInitialiseNewTask+0x56>
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e7fe      	b.n	80015ea <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01f      	beq.n	8001632 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e012      	b.n	800161e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	3334      	adds	r3, #52	; 0x34
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d9e9      	bls.n	80015f8 <prvInitialiseNewTask+0x62>
 8001624:	e000      	b.n	8001628 <prvInitialiseNewTask+0x92>
            {
                break;
 8001626:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001630:	e003      	b.n	800163a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b04      	cmp	r3, #4
 800163e:	d909      	bls.n	8001654 <prvInitialiseNewTask+0xbe>
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e7fe      	b.n	8001652 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	2b04      	cmp	r3, #4
 8001658:	d901      	bls.n	800165e <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800165a:	2304      	movs	r3, #4
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001668:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	2200      	movs	r2, #0
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	3304      	adds	r3, #4
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fff6 	bl	8000666 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	3318      	adds	r3, #24
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fff1 	bl	8000666 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001688:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	f1c3 0205 	rsb	r2, r3, #5
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	3350      	adds	r3, #80	; 0x50
 800169e:	2204      	movs	r2, #4
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 fc25 	bl	8002ef2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80016a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016aa:	3354      	adds	r3, #84	; 0x54
 80016ac:	2201      	movs	r2, #1
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fc1e 	bl	8002ef2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	69b8      	ldr	r0, [r7, #24]
 80016bc:	f7ff f844 	bl	8000748 <pxPortInitialiseStack>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80016e4:	f7ff f95c 	bl	80009a0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80016e8:	4b40      	ldr	r3, [pc, #256]	; (80017ec <prvAddNewTaskToReadyList+0x110>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <prvAddNewTaskToReadyList+0x110>)
 80016f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <prvAddNewTaskToReadyList+0x114>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <prvAddNewTaskToReadyList+0x114>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001700:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <prvAddNewTaskToReadyList+0x110>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d110      	bne.n	800172a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001708:	f000 fd68 	bl	80021dc <prvInitialiseTaskLists>
 800170c:	e00d      	b.n	800172a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <prvAddNewTaskToReadyList+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <prvAddNewTaskToReadyList+0x114>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001724:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <prvAddNewTaskToReadyList+0x114>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <prvAddNewTaskToReadyList+0x11c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a31      	ldr	r2, [pc, #196]	; (80017f8 <prvAddNewTaskToReadyList+0x11c>)
 8001732:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <prvAddNewTaskToReadyList+0x11c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <prvAddNewTaskToReadyList+0x120>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4313      	orrs	r3, r2
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <prvAddNewTaskToReadyList+0x120>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	492b      	ldr	r1, [pc, #172]	; (8001800 <prvAddNewTaskToReadyList+0x124>)
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3304      	adds	r3, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	3204      	adds	r2, #4
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1d1a      	adds	r2, r3, #4
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <prvAddNewTaskToReadyList+0x124>)
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4918      	ldr	r1, [pc, #96]	; (8001800 <prvAddNewTaskToReadyList+0x124>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <prvAddNewTaskToReadyList+0x124>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80017ba:	f7ff f91f 	bl	80009fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <prvAddNewTaskToReadyList+0x118>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00e      	beq.n	80017e4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <prvAddNewTaskToReadyList+0x114>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <prvAddNewTaskToReadyList+0x128>)
 80017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20012d48 	.word	0x20012d48
 80017f0:	20012c70 	.word	0x20012c70
 80017f4:	20012d54 	.word	0x20012d54
 80017f8:	20012d64 	.word	0x20012d64
 80017fc:	20012d50 	.word	0x20012d50
 8001800:	20012c74 	.word	0x20012c74
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <vTaskDelay+0x60>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <vTaskDelay+0x2e>
 8001822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	e7fe      	b.n	8001834 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001836:	f000 f86b 	bl	8001910 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800183a:	2100      	movs	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fd83 	bl	8002348 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001842:	f000 f873 	bl	800192c <xTaskResumeAll>
 8001846:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <vTaskDelay+0x64>)
 8001850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20012d70 	.word	0x20012d70
 800186c:	e000ed04 	.word	0xe000ed04

08001870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <vTaskStartScheduler+0x84>)
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2282      	movs	r2, #130	; 0x82
 8001882:	491d      	ldr	r1, [pc, #116]	; (80018f8 <vTaskStartScheduler+0x88>)
 8001884:	481d      	ldr	r0, [pc, #116]	; (80018fc <vTaskStartScheduler+0x8c>)
 8001886:	f7ff fe45 	bl	8001514 <xTaskCreate>
 800188a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001892:	f000 fdd9 	bl	8002448 <xTimerCreateTimerTask>
 8001896:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d115      	bne.n	80018ca <vTaskStartScheduler+0x5a>
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <vTaskStartScheduler+0x90>)
 80018b2:	f04f 32ff 	mov.w	r2, #4294967295
 80018b6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <vTaskStartScheduler+0x94>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <vTaskStartScheduler+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80018c4:	f7fe ffce 	bl	8000864 <xPortStartScheduler>
 80018c8:	e00d      	b.n	80018e6 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d109      	bne.n	80018e6 <vTaskStartScheduler+0x76>
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	e7fe      	b.n	80018e4 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <vTaskStartScheduler+0x9c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20012d6c 	.word	0x20012d6c
 80018f8:	08002f1c 	.word	0x08002f1c
 80018fc:	080021a9 	.word	0x080021a9
 8001900:	20012d68 	.word	0x20012d68
 8001904:	20012d54 	.word	0x20012d54
 8001908:	20012d4c 	.word	0x20012d4c
 800190c:	20000004 	.word	0x20000004

08001910 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <vTaskSuspendAll+0x18>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <vTaskSuspendAll+0x18>)
 800191c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20012d70 	.word	0x20012d70

0800192c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <xTaskResumeAll+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <xTaskResumeAll+0x2a>
 8001942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001946:	f383 8811 	msr	BASEPRI, r3
 800194a:	f3bf 8f6f 	isb	sy
 800194e:	f3bf 8f4f 	dsb	sy
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e7fe      	b.n	8001954 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001956:	f7ff f823 	bl	80009a0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800195a:	4b68      	ldr	r3, [pc, #416]	; (8001afc <xTaskResumeAll+0x1d0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	4a66      	ldr	r2, [pc, #408]	; (8001afc <xTaskResumeAll+0x1d0>)
 8001962:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <xTaskResumeAll+0x1d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80c0 	bne.w	8001aee <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <xTaskResumeAll+0x1d4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80bb 	beq.w	8001aee <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001978:	e08a      	b.n	8001a90 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <xTaskResumeAll+0x1d8>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	6a12      	ldr	r2, [r2, #32]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	69d2      	ldr	r2, [r2, #28]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3318      	adds	r3, #24
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d103      	bne.n	80019b0 <xTaskResumeAll+0x84>
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	68d2      	ldr	r2, [r2, #12]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	6892      	ldr	r2, [r2, #8]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d103      	bne.n	80019ee <xTaskResumeAll+0xc2>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <xTaskResumeAll+0x1dc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <xTaskResumeAll+0x1dc>)
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	493d      	ldr	r1, [pc, #244]	; (8001b0c <xTaskResumeAll+0x1e0>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3304      	adds	r3, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	3204      	adds	r2, #4
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	1d1a      	adds	r2, r3, #4
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <xTaskResumeAll+0x1e0>)
 8001a54:	441a      	add	r2, r3
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5e:	492b      	ldr	r1, [pc, #172]	; (8001b0c <xTaskResumeAll+0x1e0>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	4827      	ldr	r0, [pc, #156]	; (8001b0c <xTaskResumeAll+0x1e0>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4403      	add	r3, r0
 8001a7a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <xTaskResumeAll+0x1e4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <xTaskResumeAll+0x1e8>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <xTaskResumeAll+0x1d8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f af70 	bne.w	800197a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001aa0:	f000 fc18 	bl	80022d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <xTaskResumeAll+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ab0:	f000 f846 	bl	8001b40 <xTaskIncrementTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <xTaskResumeAll+0x1e8>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f1      	bne.n	8001ab0 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <xTaskResumeAll+0x1ec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <xTaskResumeAll+0x1e8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <xTaskResumeAll+0x1f0>)
 8001ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001aee:	f7fe ff85 	bl	80009fc <vPortExitCritical>

    return xAlreadyYielded;
 8001af2:	69bb      	ldr	r3, [r7, #24]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20012d70 	.word	0x20012d70
 8001b00:	20012d48 	.word	0x20012d48
 8001b04:	20012d08 	.word	0x20012d08
 8001b08:	20012d50 	.word	0x20012d50
 8001b0c:	20012c74 	.word	0x20012c74
 8001b10:	20012c70 	.word	0x20012c70
 8001b14:	20012d5c 	.word	0x20012d5c
 8001b18:	20012d58 	.word	0x20012d58
 8001b1c:	e000ed04 	.word	0xe000ed04

08001b20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <xTaskGetTickCount+0x1c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20012d4c 	.word	0x20012d4c

08001b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b4a:	4b7d      	ldr	r3, [pc, #500]	; (8001d40 <xTaskIncrementTick+0x200>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80eb 	bne.w	8001d2a <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b54:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <xTaskIncrementTick+0x204>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001b5c:	4a79      	ldr	r2, [pc, #484]	; (8001d44 <xTaskIncrementTick+0x204>)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11f      	bne.n	8001ba8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001b68:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <xTaskIncrementTick+0x208>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <xTaskIncrementTick+0x46>
 8001b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b76:	f383 8811 	msr	BASEPRI, r3
 8001b7a:	f3bf 8f6f 	isb	sy
 8001b7e:	f3bf 8f4f 	dsb	sy
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e7fe      	b.n	8001b84 <xTaskIncrementTick+0x44>
 8001b86:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <xTaskIncrementTick+0x208>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <xTaskIncrementTick+0x20c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <xTaskIncrementTick+0x208>)
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4a6d      	ldr	r2, [pc, #436]	; (8001d4c <xTaskIncrementTick+0x20c>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <xTaskIncrementTick+0x210>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <xTaskIncrementTick+0x210>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	f000 fb96 	bl	80022d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <xTaskIncrementTick+0x214>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	f0c0 80a6 	bcc.w	8001d00 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bb4:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <xTaskIncrementTick+0x208>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d104      	bne.n	8001bc8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <xTaskIncrementTick+0x214>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	601a      	str	r2, [r3, #0]
                    break;
 8001bc6:	e09b      	b.n	8001d00 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bc8:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <xTaskIncrementTick+0x208>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d203      	bcs.n	8001be8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001be0:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <xTaskIncrementTick+0x214>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001be6:	e08b      	b.n	8001d00 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	6892      	ldr	r2, [r2, #8]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d103      	bne.n	8001c16 <xTaskIncrementTick+0xd6>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01e      	beq.n	8001c6c <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	6a12      	ldr	r2, [r2, #32]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	69d2      	ldr	r2, [r2, #28]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	3318      	adds	r3, #24
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d103      	bne.n	8001c5c <xTaskIncrementTick+0x11c>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2201      	movs	r2, #1
 8001c72:	409a      	lsls	r2, r3
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <xTaskIncrementTick+0x218>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <xTaskIncrementTick+0x218>)
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c82:	4936      	ldr	r1, [pc, #216]	; (8001d5c <xTaskIncrementTick+0x21c>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3304      	adds	r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	3204      	adds	r2, #4
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1d1a      	adds	r2, r3, #4
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <xTaskIncrementTick+0x21c>)
 8001cc2:	441a      	add	r2, r3
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ccc:	4923      	ldr	r1, [pc, #140]	; (8001d5c <xTaskIncrementTick+0x21c>)
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	481f      	ldr	r0, [pc, #124]	; (8001d5c <xTaskIncrementTick+0x21c>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4403      	add	r3, r0
 8001ce8:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <xTaskIncrementTick+0x220>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f4ff af5d 	bcc.w	8001bb4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cfe:	e759      	b.n	8001bb4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <xTaskIncrementTick+0x220>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d06:	4915      	ldr	r1, [pc, #84]	; (8001d5c <xTaskIncrementTick+0x21c>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d901      	bls.n	8001d1c <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <xTaskIncrementTick+0x224>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e004      	b.n	8001d34 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <xTaskIncrementTick+0x228>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <xTaskIncrementTick+0x228>)
 8001d32:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20012d70 	.word	0x20012d70
 8001d44:	20012d4c 	.word	0x20012d4c
 8001d48:	20012d00 	.word	0x20012d00
 8001d4c:	20012d04 	.word	0x20012d04
 8001d50:	20012d60 	.word	0x20012d60
 8001d54:	20012d68 	.word	0x20012d68
 8001d58:	20012d50 	.word	0x20012d50
 8001d5c:	20012c74 	.word	0x20012c74
 8001d60:	20012c70 	.word	0x20012c70
 8001d64:	20012d5c 	.word	0x20012d5c
 8001d68:	20012d58 	.word	0x20012d58

08001d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <vTaskSwitchContext+0xa0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <vTaskSwitchContext+0xa4>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001d80:	e03e      	b.n	8001e00 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <vTaskSwitchContext+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <vTaskSwitchContext+0xa8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f1c3 031f 	rsb	r3, r3, #31
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	491e      	ldr	r1, [pc, #120]	; (8001e18 <vTaskSwitchContext+0xac>)
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	e7fe      	b.n	8001dc4 <vTaskSwitchContext+0x58>
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <vTaskSwitchContext+0xac>)
 8001dd2:	4413      	add	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	3308      	adds	r3, #8
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d104      	bne.n	8001df6 <vTaskSwitchContext+0x8a>
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <vTaskSwitchContext+0xb0>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20012d70 	.word	0x20012d70
 8001e10:	20012d5c 	.word	0x20012d5c
 8001e14:	20012d50 	.word	0x20012d50
 8001e18:	20012c74 	.word	0x20012c74
 8001e1c:	20012c70 	.word	0x20012c70

08001e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <vTaskPlaceOnEventList+0x24>
 8001e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e7fe      	b.n	8001e42 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <vTaskPlaceOnEventList+0x44>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3318      	adds	r3, #24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe fc17 	bl	8000680 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e52:	2101      	movs	r1, #1
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f000 fa77 	bl	8002348 <prvAddCurrentTaskToDelayedList>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20012c70 	.word	0x20012c70

08001e68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <vTaskPlaceOnEventListRestricted+0x26>
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e7fe      	b.n	8001e8c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <vTaskPlaceOnEventListRestricted+0x84>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	61da      	str	r2, [r3, #28]
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <vTaskPlaceOnEventListRestricted+0x84>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	6892      	ldr	r2, [r2, #8]
 8001ea4:	621a      	str	r2, [r3, #32]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <vTaskPlaceOnEventListRestricted+0x84>)
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	3218      	adds	r2, #24
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <vTaskPlaceOnEventListRestricted+0x84>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f103 0218 	add.w	r2, r3, #24
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <vTaskPlaceOnEventListRestricted+0x84>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	68b8      	ldr	r0, [r7, #8]
 8001ee0:	f000 fa32 	bl	8002348 <prvAddCurrentTaskToDelayedList>
    }
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20012c70 	.word	0x20012c70

08001ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b08b      	sub	sp, #44	; 0x2c
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <xTaskRemoveFromEventList+0x2a>
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e7fe      	b.n	8001f18 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	6a12      	ldr	r2, [r2, #32]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	6a3a      	ldr	r2, [r7, #32]
 8001f30:	69d2      	ldr	r2, [r2, #28]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d103      	bne.n	8001f48 <xTaskRemoveFromEventList+0x58>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <xTaskRemoveFromEventList+0x194>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d15e      	bne.n	800201e <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	6892      	ldr	r2, [r2, #8]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	3304      	adds	r3, #4
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d103      	bne.n	8001f8e <xTaskRemoveFromEventList+0x9e>
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <xTaskRemoveFromEventList+0x198>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	4a36      	ldr	r2, [pc, #216]	; (8002088 <xTaskRemoveFromEventList+0x198>)
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <xTaskRemoveFromEventList+0x19c>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	3204      	adds	r2, #4
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	1d1a      	adds	r2, r3, #4
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4a26      	ldr	r2, [pc, #152]	; (800208c <xTaskRemoveFromEventList+0x19c>)
 8001ff4:	441a      	add	r2, r3
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	4923      	ldr	r1, [pc, #140]	; (800208c <xTaskRemoveFromEventList+0x19c>)
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1c59      	adds	r1, r3, #1
 800200e:	481f      	ldr	r0, [pc, #124]	; (800208c <xTaskRemoveFromEventList+0x19c>)
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4403      	add	r3, r0
 800201a:	6019      	str	r1, [r3, #0]
 800201c:	e01b      	b.n	8002056 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <xTaskRemoveFromEventList+0x1a0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	61da      	str	r2, [r3, #28]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	621a      	str	r2, [r3, #32]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	3218      	adds	r2, #24
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f103 0218 	add.w	r2, r3, #24
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <xTaskRemoveFromEventList+0x1a0>)
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <xTaskRemoveFromEventList+0x1a0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <xTaskRemoveFromEventList+0x1a0>)
 8002054:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <xTaskRemoveFromEventList+0x1a4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	429a      	cmp	r2, r3
 8002062:	d905      	bls.n	8002070 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002064:	2301      	movs	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <xTaskRemoveFromEventList+0x1a8>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e001      	b.n	8002074 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002076:	4618      	mov	r0, r3
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20012d70 	.word	0x20012d70
 8002088:	20012d50 	.word	0x20012d50
 800208c:	20012c74 	.word	0x20012c74
 8002090:	20012d08 	.word	0x20012d08
 8002094:	20012c70 	.word	0x20012c70
 8002098:	20012d5c 	.word	0x20012d5c

0800209c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <vTaskInternalSetTimeOutState+0x24>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <vTaskInternalSetTimeOutState+0x28>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	605a      	str	r2, [r3, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	20012d60 	.word	0x20012d60
 80020c4:	20012d4c 	.word	0x20012d4c

080020c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <xTaskCheckForTimeOut+0x24>
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e7fe      	b.n	80020ea <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <xTaskCheckForTimeOut+0x3e>
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e7fe      	b.n	8002104 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002106:	f7fe fc4b 	bl	80009a0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <xTaskCheckForTimeOut+0xc0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d102      	bne.n	800212a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e026      	b.n	8002178 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <xTaskCheckForTimeOut+0xc4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d00a      	beq.n	800214c <xTaskCheckForTimeOut+0x84>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	d805      	bhi.n	800214c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002140:	2301      	movs	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e015      	b.n	8002178 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d90b      	bls.n	800216e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff9a 	bl	800209c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	e004      	b.n	8002178 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002174:	2301      	movs	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002178:	f7fe fc40 	bl	80009fc <vPortExitCritical>

    return xReturn;
 800217c:	69fb      	ldr	r3, [r7, #28]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20012d4c 	.word	0x20012d4c
 800218c:	20012d60 	.word	0x20012d60

08002190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <vTaskMissedYield+0x14>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	20012d5c 	.word	0x20012d5c

080021a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021b0:	f000 f854 	bl	800225c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <prvIdleTask+0x2c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d907      	bls.n	80021cc <prvIdleTask+0x24>
                {
                    taskYIELD();
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <prvIdleTask+0x30>)
 80021be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 80021cc:	f000 fc6a 	bl	8002aa4 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80021d0:	e7ee      	b.n	80021b0 <prvIdleTask+0x8>
 80021d2:	bf00      	nop
 80021d4:	20012c74 	.word	0x20012c74
 80021d8:	e000ed04 	.word	0xe000ed04

080021dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e00c      	b.n	8002202 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <prvInitialiseTaskLists+0x60>)
 80021f4:	4413      	add	r3, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fa15 	bl	8000626 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d9ef      	bls.n	80021e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <prvInitialiseTaskLists+0x64>)
 800220a:	f7fe fa0c 	bl	8000626 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <prvInitialiseTaskLists+0x68>)
 8002210:	f7fe fa09 	bl	8000626 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <prvInitialiseTaskLists+0x6c>)
 8002216:	f7fe fa06 	bl	8000626 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <prvInitialiseTaskLists+0x70>)
 800221c:	f7fe fa03 	bl	8000626 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <prvInitialiseTaskLists+0x74>)
 8002222:	f7fe fa00 	bl	8000626 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <prvInitialiseTaskLists+0x78>)
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <prvInitialiseTaskLists+0x64>)
 800222a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <prvInitialiseTaskLists+0x7c>)
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <prvInitialiseTaskLists+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20012c74 	.word	0x20012c74
 8002240:	20012cd8 	.word	0x20012cd8
 8002244:	20012cec 	.word	0x20012cec
 8002248:	20012d08 	.word	0x20012d08
 800224c:	20012d1c 	.word	0x20012d1c
 8002250:	20012d34 	.word	0x20012d34
 8002254:	20012d00 	.word	0x20012d00
 8002258:	20012d04 	.word	0x20012d04

0800225c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002262:	e019      	b.n	8002298 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002264:	f7fe fb9c 	bl	80009a0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <prvCheckTasksWaitingTermination+0x4c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fa3c 	bl	80006f2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <prvCheckTasksWaitingTermination+0x50>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <prvCheckTasksWaitingTermination+0x50>)
 8002282:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <prvCheckTasksWaitingTermination+0x54>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <prvCheckTasksWaitingTermination+0x54>)
 800228c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800228e:	f7fe fbb5 	bl	80009fc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f80e 	bl	80022b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <prvCheckTasksWaitingTermination+0x54>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e1      	bne.n	8002264 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20012d1c 	.word	0x20012d1c
 80022ac:	20012d48 	.word	0x20012d48
 80022b0:	20012d30 	.word	0x20012d30

080022b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fd27 	bl	8000d14 <vPortFree>
                vPortFree( pxTCB );
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fd24 	bl	8000d14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <prvResetNextTaskUnblockTime+0x30>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <prvResetNextTaskUnblockTime+0x34>)
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022ea:	e005      	b.n	80022f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <prvResetNextTaskUnblockTime+0x30>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <prvResetNextTaskUnblockTime+0x34>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20012d00 	.word	0x20012d00
 8002308:	20012d68 	.word	0x20012d68

0800230c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <xTaskGetSchedulerState+0x34>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800231a:	2301      	movs	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	e008      	b.n	8002332 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <xTaskGetSchedulerState+0x38>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002328:	2302      	movs	r3, #2
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e001      	b.n	8002332 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002332:	687b      	ldr	r3, [r7, #4]
    }
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20012d54 	.word	0x20012d54
 8002344:	20012d70 	.word	0x20012d70

08002348 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3304      	adds	r3, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f9c7 	bl	80006f2 <uxListRemove>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	2201      	movs	r2, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <prvAddCurrentTaskToDelayedList+0xec>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4013      	ands	r3, r2
 800237e:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <prvAddCurrentTaskToDelayedList+0xec>)
 8002380:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d124      	bne.n	80023d4 <prvAddCurrentTaskToDelayedList+0x8c>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d021      	beq.n	80023d4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	6892      	ldr	r2, [r2, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a20      	ldr	r2, [pc, #128]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	3204      	adds	r2, #4
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1d1a      	adds	r2, r3, #4
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023c4:	615a      	str	r2, [r3, #20]
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023d2:	e026      	b.n	8002422 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d209      	bcs.n	8002400 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <prvAddCurrentTaskToDelayedList+0xf4>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3304      	adds	r3, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe f941 	bl	8000680 <vListInsert>
}
 80023fe:	e010      	b.n	8002422 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3304      	adds	r3, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f7fe f937 	bl	8000680 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d202      	bcs.n	8002422 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <prvAddCurrentTaskToDelayedList+0xfc>)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6013      	str	r3, [r2, #0]
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20012d4c 	.word	0x20012d4c
 8002430:	20012c70 	.word	0x20012c70
 8002434:	20012d50 	.word	0x20012d50
 8002438:	20012d34 	.word	0x20012d34
 800243c:	20012d04 	.word	0x20012d04
 8002440:	20012d00 	.word	0x20012d00
 8002444:	20012d68 	.word	0x20012d68

08002448 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002452:	f000 fa43 	bl	80028dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <xTimerCreateTimerTask+0x54>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <xTimerCreateTimerTask+0x58>)
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	2302      	movs	r3, #2
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246c:	490d      	ldr	r1, [pc, #52]	; (80024a4 <xTimerCreateTimerTask+0x5c>)
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <xTimerCreateTimerTask+0x60>)
 8002470:	f7ff f850 	bl	8001514 <xTaskCreate>
 8002474:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <xTimerCreateTimerTask+0x48>
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	e7fe      	b.n	800248e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002490:	687b      	ldr	r3, [r7, #4]
    }
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20012da4 	.word	0x20012da4
 80024a0:	20012da8 	.word	0x20012da8
 80024a4:	08002f24 	.word	0x08002f24
 80024a8:	0800254d 	.word	0x0800254d

080024ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024b8:	e008      	b.n	80024cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4413      	add	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	18d1      	adds	r1, r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f8db 	bl	8002694 <prvInsertTimerInActiveList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ea      	bne.n	80024ba <prvReloadTimer+0xe>
        }
    }
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <prvProcessExpiredTimer+0x5c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3304      	adds	r3, #4
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f8f4 	bl	80006f2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff ffc5 	bl	80024ac <prvReloadTimer>
 8002522:	e008      	b.n	8002536 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	4798      	blx	r3
    }
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20012d9c 	.word	0x20012d9c

0800254c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f857 	bl	800260c <prvGetNextExpireTime>
 800255e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f803 	bl	8002570 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800256a:	f000 f8d5 	bl	8002718 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800256e:	e7f1      	b.n	8002554 <prvTimerTask+0x8>

08002570 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800257a:	f7ff f9c9 	bl	8001910 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f866 	bl	8002654 <prvSampleTimeNow>
 8002588:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d130      	bne.n	80025f2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <prvProcessTimerOrBlockTask+0x3c>
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	429a      	cmp	r2, r3
 800259c:	d806      	bhi.n	80025ac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800259e:	f7ff f9c5 	bl	800192c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025a2:	68f9      	ldr	r1, [r7, #12]
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffa1 	bl	80024ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80025aa:	e024      	b.n	80025f6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <prvProcessTimerOrBlockTask+0x90>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <prvProcessTimerOrBlockTask+0x50>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <prvProcessTimerOrBlockTask+0x52>
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <prvProcessTimerOrBlockTask+0x94>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe ff6b 	bl	80014ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80025d6:	f7ff f9a9 	bl	800192c <xTaskResumeAll>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <prvProcessTimerOrBlockTask+0x98>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
    }
 80025f0:	e001      	b.n	80025f6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025f2:	f7ff f99b 	bl	800192c <xTaskResumeAll>
    }
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20012da0 	.word	0x20012da0
 8002604:	20012da4 	.word	0x20012da4
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <prvGetNextExpireTime+0x44>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <prvGetNextExpireTime+0x16>
 800261e:	2201      	movs	r2, #1
 8002620:	e000      	b.n	8002624 <prvGetNextExpireTime+0x18>
 8002622:	2200      	movs	r2, #0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <prvGetNextExpireTime+0x44>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e001      	b.n	8002640 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002640:	68fb      	ldr	r3, [r7, #12]
    }
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20012d9c 	.word	0x20012d9c

08002654 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800265c:	f7ff fa60 	bl	8001b20 <xTaskGetTickCount>
 8002660:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <prvSampleTimeNow+0x3c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d205      	bcs.n	8002678 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800266c:	f000 f910 	bl	8002890 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e002      	b.n	800267e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <prvSampleTimeNow+0x3c>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002684:	68fb      	ldr	r3, [r7, #12]
    }
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20012dac 	.word	0x20012dac

08002694 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d812      	bhi.n	80026e0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e01b      	b.n	8002706 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <prvInsertTimerInActiveList+0x7c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7fd ffd1 	bl	8000680 <vListInsert>
 80026de:	e012      	b.n	8002706 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d206      	bcs.n	80026f6 <prvInsertTimerInActiveList+0x62>
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d302      	bcc.n	80026f6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e007      	b.n	8002706 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <prvInsertTimerInActiveList+0x80>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3304      	adds	r3, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7fd ffbd 	bl	8000680 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002706:	697b      	ldr	r3, [r7, #20]
    }
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20012da0 	.word	0x20012da0
 8002714:	20012d9c 	.word	0x20012d9c

08002718 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800271e:	e0a5      	b.n	800286c <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f2c0 80a2 	blt.w	800286c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3304      	adds	r3, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ffda 	bl	80006f2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff87 	bl	8002654 <prvSampleTimeNow>
 8002746:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	3b01      	subs	r3, #1
 800274c:	2b08      	cmp	r3, #8
 800274e:	f200 808c 	bhi.w	800286a <prvProcessReceivedCommands+0x152>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <prvProcessReceivedCommands+0x40>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	0800277d 	.word	0x0800277d
 800275c:	0800277d 	.word	0x0800277d
 8002760:	080027e5 	.word	0x080027e5
 8002764:	080027f9 	.word	0x080027f9
 8002768:	08002841 	.word	0x08002841
 800276c:	0800277d 	.word	0x0800277d
 8002770:	0800277d 	.word	0x0800277d
 8002774:	080027e5 	.word	0x080027e5
 8002778:	080027f9 	.word	0x080027f9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	18d1      	adds	r1, r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	69f8      	ldr	r0, [r7, #28]
 800279c:	f7ff ff7a 	bl	8002694 <prvInsertTimerInActiveList>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d062      	beq.n	800286c <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4619      	mov	r1, r3
 80027c0:	69f8      	ldr	r0, [r7, #28]
 80027c2:	f7ff fe73 	bl	80024ac <prvReloadTimer>
 80027c6:	e008      	b.n	80027da <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	69f8      	ldr	r0, [r7, #28]
 80027e0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80027e2:	e043      	b.n	800286c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80027f6:	e039      	b.n	800286c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <prvProcessReceivedCommands+0x114>
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e7fe      	b.n	800282a <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	18d1      	adds	r1, r2, r3
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	69f8      	ldr	r0, [r7, #28]
 800283a:	f7ff ff2b 	bl	8002694 <prvInsertTimerInActiveList>
                        break;
 800283e:	e015      	b.n	800286c <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 800284e:	69f8      	ldr	r0, [r7, #28]
 8002850:	f7fe fa60 	bl	8000d14 <vPortFree>
 8002854:	e00a      	b.n	800286c <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002868:	e000      	b.n	800286c <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 800286a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <prvProcessReceivedCommands+0x174>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f107 0108 	add.w	r1, r7, #8
 8002874:	2200      	movs	r2, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fc60 	bl	800113c <xQueueReceive>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f47f af4e 	bne.w	8002720 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002884:	bf00      	nop
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20012da4 	.word	0x20012da4

08002890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002896:	e009      	b.n	80028ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <prvSwitchTimerLists+0x44>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80028a2:	f04f 31ff 	mov.w	r1, #4294967295
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fe20 	bl	80024ec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <prvSwitchTimerLists+0x44>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <prvSwitchTimerLists+0x44>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <prvSwitchTimerLists+0x48>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <prvSwitchTimerLists+0x44>)
 80028c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <prvSwitchTimerLists+0x48>)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6013      	str	r3, [r2, #0]
    }
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20012d9c 	.word	0x20012d9c
 80028d8:	20012da0 	.word	0x20012da0

080028dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80028e0:	f7fe f85e 	bl	80009a0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <prvCheckForValidListAndQueue+0x54>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11d      	bne.n	8002928 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80028ec:	4811      	ldr	r0, [pc, #68]	; (8002934 <prvCheckForValidListAndQueue+0x58>)
 80028ee:	f7fd fe9a 	bl	8000626 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80028f2:	4811      	ldr	r0, [pc, #68]	; (8002938 <prvCheckForValidListAndQueue+0x5c>)
 80028f4:	f7fd fe97 	bl	8000626 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <prvCheckForValidListAndQueue+0x60>)
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <prvCheckForValidListAndQueue+0x58>)
 80028fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <prvCheckForValidListAndQueue+0x64>)
 8002900:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <prvCheckForValidListAndQueue+0x5c>)
 8002902:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002904:	2200      	movs	r2, #0
 8002906:	210c      	movs	r1, #12
 8002908:	200a      	movs	r0, #10
 800290a:	f7fe fba9 	bl	8001060 <xQueueGenericCreate>
 800290e:	4602      	mov	r2, r0
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <prvCheckForValidListAndQueue+0x54>)
 8002912:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <prvCheckForValidListAndQueue+0x54>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <prvCheckForValidListAndQueue+0x54>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4908      	ldr	r1, [pc, #32]	; (8002944 <prvCheckForValidListAndQueue+0x68>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fd74 	bl	8001410 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002928:	f7fe f868 	bl	80009fc <vPortExitCritical>
    }
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20012da4 	.word	0x20012da4
 8002934:	20012d74 	.word	0x20012d74
 8002938:	20012d88 	.word	0x20012d88
 800293c:	20012d9c 	.word	0x20012d9c
 8002940:	20012da0 	.word	0x20012da0
 8002944:	08002f2c 	.word	0x08002f2c

08002948 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <Audio_MAL_IRQHandler+0xec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f7fd fce2 	bl	8000320 <DMA_GetFlagStatus>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d064      	beq.n	8002a2c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002962:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04c      	beq.n	8002a04 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800296a:	bf00      	nop
 800296c:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fcbd 	bl	80002f0 <DMA_GetCmdStatus>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f7      	bne.n	800296c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <Audio_MAL_IRQHandler+0xec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f7fd fd06 	bl	8000398 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <Audio_MAL_IRQHandler+0xf4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <Audio_MAL_IRQHandler+0xf8>)
 8002994:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299e:	4293      	cmp	r3, r2
 80029a0:	bf28      	it	cs
 80029a2:	4613      	movcs	r3, r2
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <Audio_MAL_IRQHandler+0xf8>)
 80029a6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4924      	ldr	r1, [pc, #144]	; (8002a40 <Audio_MAL_IRQHandler+0xf8>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fc2a 	bl	8000208 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc7c 	bl	80002b8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <Audio_MAL_IRQHandler+0xf4>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d203      	bcs.n	80029d6 <Audio_MAL_IRQHandler+0x8e>
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	e000      	b.n	80029d8 <Audio_MAL_IRQHandler+0x90>
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <Audio_MAL_IRQHandler+0xfc>)
 80029d8:	4413      	add	r3, r2
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <Audio_MAL_IRQHandler+0xf4>)
 80029dc:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029ea:	428b      	cmp	r3, r1
 80029ec:	bf28      	it	cs
 80029ee:	460b      	movcs	r3, r1
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <Audio_MAL_IRQHandler+0xf0>)
 80029f4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fc5b 	bl	80002b8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002a02:	e013      	b.n	8002a2c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc54 	bl	80002b8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <Audio_MAL_IRQHandler+0xe8>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <Audio_MAL_IRQHandler+0xec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f7fd fcbc 	bl	8000398 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <Audio_MAL_IRQHandler+0xf4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f8b8 	bl	8002b9c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000010 	.word	0x20000010
 8002a34:	20000014 	.word	0x20000014
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	20012df8 	.word	0x20012df8
 8002a40:	20012e38 	.word	0x20012e38
 8002a44:	0001fffe 	.word	0x0001fffe

08002a48 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002a4c:	f7ff ff7c 	bl	8002948 <Audio_MAL_IRQHandler>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002a58:	f7ff ff76 	bl	8002948 <Audio_MAL_IRQHandler>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002a64:	2102      	movs	r1, #2
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <SPI3_IRQHandler+0x3c>)
 8002a68:	f7fd fdc1 	bl	80005ee <SPI_I2S_GetFlagStatus>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <SPI3_IRQHandler+0x40>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d106      	bne.n	8002a88 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002a7a:	f000 f89a 	bl	8002bb2 <EVAL_AUDIO_GetSampleCallBack>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4619      	mov	r1, r3
 8002a82:	2004      	movs	r0, #4
 8002a84:	f7fd fba4 	bl	80001d0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002a88:	f000 f893 	bl	8002bb2 <EVAL_AUDIO_GetSampleCallBack>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <SPI3_IRQHandler+0x3c>)
 8002a92:	f7fd fd9d 	bl	80005d0 <SPI_I2S_SendData>
  }
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40003c00 	.word	0x40003c00
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <vApplicationIdleHook>:
void GPIO_Config();

void Task1Handle(void *params);
void Task2Handle(void *params);

void vApplicationIdleHook(){
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002aa8:	bf30      	wfi
	__WFI();

}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <main>:

int main(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af02      	add	r7, sp, #8

	RCC_DeInit();
 8002aba:	f7fd fd3b 	bl	8000534 <RCC_DeInit>

	SystemCoreClockUpdate();
 8002abe:	f000 f8f1 	bl	8002ca4 <SystemCoreClockUpdate>

	Sys_Config();
 8002ac2:	f000 f843 	bl	8002b4c <Sys_Config>

	xTaskCreate(Task1Handle, "Task1",configMINIMAL_STACK_SIZE, NULL , 2 ,&myTask1Handle);
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <main+0x40>)
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	2302      	movs	r3, #2
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2282      	movs	r2, #130	; 0x82
 8002ad2:	4909      	ldr	r1, [pc, #36]	; (8002af8 <main+0x44>)
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <main+0x48>)
 8002ad6:	f7fe fd1d 	bl	8001514 <xTaskCreate>
	xTaskCreate(Task2Handle,"Task2",configMINIMAL_STACK_SIZE,NULL,2,&myTask2Handle);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <main+0x4c>)
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2302      	movs	r3, #2
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2282      	movs	r2, #130	; 0x82
 8002ae6:	4907      	ldr	r1, [pc, #28]	; (8002b04 <main+0x50>)
 8002ae8:	4807      	ldr	r0, [pc, #28]	; (8002b08 <main+0x54>)
 8002aea:	f7fe fd13 	bl	8001514 <xTaskCreate>

	vTaskStartScheduler();
 8002aee:	f7fe febf 	bl	8001870 <vTaskStartScheduler>

  while (1)
 8002af2:	e7fe      	b.n	8002af2 <main+0x3e>
 8002af4:	20012db0 	.word	0x20012db0
 8002af8:	08002f34 	.word	0x08002f34
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	20012db4 	.word	0x20012db4
 8002b04:	08002f3c 	.word	0x08002f3c
 8002b08:	08002b2d 	.word	0x08002b2d

08002b0c <Task1Handle>:
  {

  }
}

void Task1Handle(void *params){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	while(1){

		GPIO_ToggleBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_14);
 8002b14:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <Task1Handle+0x1c>)
 8002b1a:	f7fd fcf9 	bl	8000510 <GPIO_ToggleBits>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b22:	f7fe fe71 	bl	8001808 <vTaskDelay>
		GPIO_ToggleBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_14);
 8002b26:	e7f5      	b.n	8002b14 <Task1Handle+0x8>
 8002b28:	40020c00 	.word	0x40020c00

08002b2c <Task2Handle>:

	}

}

void Task2Handle(void *params){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

	while(1){

		GPIO_ToggleBits(GPIOD,GPIO_Pin_13 | GPIO_Pin_15);
 8002b34:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <Task2Handle+0x1c>)
 8002b3a:	f7fd fce9 	bl	8000510 <GPIO_ToggleBits>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b42:	f7fe fe61 	bl	8001808 <vTaskDelay>
		GPIO_ToggleBits(GPIOD,GPIO_Pin_13 | GPIO_Pin_15);
 8002b46:	e7f5      	b.n	8002b34 <Task2Handle+0x8>
 8002b48:	40020c00 	.word	0x40020c00

08002b4c <Sys_Config>:

	}
}

void Sys_Config(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0

	GPIO_Config();
 8002b50:	f000 f802 	bl	8002b58 <GPIO_Config>
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <GPIO_Config>:

void GPIO_Config(){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2008      	movs	r0, #8
 8002b62:	f7fd fd15 	bl	8000590 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_Init_Struct = {0};
 8002b66:	463b      	mov	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

	GPIO_Init_Struct.GPIO_Mode = GPIO_Mode_OUT;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Struct.GPIO_OType = GPIO_OType_PP;
 8002b72:	2300      	movs	r3, #0
 8002b74:	71bb      	strb	r3, [r7, #6]
	GPIO_Init_Struct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8002b76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002b7a:	603b      	str	r3, [r7, #0]
	GPIO_Init_Struct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Struct.GPIO_Speed = GPIO_Speed_100MHz;
 8002b80:	2303      	movs	r3, #3
 8002b82:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOD,&GPIO_Init_Struct);
 8002b84:	463b      	mov	r3, r7
 8002b86:	4619      	mov	r1, r3
 8002b88:	4803      	ldr	r0, [pc, #12]	; (8002b98 <GPIO_Config+0x40>)
 8002b8a:	f7fd fc33 	bl	80003f4 <GPIO_Init>


}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40020c00 	.word	0x40020c00

08002b9c <EVAL_AUDIO_TransferComplete_CallBack>:

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002ba6:	bf00      	nop
}
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <EVAL_AUDIO_GetSampleCallBack>:



uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bca:	e003      	b.n	8002bd4 <LoopCopyDataInit>

08002bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bd2:	3104      	adds	r1, #4

08002bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bd4:	480b      	ldr	r0, [pc, #44]	; (8002c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bdc:	d3f6      	bcc.n	8002bcc <CopyDataInit>
  ldr  r2, =_sbss
 8002bde:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002be0:	e002      	b.n	8002be8 <LoopFillZerobss>

08002be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002be4:	f842 3b04 	str.w	r3, [r2], #4

08002be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bec:	d3f9      	bcc.n	8002be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bee:	f000 f823 	bl	8002c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f000 f94f 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7ff ff5d 	bl	8002ab4 <main>
  bx  lr    
 8002bfa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c00:	08002f4c 	.word	0x08002f4c
  ldr  r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c08:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8002c0c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002c10:	20012e74 	.word	0x20012e74

08002c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC_IRQHandler>

08002c16 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <MemManage_Handler+0x4>

08002c1c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <BusFault_Handler+0x4>

08002c22 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <UsageFault_Handler+0x4>

08002c28 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <SystemInit+0x60>)
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <SystemInit+0x60>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <SystemInit+0x64>)
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <SystemInit+0x64>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <SystemInit+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <SystemInit+0x64>)
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SystemInit+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <SystemInit+0x64>)
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <SystemInit+0x68>)
 8002c72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <SystemInit+0x64>)
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <SystemInit+0x64>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <SystemInit+0x64>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002c86:	f000 f889 	bl	8002d9c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c8a:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <SystemInit+0x60>)
 8002c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c90:	609a      	str	r2, [r3, #8]
#endif
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	24003010 	.word	0x24003010

08002ca4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2302      	movs	r3, #2
 8002cbc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d007      	beq.n	8002cde <SystemCoreClockUpdate+0x3a>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d009      	beq.n	8002ce6 <SystemCoreClockUpdate+0x42>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d13d      	bne.n	8002d52 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002cd8:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <SystemCoreClockUpdate+0xec>)
 8002cda:	601a      	str	r2, [r3, #0]
      break;
 8002cdc:	e03d      	b.n	8002d5a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	; (8002d94 <SystemCoreClockUpdate+0xf0>)
 8002ce2:	601a      	str	r2, [r3, #0]
      break;
 8002ce4:	e039      	b.n	8002d5a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0d9b      	lsrs	r3, r3, #22
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d02:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <SystemCoreClockUpdate+0xf0>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002d0c:	6852      	ldr	r2, [r2, #4]
 8002d0e:	0992      	lsrs	r2, r2, #6
 8002d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e00b      	b.n	8002d34 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <SystemCoreClockUpdate+0xec>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002d26:	6852      	ldr	r2, [r2, #4]
 8002d28:	0992      	lsrs	r2, r2, #6
 8002d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002d4e:	6013      	str	r3, [r2, #0]
      break;
 8002d50:	e003      	b.n	8002d5a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <SystemCoreClockUpdate+0xec>)
 8002d56:	601a      	str	r2, [r3, #0]
      break;
 8002d58:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <SystemCoreClockUpdate+0xe4>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <SystemCoreClockUpdate+0xf4>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <SystemCoreClockUpdate+0xe8>)
 8002d78:	6013      	str	r3, [r2, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	20000018 	.word	0x20000018
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	2000001c 	.word	0x2000001c

08002d9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002daa:	4a36      	ldr	r2, [pc, #216]	; (8002e84 <SetSysClock+0xe8>)
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <SetSysClock+0xe8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SetSysClock+0xe8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <SetSysClock+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002dd2:	d1f0      	bne.n	8002db6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <SetSysClock+0xe8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002de0:	2301      	movs	r3, #1
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	e001      	b.n	8002dea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d142      	bne.n	8002e76 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002df0:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <SetSysClock+0xe8>)
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <SetSysClock+0xe8>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <SetSysClock+0xec>)
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <SetSysClock+0xec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e06:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <SetSysClock+0xe8>)
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <SetSysClock+0xe8>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <SetSysClock+0xe8>)
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <SetSysClock+0xe8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <SetSysClock+0xe8>)
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <SetSysClock+0xe8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002e26:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <SetSysClock+0xe8>)
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <SetSysClock+0xf0>)
 8002e2c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <SetSysClock+0xe8>)
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <SetSysClock+0xe8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e38:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e3a:	bf00      	nop
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <SetSysClock+0xe8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f9      	beq.n	8002e3c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <SetSysClock+0xf4>)
 8002e4a:	f240 6205 	movw	r2, #1541	; 0x605
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e50:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <SetSysClock+0xe8>)
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <SetSysClock+0xe8>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002e5c:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <SetSysClock+0xe8>)
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <SetSysClock+0xe8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002e68:	bf00      	nop
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <SetSysClock+0xe8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d1f9      	bne.n	8002e6a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	07405408 	.word	0x07405408
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4e0d      	ldr	r6, [pc, #52]	; (8002ecc <__libc_init_array+0x38>)
 8002e98:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9a:	1ba4      	subs	r4, r4, r6
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	2500      	movs	r5, #0
 8002ea0:	42a5      	cmp	r5, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	4e0b      	ldr	r6, [pc, #44]	; (8002ed4 <__libc_init_array+0x40>)
 8002ea6:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <__libc_init_array+0x44>)
 8002ea8:	f000 f82c 	bl	8002f04 <_init>
 8002eac:	1ba4      	subs	r4, r4, r6
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	42a5      	cmp	r5, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ebc:	4798      	blx	r3
 8002ebe:	3501      	adds	r5, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec6:	4798      	blx	r3
 8002ec8:	3501      	adds	r5, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08002f44 	.word	0x08002f44
 8002ed0:	08002f44 	.word	0x08002f44
 8002ed4:	08002f44 	.word	0x08002f44
 8002ed8:	08002f48 	.word	0x08002f48

08002edc <memcpy>:
 8002edc:	b510      	push	{r4, lr}
 8002ede:	1e43      	subs	r3, r0, #1
 8002ee0:	440a      	add	r2, r1
 8002ee2:	4291      	cmp	r1, r2
 8002ee4:	d100      	bne.n	8002ee8 <memcpy+0xc>
 8002ee6:	bd10      	pop	{r4, pc}
 8002ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ef0:	e7f7      	b.n	8002ee2 <memcpy+0x6>

08002ef2 <memset>:
 8002ef2:	4402      	add	r2, r0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d100      	bne.n	8002efc <memset+0xa>
 8002efa:	4770      	bx	lr
 8002efc:	f803 1b01 	strb.w	r1, [r3], #1
 8002f00:	e7f9      	b.n	8002ef6 <memset+0x4>
	...

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
