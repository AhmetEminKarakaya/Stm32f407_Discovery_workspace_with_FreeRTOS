
Queue_kullanimi_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000000  08004028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
  7 .bss          00012ed4  20000168  20000168  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001303c  2001303c  00020168  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e0a9  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000207f  00000000  00000000  0002e241  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ca8  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ba0  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000624a  00000000  00000000  00031b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004aa4  00000000  00000000  00037d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c7f6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034dc  00000000  00000000  0003c874  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003fd50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f6c 	.word	0x08003f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08003f6c 	.word	0x08003f6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <DAC_SetChannel1Data+0x34>)
 80001f2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	3308      	adds	r3, #8
 80001fc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	461a      	mov	r2, r3
 8000202:	887b      	ldrh	r3, [r7, #2]
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40007400 	.word	0x40007400

08000218 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <DMA_Init+0xac>)
 8000230:	4013      	ands	r3, r2
 8000232:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800025a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000260:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000266:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800026c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4313      	orrs	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f023 0307 	bic.w	r3, r3, #7
 8000286:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4313      	orrs	r3, r2
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	4313      	orrs	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	f01c803f 	.word	0xf01c803f

080002c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002e6:	e005      	b.n	80002f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 0201 	bic.w	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <DMA_GetFlagStatus+0x6c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d802      	bhi.n	8000350 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <DMA_GetFlagStatus+0x70>)
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	e001      	b.n	8000354 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <DMA_GetFlagStatus+0x74>)
 8000352:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d003      	beq.n	8000366 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e002      	b.n	800036c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000372:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000376:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	4013      	ands	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000382:	2301      	movs	r3, #1
 8000384:	75fb      	strb	r3, [r7, #23]
 8000386:	e001      	b.n	800038c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800038c:	7dfb      	ldrb	r3, [r7, #23]
}
 800038e:	4618      	mov	r0, r3
 8000390:	371c      	adds	r7, #28
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	4002640f 	.word	0x4002640f
 80003a0:	40026000 	.word	0x40026000
 80003a4:	40026400 	.word	0x40026400

080003a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <DMA_ClearFlag+0x50>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d802      	bhi.n	80003c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <DMA_ClearFlag+0x54>)
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e001      	b.n	80003c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <DMA_ClearFlag+0x58>)
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d007      	beq.n	80003de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003dc:	e006      	b.n	80003ec <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	6093      	str	r3, [r2, #8]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	4002640f 	.word	0x4002640f
 80003fc:	40026000 	.word	0x40026000
 8000400:	40026400 	.word	0x40026400

08000404 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e076      	b.n	800050e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000420:	2201      	movs	r2, #1
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	4013      	ands	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	429a      	cmp	r2, r3
 800043a:	d165      	bne.n	8000508 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	401a      	ands	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	4619      	mov	r1, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d003      	beq.n	800047a <GPIO_Init+0x76>
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	2b02      	cmp	r3, #2
 8000478:	d12e      	bne.n	80004d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	401a      	ands	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	4619      	mov	r1, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	431a      	orrs	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	2301      	movs	r3, #1
 80004b4:	408b      	lsls	r3, r1
 80004b6:	43db      	mvns	r3, r3
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	7992      	ldrb	r2, [r2, #6]
 80004c6:	4611      	mov	r1, r2
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	b292      	uxth	r2, r2
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2103      	movs	r1, #3
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	401a      	ands	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68da      	ldr	r2, [r3, #12]
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	79db      	ldrb	r3, [r3, #7]
 80004f8:	4619      	mov	r1, r3
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	431a      	orrs	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d985      	bls.n	8000420 <GPIO_Init+0x1c>
    }
  }
}
 8000514:	bf00      	nop
 8000516:	371c      	adds	r7, #28
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	807b      	strh	r3, [r7, #2]
 800052c:	4613      	mov	r3, r2
 800052e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000538:	787a      	ldrb	r2, [r7, #1]
 800053a:	887b      	ldrh	r3, [r7, #2]
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	b29b      	uxth	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b29b      	uxth	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3208      	adds	r2, #8
 800055c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	210f      	movs	r1, #15
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	ea02 0103 	and.w	r1, r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f100 0208 	add.w	r2, r0, #8
 800057a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	b29b      	uxth	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3208      	adds	r2, #8
 800058a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000594:	887b      	ldrh	r3, [r7, #2]
 8000596:	08db      	lsrs	r3, r3, #3
 8000598:	b29b      	uxth	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3208      	adds	r2, #8
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <RCC_DeInit+0x50>)
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <RCC_DeInit+0x50>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <RCC_DeInit+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <RCC_DeInit+0x50>)
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <RCC_DeInit+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80005d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <RCC_DeInit+0x50>)
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <RCC_DeInit+0x54>)
 80005de:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <RCC_DeInit+0x50>)
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <RCC_DeInit+0x58>)
 80005e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <RCC_DeInit+0x50>)
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <RCC_DeInit+0x50>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <RCC_DeInit+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40023800 	.word	0x40023800
 8000608:	24003010 	.word	0x24003010
 800060c:	20003000 	.word	0x20003000

08000610 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	2302      	movs	r3, #2
 800062e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000630:	4b47      	ldr	r3, [pc, #284]	; (8000750 <RCC_GetClocksFreq+0x140>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f003 030c 	and.w	r3, r3, #12
 8000638:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d007      	beq.n	8000650 <RCC_GetClocksFreq+0x40>
 8000640:	2b08      	cmp	r3, #8
 8000642:	d009      	beq.n	8000658 <RCC_GetClocksFreq+0x48>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13d      	bne.n	80006c4 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a42      	ldr	r2, [pc, #264]	; (8000754 <RCC_GetClocksFreq+0x144>)
 800064c:	601a      	str	r2, [r3, #0]
      break;
 800064e:	e03d      	b.n	80006cc <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a41      	ldr	r2, [pc, #260]	; (8000758 <RCC_GetClocksFreq+0x148>)
 8000654:	601a      	str	r2, [r3, #0]
      break;
 8000656:	e039      	b.n	80006cc <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000658:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <RCC_GetClocksFreq+0x140>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	0d9b      	lsrs	r3, r3, #22
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <RCC_GetClocksFreq+0x140>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800066c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00c      	beq.n	800068e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000674:	4a38      	ldr	r2, [pc, #224]	; (8000758 <RCC_GetClocksFreq+0x148>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	fbb2 f3f3 	udiv	r3, r2, r3
 800067c:	4a34      	ldr	r2, [pc, #208]	; (8000750 <RCC_GetClocksFreq+0x140>)
 800067e:	6852      	ldr	r2, [r2, #4]
 8000680:	0992      	lsrs	r2, r2, #6
 8000682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	e00b      	b.n	80006a6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800068e:	4a31      	ldr	r2, [pc, #196]	; (8000754 <RCC_GetClocksFreq+0x144>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <RCC_GetClocksFreq+0x140>)
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	0992      	lsrs	r2, r2, #6
 800069c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <RCC_GetClocksFreq+0x140>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	0c1b      	lsrs	r3, r3, #16
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	3301      	adds	r3, #1
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
      break;
 80006c2:	e003      	b.n	80006cc <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <RCC_GetClocksFreq+0x144>)
 80006c8:	601a      	str	r2, [r3, #0]
      break;
 80006ca:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <RCC_GetClocksFreq+0x140>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006dc:	4a1f      	ldr	r2, [pc, #124]	; (800075c <RCC_GetClocksFreq+0x14c>)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <RCC_GetClocksFreq+0x140>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	0a9b      	lsrs	r3, r3, #10
 8000702:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <RCC_GetClocksFreq+0x14c>)
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	40da      	lsrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <RCC_GetClocksFreq+0x140>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000724:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	0b5b      	lsrs	r3, r3, #13
 800072a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800072c:	4a0b      	ldr	r2, [pc, #44]	; (800075c <RCC_GetClocksFreq+0x14c>)
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	40da      	lsrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60da      	str	r2, [r3, #12]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	00f42400 	.word	0x00f42400
 8000758:	007a1200 	.word	0x007a1200
 800075c:	20000000 	.word	0x20000000

08000760 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000772:	490a      	ldr	r1, [pc, #40]	; (800079c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4313      	orrs	r3, r2
 800077c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800077e:	e006      	b.n	800078e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	43db      	mvns	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007b2:	490a      	ldr	r1, [pc, #40]	; (80007dc <RCC_APB1PeriphClockCmd+0x3c>)
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <RCC_APB1PeriphClockCmd+0x3c>)
 80007b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007be:	e006      	b.n	80007ce <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <RCC_APB1PeriphClockCmd+0x3c>)
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <RCC_APB1PeriphClockCmd+0x3c>)
 80007c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	887a      	ldrh	r2, [r7, #2]
 80007f0:	819a      	strh	r2, [r3, #12]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	891b      	ldrh	r3, [r3, #8]
 8000812:	b29a      	uxth	r2, r3
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	4013      	ands	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800081e:	2301      	movs	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e001      	b.n	8000828 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	8a1b      	ldrh	r3, [r3, #16]
 8000856:	b29b      	uxth	r3, r3
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	88db      	ldrh	r3, [r3, #6]
 8000866:	461a      	mov	r2, r3
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	4313      	orrs	r3, r2
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	b29a      	uxth	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	899b      	ldrh	r3, [r3, #12]
 800087a:	b29b      	uxth	r3, r3
 800087c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000884:	f023 030c 	bic.w	r3, r3, #12
 8000888:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	889a      	ldrh	r2, [r3, #4]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	891b      	ldrh	r3, [r3, #8]
 8000892:	4313      	orrs	r3, r2
 8000894:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800089a:	4313      	orrs	r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	4313      	orrs	r3, r2
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8a9b      	ldrh	r3, [r3, #20]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	899b      	ldrh	r3, [r3, #12]
 80008c2:	461a      	mov	r2, r3
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	4313      	orrs	r3, r2
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe9a 	bl	8000610 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a30      	ldr	r2, [pc, #192]	; (80009a0 <USART_Init+0x168>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d003      	beq.n	80008ec <USART_Init+0xb4>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <USART_Init+0x16c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d102      	bne.n	80008f2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	623b      	str	r3, [r7, #32]
 80008f0:	e001      	b.n	80008f6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	899b      	ldrh	r3, [r3, #12]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	da0c      	bge.n	800091c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000902:	6a3a      	ldr	r2, [r7, #32]
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	009a      	lsls	r2, r3, #2
 800090c:	441a      	add	r2, r3
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fbb2 f3f3 	udiv	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	e00b      	b.n	8000934 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800091c:	6a3a      	ldr	r2, [r7, #32]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	009a      	lsls	r2, r3, #2
 8000926:	441a      	add	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <USART_Init+0x170>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	b29b      	uxth	r3, r3
 8000958:	b21b      	sxth	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	da0c      	bge.n	8000978 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	3332      	adds	r3, #50	; 0x32
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <USART_Init+0x170>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000972:	4313      	orrs	r3, r2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	e00b      	b.n	8000990 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	3332      	adds	r3, #50	; 0x32
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <USART_Init+0x170>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	095b      	lsrs	r3, r3, #5
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098c:	4313      	orrs	r3, r2
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	b29a      	uxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	811a      	strh	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40011400 	.word	0x40011400
 80009a8:	51eb851f 	.word	0x51eb851f

080009ac <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	899b      	ldrh	r3, [r3, #12]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009ce:	e007      	b.n	80009e0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	819a      	strh	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	809a      	strh	r2, [r3, #4]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a22:	b29b      	uxth	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	095b      	lsrs	r3, r3, #5
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a66:	2201      	movs	r2, #1
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d103      	bne.n	8000a7e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	330c      	adds	r3, #12
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e009      	b.n	8000a92 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d103      	bne.n	8000a8c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3310      	adds	r3, #16
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e002      	b.n	8000a92 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3314      	adds	r3, #20
 8000a90:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	6811      	ldr	r1, [r2, #0]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000aa4:	e006      	b.n	8000ab4 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	6811      	ldr	r1, [r2, #0]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	43d2      	mvns	r2, r2
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	801a      	strh	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f103 0208 	add.w	r2, r3, #8
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b32:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f103 0208 	add.w	r2, r3, #8
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f103 0208 	add.w	r2, r3, #8
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8a:	d103      	bne.n	8000b94 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	e00c      	b.n	8000bae <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3308      	adds	r3, #8
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e002      	b.n	8000ba2 <vListInsert+0x2e>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d9f6      	bls.n	8000b9c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6892      	ldr	r2, [r2, #8]
 8000bfc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6852      	ldr	r2, [r2, #4]
 8000c06:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d103      	bne.n	8000c1a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3b04      	subs	r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	f023 0201 	bic.w	r2, r3, #1
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b04      	subs	r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <pxPortInitialiseStack+0x64>)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b14      	subs	r3, #20
 8000c76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3b04      	subs	r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f06f 0202 	mvn.w	r2, #2
 8000c8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b20      	subs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	08000ca5 	.word	0x08000ca5

08000ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <prvTaskExitError+0x50>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb6:	d009      	beq.n	8000ccc <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e7fe      	b.n	8000cca <prvTaskExitError+0x26>
 8000ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd0:	f383 8811 	msr	BASEPRI, r3
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000cde:	bf00      	nop
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0fc      	beq.n	8000ce0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000010 	.word	0x20000010
	...

08000d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <pxCurrentTCBConst2>)
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	6808      	ldr	r0, [r1, #0]
 8000d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d0a:	f380 8809 	msr	PSP, r0
 8000d0e:	f3bf 8f6f 	isb	sy
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	f380 8811 	msr	BASEPRI, r0
 8000d1a:	4770      	bx	lr
 8000d1c:	f3af 8000 	nop.w

08000d20 <pxCurrentTCBConst2>:
 8000d20:	20012dac 	.word	0x20012dac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop

08000d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <prvPortStartFirstTask+0x24>)
 8000d2a:	6800      	ldr	r0, [r0, #0]
 8000d2c:	6800      	ldr	r0, [r0, #0]
 8000d2e:	f380 8808 	msr	MSP, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	f380 8814 	msr	CONTROL, r0
 8000d3a:	b662      	cpsie	i
 8000d3c:	b661      	cpsie	f
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	df00      	svc	0
 8000d48:	bf00      	nop
 8000d4a:	0000      	.short	0x0000
 8000d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop

08000d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <xPortStartScheduler+0x118>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <xPortStartScheduler+0x11c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d109      	bne.n	8000d78 <xPortStartScheduler+0x24>
 8000d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d68:	f383 8811 	msr	BASEPRI, r3
 8000d6c:	f3bf 8f6f 	isb	sy
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e7fe      	b.n	8000d76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <xPortStartScheduler+0x118>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <xPortStartScheduler+0x120>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d109      	bne.n	8000d96 <xPortStartScheduler+0x42>
 8000d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d86:	f383 8811 	msr	BASEPRI, r3
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	f3bf 8f4f 	dsb	sy
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e7fe      	b.n	8000d94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <xPortStartScheduler+0x124>)
 8000d98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	22ff      	movs	r2, #255	; 0xff
 8000da6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <xPortStartScheduler+0x128>)
 8000dbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000dc4:	e009      	b.n	8000dda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000dce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	2b80      	cmp	r3, #128	; 0x80
 8000de4:	d0ef      	beq.n	8000dc6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d009      	beq.n	8000e06 <xPortStartScheduler+0xb2>
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	e7fe      	b.n	8000e04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000e0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <xPortStartScheduler+0x12c>)
 8000e1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <xPortStartScheduler+0x130>)
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <xPortStartScheduler+0x130>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <xPortStartScheduler+0x130>)
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <xPortStartScheduler+0x130>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000e3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000e3c:	f000 f8d4 	bl	8000fe8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <xPortStartScheduler+0x134>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000e46:	f000 f8f3 	bl	8001030 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <xPortStartScheduler+0x138>)
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <xPortStartScheduler+0x138>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000e56:	f7ff ff67 	bl	8000d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000e5a:	f001 fb85 	bl	8002568 <vTaskSwitchContext>
    prvTaskExitError();
 8000e5e:	f7ff ff21 	bl	8000ca4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	410fc271 	.word	0x410fc271
 8000e74:	410fc270 	.word	0x410fc270
 8000e78:	e000e400 	.word	0xe000e400
 8000e7c:	20000184 	.word	0x20000184
 8000e80:	20000188 	.word	0x20000188
 8000e84:	e000ed20 	.word	0xe000ed20
 8000e88:	20000010 	.word	0x20000010
 8000e8c:	e000ef34 	.word	0xe000ef34

08000e90 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <vPortEnterCritical+0x54>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <vPortEnterCritical+0x54>)
 8000eb0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <vPortEnterCritical+0x54>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d10e      	bne.n	8000ed8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <vPortEnterCritical+0x58>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d009      	beq.n	8000ed8 <vPortEnterCritical+0x48>
 8000ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec8:	f383 8811 	msr	BASEPRI, r3
 8000ecc:	f3bf 8f6f 	isb	sy
 8000ed0:	f3bf 8f4f 	dsb	sy
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	e7fe      	b.n	8000ed6 <vPortEnterCritical+0x46>
    }
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	e000ed04 	.word	0xe000ed04

08000eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <vPortExitCritical+0x4c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <vPortExitCritical+0x22>
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	e7fe      	b.n	8000f0c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <vPortExitCritical+0x4c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <vPortExitCritical+0x4c>)
 8000f16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <vPortExitCritical+0x4c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <vPortExitCritical+0x3e>
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	00000000 	.word	0x00000000

08000f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000f40:	f3ef 8009 	mrs	r0, PSP
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <pxCurrentTCBConst>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f01e 0f10 	tst.w	lr, #16
 8000f50:	bf08      	it	eq
 8000f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5a:	6010      	str	r0, [r2, #0]
 8000f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f64:	f380 8811 	msr	BASEPRI, r0
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	f3bf 8f6f 	isb	sy
 8000f70:	f001 fafa 	bl	8002568 <vTaskSwitchContext>
 8000f74:	f04f 0000 	mov.w	r0, #0
 8000f78:	f380 8811 	msr	BASEPRI, r0
 8000f7c:	bc09      	pop	{r0, r3}
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	6808      	ldr	r0, [r1, #0]
 8000f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f86:	f01e 0f10 	tst.w	lr, #16
 8000f8a:	bf08      	it	eq
 8000f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000f90:	f380 8809 	msr	PSP, r0
 8000f94:	f3bf 8f6f 	isb	sy
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w

08000fa0 <pxCurrentTCBConst>:
 8000fa0:	20012dac 	.word	0x20012dac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop

08000fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
        __asm volatile
 8000fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb2:	f383 8811 	msr	BASEPRI, r3
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	f3bf 8f4f 	dsb	sy
 8000fbe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000fc0:	f001 f9bc 	bl	800233c <xTaskIncrementTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SysTick_Handler+0x3c>)
 8000fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000ed04 	.word	0xe000ed04

08000fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <vPortSetupTimerInterrupt+0x34>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <vPortSetupTimerInterrupt+0x38>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <vPortSetupTimerInterrupt+0x3c>)
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <vPortSetupTimerInterrupt+0x40>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	490b      	ldr	r1, [pc, #44]	; (800102c <vPortSetupTimerInterrupt+0x44>)
 8001000:	fba1 1303 	umull	r1, r3, r1, r3
 8001004:	099b      	lsrs	r3, r3, #6
 8001006:	3b01      	subs	r3, #1
 8001008:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <vPortSetupTimerInterrupt+0x34>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010
 8001020:	e000e018 	.word	0xe000e018
 8001024:	e000e014 	.word	0xe000e014
 8001028:	20000154 	.word	0x20000154
 800102c:	10624dd3 	.word	0x10624dd3

08001030 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001030:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001040 <vPortEnableVFP+0x10>
 8001034:	6801      	ldr	r1, [r0, #0]
 8001036:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800103a:	6001      	str	r1, [r0, #0]
 800103c:	4770      	bx	lr
 800103e:	0000      	.short	0x0000
 8001040:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop

08001048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800104e:	f3ef 8305 	mrs	r3, IPSR
 8001052:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d913      	bls.n	8001082 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <vPortValidateInterruptPriority+0x6c>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <vPortValidateInterruptPriority+0x70>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	7afa      	ldrb	r2, [r7, #11]
 800106a:	429a      	cmp	r2, r3
 800106c:	d209      	bcs.n	8001082 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001072:	f383 8811 	msr	BASEPRI, r3
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	e7fe      	b.n	8001080 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <vPortValidateInterruptPriority+0x74>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <vPortValidateInterruptPriority+0x78>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d909      	bls.n	80010a6 <vPortValidateInterruptPriority+0x5e>
 8001092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	e7fe      	b.n	80010a4 <vPortValidateInterruptPriority+0x5c>
    }
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e3f0 	.word	0xe000e3f0
 80010b8:	20000184 	.word	0x20000184
 80010bc:	e000ed0c 	.word	0xe000ed0c
 80010c0:	20000188 	.word	0x20000188

080010c4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80010d0:	f001 f81c 	bl	800210c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80010d4:	4b64      	ldr	r3, [pc, #400]	; (8001268 <pvPortMalloc+0x1a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80010dc:	f000 f930 	bl	8001340 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <pvPortMalloc+0x1a8>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 80a6 	bne.w	800123a <pvPortMalloc+0x176>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d02d      	beq.n	8001150 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80010f4:	2208      	movs	r2, #8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	441a      	add	r2, r3
            if( ( xWantedSize > 0 ) &&
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d927      	bls.n	8001150 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001100:	2208      	movs	r2, #8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	2b00      	cmp	r3, #0
 8001110:	d021      	beq.n	8001156 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f023 0307 	bic.w	r3, r3, #7
 8001118:	f103 0208 	add.w	r2, r3, #8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d913      	bls.n	800114a <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f023 0307 	bic.w	r3, r3, #7
 8001128:	3308      	adds	r3, #8
 800112a:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00f      	beq.n	8001156 <pvPortMalloc+0x92>
 8001136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113a:	f383 8811 	msr	BASEPRI, r3
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e7fe      	b.n	8001148 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800114e:	e002      	b.n	8001156 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e000      	b.n	8001158 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001156:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06d      	beq.n	800123a <pvPortMalloc+0x176>
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <pvPortMalloc+0x1ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d868      	bhi.n	800123a <pvPortMalloc+0x176>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <pvPortMalloc+0x1b0>)
 800116a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800116c:	4b41      	ldr	r3, [pc, #260]	; (8001274 <pvPortMalloc+0x1b0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001172:	e004      	b.n	800117e <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d203      	bcs.n	8001190 <pvPortMalloc+0xcc>
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f1      	bne.n	8001174 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <pvPortMalloc+0x1a4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001196:	429a      	cmp	r2, r3
 8001198:	d04f      	beq.n	800123a <pvPortMalloc+0x176>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2208      	movs	r2, #8
 80011a0:	4413      	add	r3, r2
 80011a2:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	2308      	movs	r3, #8
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d91e      	bls.n	80011fa <pvPortMalloc+0x136>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <pvPortMalloc+0x11e>
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	e7fe      	b.n	80011e0 <pvPortMalloc+0x11c>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f000 f905 	bl	8001404 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <pvPortMalloc+0x1ac>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <pvPortMalloc+0x1ac>)
 8001206:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <pvPortMalloc+0x1ac>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <pvPortMalloc+0x1b4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d203      	bcs.n	800121c <pvPortMalloc+0x158>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <pvPortMalloc+0x1ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <pvPortMalloc+0x1b4>)
 800121a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <pvPortMalloc+0x1a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	431a      	orrs	r2, r3
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <pvPortMalloc+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <pvPortMalloc+0x1b8>)
 8001238:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800123a:	f000 ff75 	bl	8002128 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <pvPortMalloc+0x198>
 8001248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124c:	f383 8811 	msr	BASEPRI, r3
 8001250:	f3bf 8f6f 	isb	sy
 8001254:	f3bf 8f4f 	dsb	sy
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e7fe      	b.n	800125a <pvPortMalloc+0x196>
    return pvReturn;
 800125c:	69fb      	ldr	r3, [r7, #28]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20012d94 	.word	0x20012d94
 800126c:	20012da8 	.word	0x20012da8
 8001270:	20012d98 	.word	0x20012d98
 8001274:	20012d8c 	.word	0x20012d8c
 8001278:	20012d9c 	.word	0x20012d9c
 800127c:	20012da0 	.word	0x20012da0

08001280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04b      	beq.n	800132a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001292:	2308      	movs	r3, #8
 8001294:	425b      	negs	r3, r3
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <vPortFree+0xb4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <vPortFree+0x42>
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e7fe      	b.n	80012c0 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <vPortFree+0x5e>
 80012ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e7fe      	b.n	80012dc <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <vPortFree+0xb4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01e      	beq.n	800132a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11a      	bne.n	800132a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <vPortFree+0xb4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001304:	f000 ff02 	bl	800210c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <vPortFree+0xb8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <vPortFree+0xb8>)
 8001314:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f000 f874 	bl	8001404 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <vPortFree+0xbc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <vPortFree+0xbc>)
 8001324:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001326:	f000 feff 	bl	8002128 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20012da8 	.word	0x20012da8
 8001338:	20012d98 	.word	0x20012d98
 800133c:	20012da4 	.word	0x20012da4

08001340 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001346:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800134a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <prvHeapInit+0xac>)
 800134e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3307      	adds	r3, #7
 800135e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f023 0307 	bic.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <prvHeapInit+0xac>)
 8001370:	4413      	add	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <prvHeapInit+0xb0>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <prvHeapInit+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800138c:	2208      	movs	r2, #8
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 0307 	bic.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <prvHeapInit+0xb4>)
 80013a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <prvHeapInit+0xb4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <prvHeapInit+0xb4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	1ad2      	subs	r2, r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <prvHeapInit+0xb4>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <prvHeapInit+0xb8>)
 80013ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <prvHeapInit+0xbc>)
 80013d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <prvHeapInit+0xc0>)
 80013da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	2000018c 	.word	0x2000018c
 80013f0:	20012d8c 	.word	0x20012d8c
 80013f4:	20012d94 	.word	0x20012d94
 80013f8:	20012d9c 	.word	0x20012d9c
 80013fc:	20012d98 	.word	0x20012d98
 8001400:	20012da8 	.word	0x20012da8

08001404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <prvInsertBlockIntoFreeList+0xac>)
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e002      	b.n	8001418 <prvInsertBlockIntoFreeList+0x14>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d3f7      	bcc.n	8001412 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	441a      	add	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d108      	bne.n	8001446 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	441a      	add	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	441a      	add	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d118      	bne.n	800148c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d00d      	beq.n	8001482 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	441a      	add	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e008      	b.n	8001494 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e003      	b.n	8001494 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	d002      	beq.n	80014a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20012d8c 	.word	0x20012d8c
 80014b4:	20012d94 	.word	0x20012d94

080014b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <xQueueGenericReset+0x2c>
 80014d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d4:	f383 8811 	msr	BASEPRI, r3
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e7fe      	b.n	80014e2 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d05a      	beq.n	80015a0 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d056      	beq.n	80015a0 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8001502:	429a      	cmp	r2, r3
 8001504:	d34c      	bcc.n	80015a0 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8001506:	f7ff fcc3 	bl	8000e90 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	441a      	add	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2200      	movs	r2, #0
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	3b01      	subs	r3, #1
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	441a      	add	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	22ff      	movs	r2, #255	; 0xff
 8001552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d114      	bne.n	8001586 <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01a      	beq.n	800159a <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3310      	adds	r3, #16
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f8bf 	bl	80026ec <xTaskRemoveFromEventList>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d012      	beq.n	800159a <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <xQueueGenericReset+0x110>)
 8001576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	e009      	b.n	800159a <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3310      	adds	r3, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fac5 	bl	8000b1a <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3324      	adds	r3, #36	; 0x24
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fac0 	bl	8000b1a <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800159a:	f7ff fca7 	bl	8000eec <vPortExitCritical>
 800159e:	e001      	b.n	80015a4 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <xQueueGenericReset+0x106>
 80015aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ae:	f383 8811 	msr	BASEPRI, r3
 80015b2:	f3bf 8f6f 	isb	sy
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	e7fe      	b.n	80015bc <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80015be:	697b      	ldr	r3, [r7, #20]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	e000ed04 	.word	0xe000ed04

080015cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d02b      	beq.n	800163c <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d323      	bcc.n	800163c <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80015fc:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001600:	d81c      	bhi.n	800163c <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3350      	adds	r3, #80	; 0x50
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fd57 	bl	80010c4 <pvPortMalloc>
 8001616:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01b      	beq.n	8001656 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3350      	adds	r3, #80	; 0x50
 8001626:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f813 	bl	8001660 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800163a:	e00c      	b.n	8001656 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <xQueueGenericCreate+0x8a>
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	e7fe      	b.n	8001654 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001656:	69fb      	ldr	r3, [r7, #28]
    }
 8001658:	4618      	mov	r0, r3
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e002      	b.n	8001682 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800168e:	2101      	movs	r1, #1
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f7ff ff11 	bl	80014b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <xQueueGenericSend+0x30>
 80016c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	f3bf 8f6f 	isb	sy
 80016d0:	f3bf 8f4f 	dsb	sy
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d6:	e7fe      	b.n	80016d6 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <xQueueGenericSend+0x3e>
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <xQueueGenericSend+0x42>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <xQueueGenericSend+0x44>
 80016ea:	2300      	movs	r3, #0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <xQueueGenericSend+0x5c>
 80016f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	f3bf 8f6f 	isb	sy
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	e7fe      	b.n	8001702 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d103      	bne.n	8001712 <xQueueGenericSend+0x6a>
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <xQueueGenericSend+0x6e>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <xQueueGenericSend+0x70>
 8001716:	2300      	movs	r3, #0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <xQueueGenericSend+0x88>
 800171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	e7fe      	b.n	800172e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001730:	f001 f9e8 	bl	8002b04 <xTaskGetSchedulerState>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <xQueueGenericSend+0x98>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <xQueueGenericSend+0x9c>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <xQueueGenericSend+0x9e>
 8001744:	2300      	movs	r3, #0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <xQueueGenericSend+0xb6>
 800174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174e:	f383 8811 	msr	BASEPRI, r3
 8001752:	f3bf 8f6f 	isb	sy
 8001756:	f3bf 8f4f 	dsb	sy
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	e7fe      	b.n	800175c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800175e:	f7ff fb97 	bl	8000e90 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176a:	429a      	cmp	r2, r3
 800176c:	d302      	bcc.n	8001774 <xQueueGenericSend+0xcc>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d129      	bne.n	80017c8 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	68b9      	ldr	r1, [r7, #8]
 8001778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800177a:	f000 f96b 	bl	8001a54 <prvCopyDataToQueue>
 800177e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	3324      	adds	r3, #36	; 0x24
 800178c:	4618      	mov	r0, r3
 800178e:	f000 ffad 	bl	80026ec <xTaskRemoveFromEventList>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <xQueueGenericSend+0x1f0>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	e00a      	b.n	80017c0 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <xQueueGenericSend+0x1f0>)
 80017b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80017c0:	f7ff fb94 	bl	8000eec <vPortExitCritical>
                return pdPASS;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e063      	b.n	8001890 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80017ce:	f7ff fb8d 	bl	8000eec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e05c      	b.n	8001890 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 f859 	bl	8002898 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017ea:	f7ff fb7f 	bl	8000eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017ee:	f000 fc8d 	bl	800210c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017f2:	f7ff fb4d 	bl	8000e90 <vPortEnterCritical>
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001802:	d103      	bne.n	800180c <xQueueGenericSend+0x164>
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d103      	bne.n	8001822 <xQueueGenericSend+0x17a>
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001822:	f7ff fb63 	bl	8000eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001826:	1d3a      	adds	r2, r7, #4
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f848 	bl	80028c4 <xTaskCheckForTimeOut>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d124      	bne.n	8001884 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800183a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800183c:	f000 fa02 	bl	8001c44 <prvIsQueueFull>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d018      	beq.n	8001878 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001848:	3310      	adds	r3, #16
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fee4 	bl	800261c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001856:	f000 f98d 	bl	8001b74 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800185a:	f000 fc65 	bl	8002128 <xTaskResumeAll>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	f47f af7c 	bne.w	800175e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <xQueueGenericSend+0x1f0>)
 8001868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	e772      	b.n	800175e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800187a:	f000 f97b 	bl	8001b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800187e:	f000 fc53 	bl	8002128 <xTaskResumeAll>
 8001882:	e76c      	b.n	800175e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001886:	f000 f975 	bl	8001b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800188a:	f000 fc4d 	bl	8002128 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800188e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001890:	4618      	mov	r0, r3
 8001892:	3738      	adds	r7, #56	; 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <xQueueReceive+0x2e>
 80018b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	e7fe      	b.n	80018c8 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <xQueueReceive+0x3c>
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <xQueueReceive+0x40>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <xQueueReceive+0x42>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <xQueueReceive+0x5a>
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	e7fe      	b.n	80018f4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018f6:	f001 f905 	bl	8002b04 <xTaskGetSchedulerState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <xQueueReceive+0x6a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <xQueueReceive+0x6e>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <xQueueReceive+0x70>
 800190a:	2300      	movs	r3, #0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <xQueueReceive+0x88>
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e7fe      	b.n	8001922 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001924:	f7ff fab4 	bl	8000e90 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01f      	beq.n	8001974 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001938:	f000 f8f6 	bl	8001b28 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1e5a      	subs	r2, r3, #1
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00f      	beq.n	800196c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	3310      	adds	r3, #16
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fecb 	bl	80026ec <xTaskRemoveFromEventList>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <xQueueReceive+0x1b4>)
 800195e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800196c:	f7ff fabe 	bl	8000eec <vPortExitCritical>
                return pdPASS;
 8001970:	2301      	movs	r3, #1
 8001972:	e069      	b.n	8001a48 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800197a:	f7ff fab7 	bl	8000eec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800197e:	2300      	movs	r3, #0
 8001980:	e062      	b.n	8001a48 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d106      	bne.n	8001996 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4618      	mov	r0, r3
 800198e:	f000 ff83 	bl	8002898 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001992:	2301      	movs	r3, #1
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001996:	f7ff faa9 	bl	8000eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800199a:	f000 fbb7 	bl	800210c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800199e:	f7ff fa77 	bl	8000e90 <vPortEnterCritical>
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ae:	d103      	bne.n	80019b8 <xQueueReceive+0x11c>
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d103      	bne.n	80019ce <xQueueReceive+0x132>
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019ce:	f7ff fa8d 	bl	8000eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019d2:	1d3a      	adds	r2, r7, #4
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 ff72 	bl	80028c4 <xTaskCheckForTimeOut>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d123      	bne.n	8001a2e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019e8:	f000 f916 	bl	8001c18 <prvIsQueueEmpty>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d017      	beq.n	8001a22 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	3324      	adds	r3, #36	; 0x24
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fe0e 	bl	800261c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a02:	f000 f8b7 	bl	8001b74 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001a06:	f000 fb8f 	bl	8002128 <xTaskResumeAll>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d189      	bne.n	8001924 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <xQueueReceive+0x1b4>)
 8001a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	e780      	b.n	8001924 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a24:	f000 f8a6 	bl	8001b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001a28:	f000 fb7e 	bl	8002128 <xTaskResumeAll>
 8001a2c:	e77a      	b.n	8001924 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a30:	f000 f8a0 	bl	8001b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001a34:	f000 fb78 	bl	8002128 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a3a:	f000 f8ed 	bl	8001c18 <prvIsQueueEmpty>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f43f af6f 	beq.w	8001924 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001a46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	e000ed04 	.word	0xe000ed04

08001a54 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10d      	bne.n	8001a8e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d14d      	bne.n	8001b16 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 f85e 	bl	8002b40 <xTaskPriorityDisinherit>
 8001a84:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e043      	b.n	8001b16 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d119      	bne.n	8001ac8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6858      	ldr	r0, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	f002 fa50 	bl	8003f44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	441a      	add	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d32b      	bcc.n	8001b16 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e026      	b.n	8001b16 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68d8      	ldr	r0, [r3, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	f002 fa36 	bl	8003f44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	425b      	negs	r3, r3
 8001afe:	441a      	add	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d105      	bne.n	8001b16 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001b1e:	697b      	ldr	r3, [r7, #20]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d018      	beq.n	8001b6c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	441a      	add	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d303      	bcc.n	8001b5c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	461a      	mov	r2, r3
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f002 f9ec 	bl	8003f44 <memcpy>
    }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001b7c:	f7ff f988 	bl	8000e90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b86:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b88:	e011      	b.n	8001bae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3324      	adds	r3, #36	; 0x24
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fda8 	bl	80026ec <xTaskRemoveFromEventList>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001ba2:	f000 fef3 	bl	800298c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dce9      	bgt.n	8001b8a <prvUnlockQueue+0x16>
 8001bb6:	e000      	b.n	8001bba <prvUnlockQueue+0x46>
                        break;
 8001bb8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	22ff      	movs	r2, #255	; 0xff
 8001bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001bc2:	f7ff f993 	bl	8000eec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001bc6:	f7ff f963 	bl	8000e90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bd2:	e011      	b.n	8001bf8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3310      	adds	r3, #16
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fd83 	bl	80026ec <xTaskRemoveFromEventList>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001bec:	f000 fece 	bl	800298c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	dce9      	bgt.n	8001bd4 <prvUnlockQueue+0x60>
 8001c00:	e000      	b.n	8001c04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001c02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001c0c:	f7ff f96e 	bl	8000eec <vPortExitCritical>
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c20:	f7ff f936 	bl	8000e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e001      	b.n	8001c36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c36:	f7ff f959 	bl	8000eec <vPortExitCritical>

    return xReturn;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c4c:	f7ff f920 	bl	8000e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d102      	bne.n	8001c62 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e001      	b.n	8001c66 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c66:	f7ff f941 	bl	8000eec <vPortExitCritical>

    return xReturn;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <vQueueAddToRegistry+0x24>
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e7fe      	b.n	8001c96 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d024      	beq.n	8001cec <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e01e      	b.n	8001ce6 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <vQueueAddToRegistry+0x98>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d105      	bne.n	8001cc4 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <vQueueAddToRegistry+0x98>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
                    break;
 8001cc2:	e013      	b.n	8001cec <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <vQueueAddToRegistry+0x6c>
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <vQueueAddToRegistry+0x98>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <vQueueAddToRegistry+0x98>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d9dd      	bls.n	8001ca8 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20012f08 	.word	0x20012f08

08001d10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001d20:	f7ff f8b6 	bl	8000e90 <vPortEnterCritical>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d103      	bne.n	8001d3a <vQueueWaitForMessageRestricted+0x2a>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d46:	d103      	bne.n	8001d50 <vQueueWaitForMessageRestricted+0x40>
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d50:	f7ff f8cc 	bl	8000eec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3324      	adds	r3, #36	; 0x24
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fc7d 	bl	8002664 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff02 	bl	8001b74 <prvUnlockQueue>
    }
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af04      	add	r7, sp, #16
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff f999 	bl	80010c4 <pvPortMalloc>
 8001d92:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00e      	beq.n	8001db8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d9a:	2058      	movs	r0, #88	; 0x58
 8001d9c:	f7ff f992 	bl	80010c4 <pvPortMalloc>
 8001da0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	e005      	b.n	8001dbc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7ff fa65 	bl	8001280 <vPortFree>
 8001db6:	e001      	b.n	8001dbc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d013      	beq.n	8001dea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9303      	str	r3, [sp, #12]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f80e 	bl	8001dfa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001dde:	69f8      	ldr	r0, [r7, #28]
 8001de0:	f000 f8ae 	bl	8001f40 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	e002      	b.n	8001df0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001df0:	69bb      	ldr	r3, [r7, #24]
    }
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b088      	sub	sp, #32
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	461a      	mov	r2, r3
 8001e12:	21a5      	movs	r1, #165	; 0xa5
 8001e14:	f002 f8a1 	bl	8003f5a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e22:	3b01      	subs	r3, #1
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f023 0307 	bic.w	r3, r3, #7
 8001e30:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <prvInitialiseNewTask+0x56>
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e7fe      	b.n	8001e4e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01f      	beq.n	8001e96 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e012      	b.n	8001e82 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	7819      	ldrb	r1, [r3, #0]
 8001e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3334      	adds	r3, #52	; 0x34
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d9e9      	bls.n	8001e5c <prvInitialiseNewTask+0x62>
 8001e88:	e000      	b.n	8001e8c <prvInitialiseNewTask+0x92>
            {
                break;
 8001e8a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e94:	e003      	b.n	8001e9e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d909      	bls.n	8001eb8 <prvInitialiseNewTask+0xbe>
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e7fe      	b.n	8001eb6 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d901      	bls.n	8001ec2 <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ecc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fe3e 	bl	8000b5a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fe39 	bl	8000b5a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	f1c3 0205 	rsb	r2, r3, #5
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	3350      	adds	r3, #80	; 0x50
 8001f02:	2204      	movs	r2, #4
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 f827 	bl	8003f5a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	3354      	adds	r3, #84	; 0x54
 8001f10:	2201      	movs	r2, #1
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 f820 	bl	8003f5a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	69b8      	ldr	r0, [r7, #24]
 8001f20:	f7fe fe8c 	bl	8000c3c <pxPortInitialiseStack>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f34:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001f48:	f7fe ffa2 	bl	8000e90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <prvAddNewTaskToReadyList+0x110>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <prvAddNewTaskToReadyList+0x110>)
 8001f54:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <prvAddNewTaskToReadyList+0x114>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <prvAddNewTaskToReadyList+0x114>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <prvAddNewTaskToReadyList+0x110>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d110      	bne.n	8001f8e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001f6c:	f000 fd32 	bl	80029d4 <prvInitialiseTaskLists>
 8001f70:	e00d      	b.n	8001f8e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <prvAddNewTaskToReadyList+0x118>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <prvAddNewTaskToReadyList+0x114>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d802      	bhi.n	8001f8e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001f88:	4a32      	ldr	r2, [pc, #200]	; (8002054 <prvAddNewTaskToReadyList+0x114>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001f8e:	4b33      	ldr	r3, [pc, #204]	; (800205c <prvAddNewTaskToReadyList+0x11c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a31      	ldr	r2, [pc, #196]	; (800205c <prvAddNewTaskToReadyList+0x11c>)
 8001f96:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <prvAddNewTaskToReadyList+0x11c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <prvAddNewTaskToReadyList+0x120>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <prvAddNewTaskToReadyList+0x120>)
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb6:	492b      	ldr	r1, [pc, #172]	; (8002064 <prvAddNewTaskToReadyList+0x124>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	3204      	adds	r2, #4
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <prvAddNewTaskToReadyList+0x124>)
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <prvAddNewTaskToReadyList+0x124>)
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	4814      	ldr	r0, [pc, #80]	; (8002064 <prvAddNewTaskToReadyList+0x124>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4403      	add	r3, r0
 800201c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800201e:	f7fe ff65 	bl	8000eec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <prvAddNewTaskToReadyList+0x118>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00e      	beq.n	8002048 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <prvAddNewTaskToReadyList+0x114>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <prvAddNewTaskToReadyList+0x128>)
 800203a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20012e84 	.word	0x20012e84
 8002054:	20012dac 	.word	0x20012dac
 8002058:	20012e90 	.word	0x20012e90
 800205c:	20012ea0 	.word	0x20012ea0
 8002060:	20012e8c 	.word	0x20012e8c
 8002064:	20012db0 	.word	0x20012db0
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <vTaskStartScheduler+0x84>)
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2300      	movs	r3, #0
 800207c:	2282      	movs	r2, #130	; 0x82
 800207e:	491d      	ldr	r1, [pc, #116]	; (80020f4 <vTaskStartScheduler+0x88>)
 8002080:	481d      	ldr	r0, [pc, #116]	; (80020f8 <vTaskStartScheduler+0x8c>)
 8002082:	f7ff fe79 	bl	8001d78 <xTaskCreate>
 8002086:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800208e:	f001 f84d 	bl	800312c <xTimerCreateTimerTask>
 8002092:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <vTaskStartScheduler+0x5a>
 800209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <vTaskStartScheduler+0x90>)
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <vTaskStartScheduler+0x94>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <vTaskStartScheduler+0x98>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80020c0:	f7fe fe48 	bl	8000d54 <xPortStartScheduler>
 80020c4:	e00d      	b.n	80020e2 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d109      	bne.n	80020e2 <vTaskStartScheduler+0x76>
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	e7fe      	b.n	80020e0 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <vTaskStartScheduler+0x9c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20012ea8 	.word	0x20012ea8
 80020f4:	08003f84 	.word	0x08003f84
 80020f8:	080029a5 	.word	0x080029a5
 80020fc:	20012ea4 	.word	0x20012ea4
 8002100:	20012e90 	.word	0x20012e90
 8002104:	20012e88 	.word	0x20012e88
 8002108:	20000014 	.word	0x20000014

0800210c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <vTaskSuspendAll+0x18>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a03      	ldr	r2, [pc, #12]	; (8002124 <vTaskSuspendAll+0x18>)
 8002118:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20012eac 	.word	0x20012eac

08002128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <xTaskResumeAll+0x1d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <xTaskResumeAll+0x2a>
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	e7fe      	b.n	8002150 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002152:	f7fe fe9d 	bl	8000e90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002156:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <xTaskResumeAll+0x1d0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <xTaskResumeAll+0x1d0>)
 800215e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002160:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <xTaskResumeAll+0x1d0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 80c0 	bne.w	80022ea <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800216a:	4b64      	ldr	r3, [pc, #400]	; (80022fc <xTaskResumeAll+0x1d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80bb 	beq.w	80022ea <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002174:	e08a      	b.n	800228c <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <xTaskResumeAll+0x1d8>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	6a12      	ldr	r2, [r2, #32]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	69d2      	ldr	r2, [r2, #28]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3318      	adds	r3, #24
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d103      	bne.n	80021ac <xTaskResumeAll+0x84>
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	429a      	cmp	r2, r3
 80021e0:	d103      	bne.n	80021ea <xTaskResumeAll+0xc2>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <xTaskResumeAll+0x1dc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <xTaskResumeAll+0x1dc>)
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	493d      	ldr	r1, [pc, #244]	; (8002308 <xTaskResumeAll+0x1e0>)
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	3204      	adds	r2, #4
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	1d1a      	adds	r2, r3, #4
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <xTaskResumeAll+0x1e0>)
 8002250:	441a      	add	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	615a      	str	r2, [r3, #20]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	492b      	ldr	r1, [pc, #172]	; (8002308 <xTaskResumeAll+0x1e0>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <xTaskResumeAll+0x1e0>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <xTaskResumeAll+0x1e4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <xTaskResumeAll+0x1e8>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <xTaskResumeAll+0x1d8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f47f af70 	bne.w	8002176 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800229c:	f000 fc16 	bl	8002acc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <xTaskResumeAll+0x1ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80022ac:	f000 f846 	bl	800233c <xTaskIncrementTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <xTaskResumeAll+0x1e8>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3b01      	subs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f1      	bne.n	80022ac <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <xTaskResumeAll+0x1ec>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <xTaskResumeAll+0x1e8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <xTaskResumeAll+0x1f0>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80022ea:	f7fe fdff 	bl	8000eec <vPortExitCritical>

    return xAlreadyYielded;
 80022ee:	69bb      	ldr	r3, [r7, #24]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20012eac 	.word	0x20012eac
 80022fc:	20012e84 	.word	0x20012e84
 8002300:	20012e44 	.word	0x20012e44
 8002304:	20012e8c 	.word	0x20012e8c
 8002308:	20012db0 	.word	0x20012db0
 800230c:	20012dac 	.word	0x20012dac
 8002310:	20012e98 	.word	0x20012e98
 8002314:	20012e94 	.word	0x20012e94
 8002318:	e000ed04 	.word	0xe000ed04

0800231c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <xTaskGetTickCount+0x1c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20012e88 	.word	0x20012e88

0800233c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <xTaskIncrementTick+0x200>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80eb 	bne.w	8002526 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002350:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <xTaskIncrementTick+0x204>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002358:	4a79      	ldr	r2, [pc, #484]	; (8002540 <xTaskIncrementTick+0x204>)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11f      	bne.n	80023a4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002364:	4b77      	ldr	r3, [pc, #476]	; (8002544 <xTaskIncrementTick+0x208>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <xTaskIncrementTick+0x46>
 800236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e7fe      	b.n	8002380 <xTaskIncrementTick+0x44>
 8002382:	4b70      	ldr	r3, [pc, #448]	; (8002544 <xTaskIncrementTick+0x208>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <xTaskIncrementTick+0x20c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <xTaskIncrementTick+0x208>)
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4a6d      	ldr	r2, [pc, #436]	; (8002548 <xTaskIncrementTick+0x20c>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6d      	ldr	r3, [pc, #436]	; (800254c <xTaskIncrementTick+0x210>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	4a6b      	ldr	r2, [pc, #428]	; (800254c <xTaskIncrementTick+0x210>)
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	f000 fb94 	bl	8002acc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <xTaskIncrementTick+0x214>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	f0c0 80a6 	bcc.w	80024fc <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023b0:	4b64      	ldr	r3, [pc, #400]	; (8002544 <xTaskIncrementTick+0x208>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <xTaskIncrementTick+0x214>)
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	601a      	str	r2, [r3, #0]
                    break;
 80023c2:	e09b      	b.n	80024fc <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <xTaskIncrementTick+0x208>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d203      	bcs.n	80023e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80023dc:	4a5c      	ldr	r2, [pc, #368]	; (8002550 <xTaskIncrementTick+0x214>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80023e2:	e08b      	b.n	80024fc <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3304      	adds	r3, #4
 8002406:	429a      	cmp	r2, r3
 8002408:	d103      	bne.n	8002412 <xTaskIncrementTick+0xd6>
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01e      	beq.n	8002468 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	6a12      	ldr	r2, [r2, #32]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	69d2      	ldr	r2, [r2, #28]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	3318      	adds	r3, #24
 800244c:	429a      	cmp	r2, r3
 800244e:	d103      	bne.n	8002458 <xTaskIncrementTick+0x11c>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1e5a      	subs	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <xTaskIncrementTick+0x218>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	4a37      	ldr	r2, [pc, #220]	; (8002554 <xTaskIncrementTick+0x218>)
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	4936      	ldr	r1, [pc, #216]	; (8002558 <xTaskIncrementTick+0x21c>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3304      	adds	r3, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	3204      	adds	r2, #4
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1d1a      	adds	r2, r3, #4
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <xTaskIncrementTick+0x21c>)
 80024be:	441a      	add	r2, r3
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c8:	4923      	ldr	r1, [pc, #140]	; (8002558 <xTaskIncrementTick+0x21c>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	481f      	ldr	r0, [pc, #124]	; (8002558 <xTaskIncrementTick+0x21c>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <xTaskIncrementTick+0x220>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f4ff af5d 	bcc.w	80023b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fa:	e759      	b.n	80023b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <xTaskIncrementTick+0x220>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	4915      	ldr	r1, [pc, #84]	; (8002558 <xTaskIncrementTick+0x21c>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d901      	bls.n	8002518 <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <xTaskIncrementTick+0x224>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	e004      	b.n	8002530 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <xTaskIncrementTick+0x228>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <xTaskIncrementTick+0x228>)
 800252e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002532:	4618      	mov	r0, r3
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20012eac 	.word	0x20012eac
 8002540:	20012e88 	.word	0x20012e88
 8002544:	20012e3c 	.word	0x20012e3c
 8002548:	20012e40 	.word	0x20012e40
 800254c:	20012e9c 	.word	0x20012e9c
 8002550:	20012ea4 	.word	0x20012ea4
 8002554:	20012e8c 	.word	0x20012e8c
 8002558:	20012db0 	.word	0x20012db0
 800255c:	20012dac 	.word	0x20012dac
 8002560:	20012e98 	.word	0x20012e98
 8002564:	20012e94 	.word	0x20012e94

08002568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <vTaskSwitchContext+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <vTaskSwitchContext+0xa4>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800257c:	e03e      	b.n	80025fc <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <vTaskSwitchContext+0xa4>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <vTaskSwitchContext+0xa8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f1c3 031f 	rsb	r3, r3, #31
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	491e      	ldr	r1, [pc, #120]	; (8002614 <vTaskSwitchContext+0xac>)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <vTaskSwitchContext+0x5a>
        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e7fe      	b.n	80025c0 <vTaskSwitchContext+0x58>
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <vTaskSwitchContext+0xac>)
 80025ce:	4413      	add	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	3308      	adds	r3, #8
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d104      	bne.n	80025f2 <vTaskSwitchContext+0x8a>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <vTaskSwitchContext+0xb0>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	20012eac 	.word	0x20012eac
 800260c:	20012e98 	.word	0x20012e98
 8002610:	20012e8c 	.word	0x20012e8c
 8002614:	20012db0 	.word	0x20012db0
 8002618:	20012dac 	.word	0x20012dac

0800261c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <vTaskPlaceOnEventList+0x24>
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e7fe      	b.n	800263e <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <vTaskPlaceOnEventList+0x44>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3318      	adds	r3, #24
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe fa93 	bl	8000b74 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800264e:	2101      	movs	r1, #1
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f000 fceb 	bl	800302c <prvAddCurrentTaskToDelayedList>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20012dac 	.word	0x20012dac

08002664 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <vTaskPlaceOnEventListRestricted+0x26>
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e7fe      	b.n	8002688 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <vTaskPlaceOnEventListRestricted+0x84>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	61da      	str	r2, [r3, #28]
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <vTaskPlaceOnEventListRestricted+0x84>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	621a      	str	r2, [r3, #32]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <vTaskPlaceOnEventListRestricted+0x84>)
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	3218      	adds	r2, #24
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <vTaskPlaceOnEventListRestricted+0x84>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f103 0218 	add.w	r2, r3, #24
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <vTaskPlaceOnEventListRestricted+0x84>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68b8      	ldr	r0, [r7, #8]
 80026dc:	f000 fca6 	bl	800302c <prvAddCurrentTaskToDelayedList>
    }
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20012dac 	.word	0x20012dac

080026ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <xTaskRemoveFromEventList+0x2a>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e7fe      	b.n	8002714 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	6a12      	ldr	r2, [r2, #32]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	6a3a      	ldr	r2, [r7, #32]
 800272c:	69d2      	ldr	r2, [r2, #28]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	3318      	adds	r3, #24
 8002738:	429a      	cmp	r2, r3
 800273a:	d103      	bne.n	8002744 <xTaskRemoveFromEventList+0x58>
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002754:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <xTaskRemoveFromEventList+0x194>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d15e      	bne.n	800281a <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3304      	adds	r3, #4
 800277e:	429a      	cmp	r2, r3
 8002780:	d103      	bne.n	800278a <xTaskRemoveFromEventList+0x9e>
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2200      	movs	r2, #0
 800278e:	615a      	str	r2, [r3, #20]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	2201      	movs	r2, #1
 80027a0:	409a      	lsls	r2, r3
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <xTaskRemoveFromEventList+0x198>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	4a36      	ldr	r2, [pc, #216]	; (8002884 <xTaskRemoveFromEventList+0x198>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	4935      	ldr	r1, [pc, #212]	; (8002888 <xTaskRemoveFromEventList+0x19c>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	3204      	adds	r2, #4
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <xTaskRemoveFromEventList+0x19c>)
 80027f0:	441a      	add	r2, r3
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	615a      	str	r2, [r3, #20]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	4923      	ldr	r1, [pc, #140]	; (8002888 <xTaskRemoveFromEventList+0x19c>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	481f      	ldr	r0, [pc, #124]	; (8002888 <xTaskRemoveFromEventList+0x19c>)
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4403      	add	r3, r0
 8002816:	6019      	str	r1, [r3, #0]
 8002818:	e01b      	b.n	8002852 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <xTaskRemoveFromEventList+0x1a0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	61da      	str	r2, [r3, #28]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	6a3a      	ldr	r2, [r7, #32]
 8002834:	3218      	adds	r2, #24
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f103 0218 	add.w	r2, r3, #24
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <xTaskRemoveFromEventList+0x1a0>)
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <xTaskRemoveFromEventList+0x1a0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <xTaskRemoveFromEventList+0x1a0>)
 8002850:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <xTaskRemoveFromEventList+0x1a4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d905      	bls.n	800286c <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <xTaskRemoveFromEventList+0x1a8>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e001      	b.n	8002870 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002872:	4618      	mov	r0, r3
 8002874:	372c      	adds	r7, #44	; 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20012eac 	.word	0x20012eac
 8002884:	20012e8c 	.word	0x20012e8c
 8002888:	20012db0 	.word	0x20012db0
 800288c:	20012e44 	.word	0x20012e44
 8002890:	20012dac 	.word	0x20012dac
 8002894:	20012e98 	.word	0x20012e98

08002898 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <vTaskInternalSetTimeOutState+0x24>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <vTaskInternalSetTimeOutState+0x28>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	20012e9c 	.word	0x20012e9c
 80028c0:	20012e88 	.word	0x20012e88

080028c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <xTaskCheckForTimeOut+0x24>
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e7fe      	b.n	80028e6 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <xTaskCheckForTimeOut+0x3e>
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e7fe      	b.n	8002900 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002902:	f7fe fac5 	bl	8000e90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <xTaskCheckForTimeOut+0xc0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d102      	bne.n	8002926 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	e026      	b.n	8002974 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <xTaskCheckForTimeOut+0xc4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d00a      	beq.n	8002948 <xTaskCheckForTimeOut+0x84>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	429a      	cmp	r2, r3
 800293a:	d805      	bhi.n	8002948 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800293c:	2301      	movs	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e015      	b.n	8002974 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90b      	bls.n	800296a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad2      	subs	r2, r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff9a 	bl	8002898 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e004      	b.n	8002974 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002970:	2301      	movs	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002974:	f7fe faba 	bl	8000eec <vPortExitCritical>

    return xReturn;
 8002978:	69fb      	ldr	r3, [r7, #28]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20012e88 	.word	0x20012e88
 8002988:	20012e9c 	.word	0x20012e9c

0800298c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <vTaskMissedYield+0x14>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20012e98 	.word	0x20012e98

080029a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029ac:	f000 f852 	bl	8002a54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <prvIdleTask+0x28>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d9f9      	bls.n	80029ac <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <prvIdleTask+0x2c>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029c8:	e7f0      	b.n	80029ac <prvIdleTask+0x8>
 80029ca:	bf00      	nop
 80029cc:	20012db0 	.word	0x20012db0
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e00c      	b.n	80029fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <prvInitialiseTaskLists+0x60>)
 80029ec:	4413      	add	r3, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f893 	bl	8000b1a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d9ef      	bls.n	80029e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <prvInitialiseTaskLists+0x64>)
 8002a02:	f7fe f88a 	bl	8000b1a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <prvInitialiseTaskLists+0x68>)
 8002a08:	f7fe f887 	bl	8000b1a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <prvInitialiseTaskLists+0x6c>)
 8002a0e:	f7fe f884 	bl	8000b1a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a12:	480c      	ldr	r0, [pc, #48]	; (8002a44 <prvInitialiseTaskLists+0x70>)
 8002a14:	f7fe f881 	bl	8000b1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a18:	480b      	ldr	r0, [pc, #44]	; (8002a48 <prvInitialiseTaskLists+0x74>)
 8002a1a:	f7fe f87e 	bl	8000b1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <prvInitialiseTaskLists+0x78>)
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <prvInitialiseTaskLists+0x64>)
 8002a22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <prvInitialiseTaskLists+0x7c>)
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <prvInitialiseTaskLists+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20012db0 	.word	0x20012db0
 8002a38:	20012e14 	.word	0x20012e14
 8002a3c:	20012e28 	.word	0x20012e28
 8002a40:	20012e44 	.word	0x20012e44
 8002a44:	20012e58 	.word	0x20012e58
 8002a48:	20012e70 	.word	0x20012e70
 8002a4c:	20012e3c 	.word	0x20012e3c
 8002a50:	20012e40 	.word	0x20012e40

08002a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a5a:	e019      	b.n	8002a90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a5c:	f7fe fa18 	bl	8000e90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <prvCheckTasksWaitingTermination+0x4c>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe f8ba 	bl	8000be6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <prvCheckTasksWaitingTermination+0x50>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <prvCheckTasksWaitingTermination+0x50>)
 8002a7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <prvCheckTasksWaitingTermination+0x54>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <prvCheckTasksWaitingTermination+0x54>)
 8002a84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a86:	f7fe fa31 	bl	8000eec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f80e 	bl	8002aac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <prvCheckTasksWaitingTermination+0x54>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e1      	bne.n	8002a5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20012e58 	.word	0x20012e58
 8002aa4:	20012e84 	.word	0x20012e84
 8002aa8:	20012e6c 	.word	0x20012e6c

08002aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fbe1 	bl	8001280 <vPortFree>
                vPortFree( pxTCB );
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fbde 	bl	8001280 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <prvResetNextTaskUnblockTime+0x30>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <prvResetNextTaskUnblockTime+0x34>)
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ae2:	e005      	b.n	8002af0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <prvResetNextTaskUnblockTime+0x30>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <prvResetNextTaskUnblockTime+0x34>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20012e3c 	.word	0x20012e3c
 8002b00:	20012ea4 	.word	0x20012ea4

08002b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <xTaskGetSchedulerState+0x34>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002b12:	2301      	movs	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e008      	b.n	8002b2a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <xTaskGetSchedulerState+0x38>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002b20:	2302      	movs	r3, #2
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	e001      	b.n	8002b2a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002b2a:	687b      	ldr	r3, [r7, #4]
    }
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20012e90 	.word	0x20012e90
 8002b3c:	20012eac 	.word	0x20012eac

08002b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 808a 	beq.w	8002c6c <xTaskPriorityDisinherit+0x12c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <xTaskPriorityDisinherit+0x138>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d009      	beq.n	8002b76 <xTaskPriorityDisinherit+0x36>
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	e7fe      	b.n	8002b74 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <xTaskPriorityDisinherit+0x52>
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e7fe      	b.n	8002b90 <xTaskPriorityDisinherit+0x50>
            ( pxTCB->uxMutexesHeld )--;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d061      	beq.n	8002c6c <xTaskPriorityDisinherit+0x12c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d15d      	bne.n	8002c6c <xTaskPriorityDisinherit+0x12c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe f816 	bl	8000be6 <uxListRemove>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xTaskPriorityDisinherit+0x96>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <xTaskPriorityDisinherit+0x13c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <xTaskPriorityDisinherit+0x13c>)
 8002bd4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f1c3 0205 	rsb	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	2201      	movs	r2, #1
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <xTaskPriorityDisinherit+0x13c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <xTaskPriorityDisinherit+0x13c>)
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <xTaskPriorityDisinherit+0x140>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	3204      	adds	r2, #4
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1d1a      	adds	r2, r3, #4
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <xTaskPriorityDisinherit+0x140>)
 8002c40:	441a      	add	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <xTaskPriorityDisinherit+0x140>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	1c59      	adds	r1, r3, #1
 8002c5a:	4809      	ldr	r0, [pc, #36]	; (8002c80 <xTaskPriorityDisinherit+0x140>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
    }
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20012dac 	.word	0x20012dac
 8002c7c:	20012e8c 	.word	0x20012e8c
 8002c80:	20012db0 	.word	0x20012db0

08002c84 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <xTaskGenericNotifyWait+0x28>
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e7fe      	b.n	8002caa <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8002cac:	f7fe f8f0 	bl	8000e90 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3354      	adds	r3, #84	; 0x54
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d022      	beq.n	8002d08 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	3214      	adds	r2, #20
 8002cca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	43d2      	mvns	r2, r2
 8002cd2:	4011      	ands	r1, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	3214      	adds	r2, #20
 8002cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002cdc:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3354      	adds	r3, #84	; 0x54
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	6a38      	ldr	r0, [r7, #32]
 8002cf4:	f000 f99a 	bl	800302c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <xTaskGenericNotifyWait+0xf8>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d08:	f7fe f8f0 	bl	8000eec <vPortExitCritical>

        taskENTER_CRITICAL();
 8002d0c:	f7fe f8c0 	bl	8000e90 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	3214      	adds	r2, #20
 8002d1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3354      	adds	r3, #84	; 0x54
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d002      	beq.n	8002d3e <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00e      	b.n	8002d5c <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	3214      	adds	r2, #20
 8002d46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	43d2      	mvns	r2, r2
 8002d4e:	4011      	ands	r1, r2
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	3214      	adds	r2, #20
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <xTaskGenericNotifyWait+0xf4>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	3354      	adds	r3, #84	; 0x54
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002d6a:	f7fe f8bf 	bl	8000eec <vPortExitCritical>

        return xReturn;
 8002d6e:	697b      	ldr	r3, [r7, #20]
    }
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20012dac 	.word	0x20012dac
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b092      	sub	sp, #72	; 0x48
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <xTaskGenericNotifyFromISR+0x2c>
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002daa:	e7fe      	b.n	8002daa <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <xTaskGenericNotifyFromISR+0x46>
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	e7fe      	b.n	8002dc4 <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dc6:	f7fe f93f 	bl	8001048 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8002dce:	f3ef 8211 	mrs	r2, BASEPRI
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	623a      	str	r2, [r7, #32]
 8002de4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8002de6:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8002dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	3214      	adds	r2, #20
 8002df6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4413      	add	r3, r2
 8002e04:	3354      	adds	r3, #84	; 0x54
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	3354      	adds	r3, #84	; 0x54
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d83b      	bhi.n	8002e96 <xTaskGenericNotifyFromISR+0x116>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <xTaskGenericNotifyFromISR+0xa4>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002eb3 	.word	0x08002eb3
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e7b 	.word	0x08002e7b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	3214      	adds	r2, #20
 8002e3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	3214      	adds	r2, #20
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e52:	e031      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	3214      	adds	r2, #20
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	3214      	adds	r2, #20
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e6a:	e025      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	3214      	adds	r2, #20
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e78:	e01e      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002e7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d006      	beq.n	8002e90 <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	3214      	adds	r2, #20
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002e8e:	e013      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8002e94:	e010      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002e96:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <xTaskGenericNotifyFromISR+0x290>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e7fe      	b.n	8002eb0 <xTaskGenericNotifyFromISR+0x130>
                    break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x138>
                    break;
 8002eb6:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002eb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 809d 	bne.w	8002ffc <xTaskGenericNotifyFromISR+0x27c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <xTaskGenericNotifyFromISR+0x15e>
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e7fe      	b.n	8002edc <xTaskGenericNotifyFromISR+0x15c>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <xTaskGenericNotifyFromISR+0x294>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d15e      	bne.n	8002fa4 <xTaskGenericNotifyFromISR+0x224>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ef2:	68d2      	ldr	r2, [r2, #12]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f06:	3304      	adds	r3, #4
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d103      	bne.n	8002f14 <xTaskGenericNotifyFromISR+0x194>
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <xTaskGenericNotifyFromISR+0x298>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <xTaskGenericNotifyFromISR+0x298>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4938      	ldr	r1, [pc, #224]	; (800301c <xTaskGenericNotifyFromISR+0x29c>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3304      	adds	r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f60:	3204      	adds	r2, #4
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f66:	1d1a      	adds	r2, r3, #4
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <xTaskGenericNotifyFromISR+0x29c>)
 8002f7a:	441a      	add	r2, r3
 8002f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7e:	615a      	str	r2, [r3, #20]
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	4925      	ldr	r1, [pc, #148]	; (800301c <xTaskGenericNotifyFromISR+0x29c>)
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	4821      	ldr	r0, [pc, #132]	; (800301c <xTaskGenericNotifyFromISR+0x29c>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4403      	add	r3, r0
 8002fa0:	6019      	str	r1, [r3, #0]
 8002fa2:	e01b      	b.n	8002fdc <xTaskGenericNotifyFromISR+0x25c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <xTaskGenericNotifyFromISR+0x2a0>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	61da      	str	r2, [r3, #28]
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb6:	621a      	str	r2, [r3, #32]
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fbe:	3218      	adds	r2, #24
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc4:	f103 0218 	add.w	r2, r3, #24
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	4a14      	ldr	r2, [pc, #80]	; (8003020 <xTaskGenericNotifyFromISR+0x2a0>)
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <xTaskGenericNotifyFromISR+0x2a0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <xTaskGenericNotifyFromISR+0x2a0>)
 8002fda:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <xTaskGenericNotifyFromISR+0x2a4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d908      	bls.n	8002ffc <xTaskGenericNotifyFromISR+0x27c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <xTaskGenericNotifyFromISR+0x276>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <xTaskGenericNotifyFromISR+0x2a8>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003008:	4618      	mov	r0, r3
 800300a:	3748      	adds	r7, #72	; 0x48
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20012e88 	.word	0x20012e88
 8003014:	20012eac 	.word	0x20012eac
 8003018:	20012e8c 	.word	0x20012e8c
 800301c:	20012db0 	.word	0x20012db0
 8003020:	20012e44 	.word	0x20012e44
 8003024:	20012dac 	.word	0x20012dac
 8003028:	20012e98 	.word	0x20012e98

0800302c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fdcf 	bl	8000be6 <uxListRemove>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <prvAddCurrentTaskToDelayedList+0xec>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4013      	ands	r3, r2
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <prvAddCurrentTaskToDelayedList+0xec>)
 8003064:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d124      	bne.n	80030b8 <prvAddCurrentTaskToDelayedList+0x8c>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d021      	beq.n	80030b8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	6892      	ldr	r2, [r2, #8]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a20      	ldr	r2, [pc, #128]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	3204      	adds	r2, #4
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1d1a      	adds	r2, r3, #4
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <prvAddCurrentTaskToDelayedList+0xf0>)
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <prvAddCurrentTaskToDelayedList+0xf0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	4a1a      	ldr	r2, [pc, #104]	; (800311c <prvAddCurrentTaskToDelayedList+0xf0>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80030b6:	e026      	b.n	8003106 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d209      	bcs.n	80030e4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <prvAddCurrentTaskToDelayedList+0xf4>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7fd fd49 	bl	8000b74 <vListInsert>
}
 80030e2:	e010      	b.n	8003106 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <prvAddCurrentTaskToDelayedList+0xf8>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fd fd3f 	bl	8000b74 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <prvAddCurrentTaskToDelayedList+0xfc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d202      	bcs.n	8003106 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6013      	str	r3, [r2, #0]
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20012e88 	.word	0x20012e88
 8003114:	20012dac 	.word	0x20012dac
 8003118:	20012e8c 	.word	0x20012e8c
 800311c:	20012e70 	.word	0x20012e70
 8003120:	20012e40 	.word	0x20012e40
 8003124:	20012e3c 	.word	0x20012e3c
 8003128:	20012ea4 	.word	0x20012ea4

0800312c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003136:	f000 fa43 	bl	80035c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <xTimerCreateTimerTask+0x54>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xTimerCreateTimerTask+0x58>)
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003150:	490d      	ldr	r1, [pc, #52]	; (8003188 <xTimerCreateTimerTask+0x5c>)
 8003152:	480e      	ldr	r0, [pc, #56]	; (800318c <xTimerCreateTimerTask+0x60>)
 8003154:	f7fe fe10 	bl	8001d78 <xTaskCreate>
 8003158:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	e7fe      	b.n	8003172 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003174:	687b      	ldr	r3, [r7, #4]
    }
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20012ee0 	.word	0x20012ee0
 8003184:	20012ee4 	.word	0x20012ee4
 8003188:	08003f8c 	.word	0x08003f8c
 800318c:	08003231 	.word	0x08003231

08003190 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800319c:	e008      	b.n	80031b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4413      	add	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	18d1      	adds	r1, r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f8db 	bl	8003378 <prvInsertTimerInActiveList>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ea      	bne.n	800319e <prvReloadTimer+0xe>
        }
    }
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <prvProcessExpiredTimer+0x5c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fcfc 	bl	8000be6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff ffc5 	bl	8003190 <prvReloadTimer>
 8003206:	e008      	b.n	800321a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	4798      	blx	r3
    }
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20012ed8 	.word	0x20012ed8

08003230 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f857 	bl	80032f0 <prvGetNextExpireTime>
 8003242:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4619      	mov	r1, r3
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f803 	bl	8003254 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800324e:	f000 f8d5 	bl	80033fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003252:	e7f1      	b.n	8003238 <prvTimerTask+0x8>

08003254 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800325e:	f7fe ff55 	bl	800210c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f866 	bl	8003338 <prvSampleTimeNow>
 800326c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d130      	bne.n	80032d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <prvProcessTimerOrBlockTask+0x3c>
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	d806      	bhi.n	8003290 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003282:	f7fe ff51 	bl	8002128 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ffa1 	bl	80031d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800328e:	e024      	b.n	80032da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <prvProcessTimerOrBlockTask+0x90>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <prvProcessTimerOrBlockTask+0x50>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <prvProcessTimerOrBlockTask+0x52>
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <prvProcessTimerOrBlockTask+0x94>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7fe fd2b 	bl	8001d10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80032ba:	f7fe ff35 	bl	8002128 <xTaskResumeAll>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <prvProcessTimerOrBlockTask+0x98>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
    }
 80032d4:	e001      	b.n	80032da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80032d6:	f7fe ff27 	bl	8002128 <xTaskResumeAll>
    }
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20012edc 	.word	0x20012edc
 80032e8:	20012ee0 	.word	0x20012ee0
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <prvGetNextExpireTime+0x44>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <prvGetNextExpireTime+0x16>
 8003302:	2201      	movs	r2, #1
 8003304:	e000      	b.n	8003308 <prvGetNextExpireTime+0x18>
 8003306:	2200      	movs	r2, #0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <prvGetNextExpireTime+0x44>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e001      	b.n	8003324 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003324:	68fb      	ldr	r3, [r7, #12]
    }
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20012ed8 	.word	0x20012ed8

08003338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003340:	f7fe ffec 	bl	800231c <xTaskGetTickCount>
 8003344:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <prvSampleTimeNow+0x3c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d205      	bcs.n	800335c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003350:	f000 f910 	bl	8003574 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e002      	b.n	8003362 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <prvSampleTimeNow+0x3c>)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003368:	68fb      	ldr	r3, [r7, #12]
    }
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20012ee8 	.word	0x20012ee8

08003378 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d812      	bhi.n	80033c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	1ad2      	subs	r2, r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e01b      	b.n	80033ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <prvInsertTimerInActiveList+0x7c>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	4610      	mov	r0, r2
 80033be:	f7fd fbd9 	bl	8000b74 <vListInsert>
 80033c2:	e012      	b.n	80033ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d206      	bcs.n	80033da <prvInsertTimerInActiveList+0x62>
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e007      	b.n	80033ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <prvInsertTimerInActiveList+0x80>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7fd fbc5 	bl	8000b74 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80033ea:	697b      	ldr	r3, [r7, #20]
    }
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20012edc 	.word	0x20012edc
 80033f8:	20012ed8 	.word	0x20012ed8

080033fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003402:	e0a5      	b.n	8003550 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f2c0 80a2 	blt.w	8003550 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3304      	adds	r3, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fbe2 	bl	8000be6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff87 	bl	8003338 <prvSampleTimeNow>
 800342a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3b01      	subs	r3, #1
 8003430:	2b08      	cmp	r3, #8
 8003432:	f200 808c 	bhi.w	800354e <prvProcessReceivedCommands+0x152>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <prvProcessReceivedCommands+0x40>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003461 	.word	0x08003461
 8003440:	08003461 	.word	0x08003461
 8003444:	080034c9 	.word	0x080034c9
 8003448:	080034dd 	.word	0x080034dd
 800344c:	08003525 	.word	0x08003525
 8003450:	08003461 	.word	0x08003461
 8003454:	08003461 	.word	0x08003461
 8003458:	080034c9 	.word	0x080034c9
 800345c:	080034dd 	.word	0x080034dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	18d1      	adds	r1, r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	69f8      	ldr	r0, [r7, #28]
 8003480:	f7ff ff7a 	bl	8003378 <prvInsertTimerInActiveList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d062      	beq.n	8003550 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4619      	mov	r1, r3
 80034a4:	69f8      	ldr	r0, [r7, #28]
 80034a6:	f7ff fe73 	bl	8003190 <prvReloadTimer>
 80034aa:	e008      	b.n	80034be <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	69f8      	ldr	r0, [r7, #28]
 80034c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80034c6:	e043      	b.n	8003550 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80034da:	e039      	b.n	8003550 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <prvProcessReceivedCommands+0x114>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e7fe      	b.n	800350e <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	18d1      	adds	r1, r2, r3
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	69f8      	ldr	r0, [r7, #28]
 800351e:	f7ff ff2b 	bl	8003378 <prvInsertTimerInActiveList>
                        break;
 8003522:	e015      	b.n	8003550 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8003532:	69f8      	ldr	r0, [r7, #28]
 8003534:	f7fd fea4 	bl	8001280 <vPortFree>
 8003538:	e00a      	b.n	8003550 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800354c:	e000      	b.n	8003550 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 800354e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <prvProcessReceivedCommands+0x174>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f107 0108 	add.w	r1, r7, #8
 8003558:	2200      	movs	r2, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe f99e 	bl	800189c <xQueueReceive>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f47f af4e 	bne.w	8003404 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003568:	bf00      	nop
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20012ee0 	.word	0x20012ee0

08003574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800357a:	e009      	b.n	8003590 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <prvSwitchTimerLists+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003586:	f04f 31ff 	mov.w	r1, #4294967295
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fe20 	bl	80031d0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <prvSwitchTimerLists+0x44>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <prvSwitchTimerLists+0x44>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <prvSwitchTimerLists+0x48>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <prvSwitchTimerLists+0x44>)
 80035a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <prvSwitchTimerLists+0x48>)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6013      	str	r3, [r2, #0]
    }
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20012ed8 	.word	0x20012ed8
 80035bc:	20012edc 	.word	0x20012edc

080035c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80035c4:	f7fd fc64 	bl	8000e90 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <prvCheckForValidListAndQueue+0x54>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11d      	bne.n	800360c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80035d0:	4811      	ldr	r0, [pc, #68]	; (8003618 <prvCheckForValidListAndQueue+0x58>)
 80035d2:	f7fd faa2 	bl	8000b1a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035d6:	4811      	ldr	r0, [pc, #68]	; (800361c <prvCheckForValidListAndQueue+0x5c>)
 80035d8:	f7fd fa9f 	bl	8000b1a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <prvCheckForValidListAndQueue+0x60>)
 80035de:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <prvCheckForValidListAndQueue+0x58>)
 80035e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <prvCheckForValidListAndQueue+0x64>)
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <prvCheckForValidListAndQueue+0x5c>)
 80035e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035e8:	2200      	movs	r2, #0
 80035ea:	210c      	movs	r1, #12
 80035ec:	200a      	movs	r0, #10
 80035ee:	f7fd ffed 	bl	80015cc <xQueueGenericCreate>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <prvCheckForValidListAndQueue+0x54>)
 80035f6:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <prvCheckForValidListAndQueue+0x54>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <prvCheckForValidListAndQueue+0x54>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4908      	ldr	r1, [pc, #32]	; (8003628 <prvCheckForValidListAndQueue+0x68>)
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fb34 	bl	8001c74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800360c:	f7fd fc6e 	bl	8000eec <vPortExitCritical>
    }
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20012ee0 	.word	0x20012ee0
 8003618:	20012eb0 	.word	0x20012eb0
 800361c:	20012ec4 	.word	0x20012ec4
 8003620:	20012ed8 	.word	0x20012ed8
 8003624:	20012edc 	.word	0x20012edc
 8003628:	08003f94 	.word	0x08003f94

0800362c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003630:	4b38      	ldr	r3, [pc, #224]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b38      	ldr	r3, [pc, #224]	; (8003718 <Audio_MAL_IRQHandler+0xec>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f7fc fe78 	bl	8000330 <DMA_GetFlagStatus>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d064      	beq.n	8003710 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8003646:	4b35      	ldr	r3, [pc, #212]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04c      	beq.n	80036e8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800364e:	bf00      	nop
 8003650:	4b30      	ldr	r3, [pc, #192]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc fe53 	bl	8000300 <DMA_GetCmdStatus>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f7      	bne.n	8003650 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <Audio_MAL_IRQHandler+0xec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7fc fe9c 	bl	80003a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <Audio_MAL_IRQHandler+0xf4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <Audio_MAL_IRQHandler+0xf8>)
 8003678:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003682:	4293      	cmp	r3, r2
 8003684:	bf28      	it	cs
 8003686:	4613      	movcs	r3, r2
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <Audio_MAL_IRQHandler+0xf8>)
 800368a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4924      	ldr	r1, [pc, #144]	; (8003724 <Audio_MAL_IRQHandler+0xf8>)
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc fdc0 	bl	8000218 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc fe12 	bl	80002c8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <Audio_MAL_IRQHandler+0xf4>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d203      	bcs.n	80036ba <Audio_MAL_IRQHandler+0x8e>
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	e000      	b.n	80036bc <Audio_MAL_IRQHandler+0x90>
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <Audio_MAL_IRQHandler+0xfc>)
 80036bc:	4413      	add	r3, r2
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <Audio_MAL_IRQHandler+0xf4>)
 80036c0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036ce:	428b      	cmp	r3, r1
 80036d0:	bf28      	it	cs
 80036d2:	460b      	movcs	r3, r1
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <Audio_MAL_IRQHandler+0xf0>)
 80036d8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc fdf1 	bl	80002c8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80036e6:	e013      	b.n	8003710 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc fdea 	bl	80002c8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <Audio_MAL_IRQHandler+0xe8>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <Audio_MAL_IRQHandler+0xec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7fc fe52 	bl	80003a8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <Audio_MAL_IRQHandler+0xf4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa7a 	bl	8003c04 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000020 	.word	0x20000020
 8003718:	20000024 	.word	0x20000024
 800371c:	20000018 	.word	0x20000018
 8003720:	20012f48 	.word	0x20012f48
 8003724:	20012f88 	.word	0x20012f88
 8003728:	0001fffe 	.word	0x0001fffe

0800372c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003730:	f7ff ff7c 	bl	800362c <Audio_MAL_IRQHandler>
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}

08003738 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800373c:	f7ff ff76 	bl	800362c <Audio_MAL_IRQHandler>
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003748:	2102      	movs	r1, #2
 800374a:	480d      	ldr	r0, [pc, #52]	; (8003780 <SPI3_IRQHandler+0x3c>)
 800374c:	f7fd f857 	bl	80007fe <SPI_I2S_GetFlagStatus>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d011      	beq.n	800377a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <SPI3_IRQHandler+0x40>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d106      	bne.n	800376c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800375e:	f000 fa5c 	bl	8003c1a <EVAL_AUDIO_GetSampleCallBack>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	2004      	movs	r0, #4
 8003768:	f7fc fd3a 	bl	80001e0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800376c:	f000 fa55 	bl	8003c1a <EVAL_AUDIO_GetSampleCallBack>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <SPI3_IRQHandler+0x3c>)
 8003776:	f7fd f833 	bl	80007e0 <SPI_I2S_SendData>
  }
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40003c00 	.word	0x40003c00
 8003784:	2000001c 	.word	0x2000001c

08003788 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003792:	4909      	ldr	r1, [pc, #36]	; (80037b8 <NVIC_EnableIRQ+0x30>)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	79fa      	ldrb	r2, [r7, #7]
 800379c:	f002 021f 	and.w	r2, r2, #31
 80037a0:	2001      	movs	r0, #1
 80037a2:	fa00 f202 	lsl.w	r2, r0, r2
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100

080037bc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da0b      	bge.n	80037e8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80037d0:	490d      	ldr	r1, [pc, #52]	; (8003808 <NVIC_SetPriority+0x4c>)
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	3b04      	subs	r3, #4
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80037e6:	e009      	b.n	80037fc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80037e8:	4908      	ldr	r1, [pc, #32]	; (800380c <NVIC_SetPriority+0x50>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00
 800380c:	e000e100 	.word	0xe000e100

08003810 <USART2_IRQHandler>:
uint8_t GetCommandCode(uint8_t *buffer);

uint8_t command_buffer[20];
uint8_t command_length = 0;

void USART2_IRQHandler(void){
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af02      	add	r7, sp, #8

	uint8_t rx_karakter;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	603b      	str	r3, [r7, #0]

	if(USART_GetFlagStatus(USART2,USART_FLAG_RXNE)){
 800381a:	2120      	movs	r1, #32
 800381c:	4821      	ldr	r0, [pc, #132]	; (80038a4 <USART2_IRQHandler+0x94>)
 800381e:	f7fd f94f 	bl	8000ac0 <USART_GetFlagStatus>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02e      	beq.n	8003886 <USART2_IRQHandler+0x76>

		rx_karakter = USART_ReceiveData(USART2);
 8003828:	481e      	ldr	r0, [pc, #120]	; (80038a4 <USART2_IRQHandler+0x94>)
 800382a:	f7fd f8f1 	bl	8000a10 <USART_ReceiveData>
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]

		command_buffer[command_length++] = rx_karakter & 0xFF;
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <USART2_IRQHandler+0x98>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	b2d1      	uxtb	r1, r2
 800383a:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <USART2_IRQHandler+0x98>)
 800383c:	7011      	strb	r1, [r2, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <USART2_IRQHandler+0x9c>)
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	5453      	strb	r3, [r2, r1]

		if(rx_karakter == 10){
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2b0a      	cmp	r3, #10
 800384a:	d118      	bne.n	800387e <USART2_IRQHandler+0x6e>

			command_length = 0;
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <USART2_IRQHandler+0x98>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]

			xTaskNotifyFromISR(Task1MenuDisplayHandle , 0 ,eNoAction , &xHigherPriorityTaskWoken);
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <USART2_IRQHandler+0xa0>)
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	463b      	mov	r3, r7
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2300      	movs	r3, #0
 8003860:	2200      	movs	r2, #0
 8003862:	2100      	movs	r1, #0
 8003864:	f7ff fa8c 	bl	8002d80 <xTaskGenericNotifyFromISR>
			xTaskNotifyFromISR(Task2CommandHandle , 0 , eNoAction , &xHigherPriorityTaskWoken);
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <USART2_IRQHandler+0xa4>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	463b      	mov	r3, r7
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	2300      	movs	r3, #0
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	f7ff fa81 	bl	8002d80 <xTaskGenericNotifyFromISR>

		}

		USART_ClearFlag(USART2,USART_FLAG_RXNE);
 800387e:	2120      	movs	r1, #32
 8003880:	4808      	ldr	r0, [pc, #32]	; (80038a4 <USART2_IRQHandler+0x94>)
 8003882:	f7fd f939 	bl	8000af8 <USART_ClearFlag>
	}

	if(xHigherPriorityTaskWoken == pdTRUE){
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <USART2_IRQHandler+0x8c>

		taskYIELD();
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <USART2_IRQHandler+0xa8>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
	}

}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40004400 	.word	0x40004400
 80038a8:	20012f04 	.word	0x20012f04
 80038ac:	20013028 	.word	0x20013028
 80038b0:	20012eec 	.word	0x20012eec
 80038b4:	20012ef0 	.word	0x20012ef0
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <printMessage>:

void printMessage(char *message){
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

	for(int i=0; i< strlen(message);i++){
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e013      	b.n	80038f2 <printMessage+0x36>

		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
 80038ca:	bf00      	nop
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	480e      	ldr	r0, [pc, #56]	; (8003908 <printMessage+0x4c>)
 80038d0:	f7fd f8f6 	bl	8000ac0 <USART_GetFlagStatus>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d1f8      	bne.n	80038cc <printMessage+0x10>
		USART_SendData(USART2,message[i]);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	4808      	ldr	r0, [pc, #32]	; (8003908 <printMessage+0x4c>)
 80038e8:	f7fd f880 	bl	80009ec <USART_SendData>
	for(int i=0; i< strlen(message);i++){
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fc fc6c 	bl	80001d0 <strlen>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8e4      	bhi.n	80038ca <printMessage+0xe>
	}
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40004400 	.word	0x40004400

0800390c <main>:

}APP_COMMAND_t;


int main(void)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af02      	add	r7, sp, #8

	RCC_DeInit();
 8003912:	f7fc fe4f 	bl	80005b4 <RCC_DeInit>

	SystemCoreClockUpdate();
 8003916:	f000 f9f9 	bl	8003d0c <SystemCoreClockUpdate>

	Sys_Config();
 800391a:	f000 f8f3 	bl	8003b04 <Sys_Config>

	Uart_Write_Queue = xQueueCreate(10 , sizeof(char *));
 800391e:	2200      	movs	r2, #0
 8003920:	2104      	movs	r1, #4
 8003922:	200a      	movs	r0, #10
 8003924:	f7fd fe52 	bl	80015cc <xQueueGenericCreate>
 8003928:	4602      	mov	r2, r0
 800392a:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <main+0xf4>)
 800392c:	601a      	str	r2, [r3, #0]
	Command_Queue = xQueueCreate(10 , sizeof(APP_COMMAND_t *));
 800392e:	2200      	movs	r2, #0
 8003930:	2104      	movs	r1, #4
 8003932:	200a      	movs	r0, #10
 8003934:	f7fd fe4a 	bl	80015cc <xQueueGenericCreate>
 8003938:	4602      	mov	r2, r0
 800393a:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <main+0xf8>)
 800393c:	601a      	str	r2, [r3, #0]

	if((Uart_Write_Queue != NULL ) && (Command_Queue != NULL)){
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <main+0xf4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d047      	beq.n	80039d6 <main+0xca>
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <main+0xf8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d043      	beq.n	80039d6 <main+0xca>

		sprintf(mymessage, "Queue creation succesfull. \r \n");
 800394e:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <main+0xfc>)
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <main+0x100>)
 8003952:	4615      	mov	r5, r2
 8003954:	461c      	mov	r4, r3
 8003956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003958:	6028      	str	r0, [r5, #0]
 800395a:	6069      	str	r1, [r5, #4]
 800395c:	60aa      	str	r2, [r5, #8]
 800395e:	60eb      	str	r3, [r5, #12]
 8003960:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003962:	6128      	str	r0, [r5, #16]
 8003964:	6169      	str	r1, [r5, #20]
 8003966:	61aa      	str	r2, [r5, #24]
 8003968:	8823      	ldrh	r3, [r4, #0]
 800396a:	78a2      	ldrb	r2, [r4, #2]
 800396c:	83ab      	strh	r3, [r5, #28]
 800396e:	4613      	mov	r3, r2
 8003970:	77ab      	strb	r3, [r5, #30]
		printMessage(mymessage);
 8003972:	4825      	ldr	r0, [pc, #148]	; (8003a08 <main+0xfc>)
 8003974:	f7ff ffa2 	bl	80038bc <printMessage>

		xTaskCreate(Task1MenuDisplay , "Task1MenuDisplay" , 500 , NULL , 2 , &Task1MenuDisplayHandle);
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <main+0x104>)
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2302      	movs	r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003986:	4923      	ldr	r1, [pc, #140]	; (8003a14 <main+0x108>)
 8003988:	4823      	ldr	r0, [pc, #140]	; (8003a18 <main+0x10c>)
 800398a:	f7fe f9f5 	bl	8001d78 <xTaskCreate>
		xTaskCreate(Task2Command , "Task2Command" , 500 , NULL , 2 , &Task2CommandHandle);
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <main+0x110>)
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2302      	movs	r3, #2
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800399c:	4920      	ldr	r1, [pc, #128]	; (8003a20 <main+0x114>)
 800399e:	4821      	ldr	r0, [pc, #132]	; (8003a24 <main+0x118>)
 80039a0:	f7fe f9ea 	bl	8001d78 <xTaskCreate>
		xTaskCreate(Task3CommandProcess , "Task3CommandProcess" , 500 , NULL , 2 , &Task3CommandProcessHandle);
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <main+0x11c>)
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2302      	movs	r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039b2:	491e      	ldr	r1, [pc, #120]	; (8003a2c <main+0x120>)
 80039b4:	481e      	ldr	r0, [pc, #120]	; (8003a30 <main+0x124>)
 80039b6:	f7fe f9df 	bl	8001d78 <xTaskCreate>
		xTaskCreate(Task4UsartWrite , "Task4UsartWrite" , 500 , NULL , 2 , &Task4UsartWritedHandle);
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <main+0x128>)
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039c8:	491b      	ldr	r1, [pc, #108]	; (8003a38 <main+0x12c>)
 80039ca:	481c      	ldr	r0, [pc, #112]	; (8003a3c <main+0x130>)
 80039cc:	f7fe f9d4 	bl	8001d78 <xTaskCreate>

		vTaskStartScheduler();
 80039d0:	f7fe fb4c 	bl	800206c <vTaskStartScheduler>
 80039d4:	e013      	b.n	80039fe <main+0xf2>
	}
	else{
		sprintf(mymessage, "Queue creation failed. \r \n");
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <main+0xfc>)
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <main+0x134>)
 80039da:	4615      	mov	r5, r2
 80039dc:	461c      	mov	r4, r3
 80039de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e0:	6028      	str	r0, [r5, #0]
 80039e2:	6069      	str	r1, [r5, #4]
 80039e4:	60aa      	str	r2, [r5, #8]
 80039e6:	60eb      	str	r3, [r5, #12]
 80039e8:	cc03      	ldmia	r4!, {r0, r1}
 80039ea:	6128      	str	r0, [r5, #16]
 80039ec:	6169      	str	r1, [r5, #20]
 80039ee:	8823      	ldrh	r3, [r4, #0]
 80039f0:	78a2      	ldrb	r2, [r4, #2]
 80039f2:	832b      	strh	r3, [r5, #24]
 80039f4:	4613      	mov	r3, r2
 80039f6:	76ab      	strb	r3, [r5, #26]
		printMessage(mymessage);
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <main+0xfc>)
 80039fa:	f7ff ff5f 	bl	80038bc <printMessage>

	}
  while (1)
 80039fe:	e7fe      	b.n	80039fe <main+0xf2>
 8003a00:	20012efc 	.word	0x20012efc
 8003a04:	20012f00 	.word	0x20012f00
 8003a08:	20012fc4 	.word	0x20012fc4
 8003a0c:	08003f9c 	.word	0x08003f9c
 8003a10:	20012eec 	.word	0x20012eec
 8003a14:	08003fbc 	.word	0x08003fbc
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	20012ef0 	.word	0x20012ef0
 8003a20:	08003fd0 	.word	0x08003fd0
 8003a24:	08003a81 	.word	0x08003a81
 8003a28:	20012ef4 	.word	0x20012ef4
 8003a2c:	08003fe0 	.word	0x08003fe0
 8003a30:	08003ab1 	.word	0x08003ab1
 8003a34:	20012ef8 	.word	0x20012ef8
 8003a38:	08003ff4 	.word	0x08003ff4
 8003a3c:	08003abd 	.word	0x08003abd
 8003a40:	08004004 	.word	0x08004004

08003a44 <Task1MenuDisplay>:
  {

  }
}

void Task1MenuDisplay(void *params){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]

	char *rxdata = menuDisplay;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <Task1MenuDisplay+0x34>)
 8003a4e:	60fb      	str	r3, [r7, #12]

	while(1){

		xQueueSend(Uart_Write_Queue , &rxdata , portMAX_DELAY);
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <Task1MenuDisplay+0x38>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	f107 010c 	add.w	r1, r7, #12
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	f7fd fe23 	bl	80016a8 <xQueueGenericSend>

		xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7ff f908 	bl	8002c84 <xTaskGenericNotifyWait>
		xQueueSend(Uart_Write_Queue , &rxdata , portMAX_DELAY);
 8003a74:	e7ec      	b.n	8003a50 <Task1MenuDisplay+0xc>
 8003a76:	bf00      	nop
 8003a78:	20000028 	.word	0x20000028
 8003a7c:	20012efc 	.word	0x20012efc

08003a80 <Task2Command>:

	}

}

void Task2Command(void *params){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]

	uint8_t commandcode = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]

	while(1){

		xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7ff f8f3 	bl	8002c84 <xTaskGenericNotifyWait>

		commandcode = GetCommandCode(command_buffer);
 8003a9e:	4803      	ldr	r0, [pc, #12]	; (8003aac <Task2Command+0x2c>)
 8003aa0:	f000 f822 	bl	8003ae8 <GetCommandCode>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]
		xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003aa8:	e7f0      	b.n	8003a8c <Task2Command+0xc>
 8003aaa:	bf00      	nop
 8003aac:	20013028 	.word	0x20013028

08003ab0 <Task3CommandProcess>:

	}

}

void Task3CommandProcess(void *params){
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

	while(1){
 8003ab8:	e7fe      	b.n	8003ab8 <Task3CommandProcess+0x8>
	...

08003abc <Task4UsartWrite>:

	}

}
void Task4UsartWrite(void *params){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

	char *txdata = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

	while(1){

		xQueueReceive(Uart_Write_Queue , &txdata , portMAX_DELAY);
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <Task4UsartWrite+0x28>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f107 010c 	add.w	r1, r7, #12
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fee1 	bl	800189c <xQueueReceive>

		printMessage(txdata);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff feed 	bl	80038bc <printMessage>
		xQueueReceive(Uart_Write_Queue , &txdata , portMAX_DELAY);
 8003ae2:	e7f1      	b.n	8003ac8 <Task4UsartWrite+0xc>
 8003ae4:	20012efc 	.word	0x20012efc

08003ae8 <GetCommandCode>:
	}
}

uint8_t GetCommandCode(uint8_t *buffer){
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	return buffer[0]-48;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	3b30      	subs	r3, #48	; 0x30
 8003af6:	b2db      	uxtb	r3, r3


}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <Sys_Config>:

void Sys_Config(){
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0

	GPIO_Config();
 8003b08:	f000 f804 	bl	8003b14 <GPIO_Config>
	USART_Config();
 8003b0c:	f000 f842 	bl	8003b94 <USART_Config>

}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <GPIO_Config>:

void GPIO_Config(){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f7fc fe1f 	bl	8000760 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8003b22:	2101      	movs	r1, #1
 8003b24:	2008      	movs	r0, #8
 8003b26:	f7fc fe1b 	bl	8000760 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8003b32:	2302      	movs	r3, #2
 8003b34:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003b36:	2300      	movs	r3, #0
 8003b38:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8003b42:	2303      	movs	r3, #3
 8003b44:	717b      	strb	r3, [r7, #5]

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 8003b46:	2207      	movs	r2, #7
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4810      	ldr	r0, [pc, #64]	; (8003b8c <GPIO_Config+0x78>)
 8003b4c:	f7fc fce8 	bl	8000520 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 8003b50:	2207      	movs	r2, #7
 8003b52:	2103      	movs	r1, #3
 8003b54:	480d      	ldr	r0, [pc, #52]	; (8003b8c <GPIO_Config+0x78>)
 8003b56:	f7fc fce3 	bl	8000520 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	480b      	ldr	r0, [pc, #44]	; (8003b8c <GPIO_Config+0x78>)
 8003b60:	f7fc fc50 	bl	8000404 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003b64:	2301      	movs	r3, #1
 8003b66:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003b6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003b70:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8003b76:	2303      	movs	r3, #3
 8003b78:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4804      	ldr	r0, [pc, #16]	; (8003b90 <GPIO_Config+0x7c>)
 8003b80:	f7fc fc40 	bl	8000404 <GPIO_Init>

}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020c00 	.word	0x40020c00

08003b94 <USART_Config>:

void USART_Config(){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ba0:	f7fc fdfe 	bl	80007a0 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStruct = {0};
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	60da      	str	r2, [r3, #12]

	USART_InitStruct.USART_BaudRate = 9600;
 8003bb0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003bb4:	603b      	str	r3, [r7, #0]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8003bba:	230c      	movs	r3, #12
 8003bbc:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	813b      	strh	r3, [r7, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	80fb      	strh	r3, [r7, #6]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART2,&USART_InitStruct);
 8003bca:	463b      	mov	r3, r7
 8003bcc:	4619      	mov	r1, r3
 8003bce:	480c      	ldr	r0, [pc, #48]	; (8003c00 <USART_Config+0x6c>)
 8003bd0:	f7fc fe32 	bl	8000838 <USART_Init>

	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f240 5125 	movw	r1, #1317	; 0x525
 8003bda:	4809      	ldr	r0, [pc, #36]	; (8003c00 <USART_Config+0x6c>)
 8003bdc:	f7fc ff28 	bl	8000a30 <USART_ITConfig>

	NVIC_SetPriority(USART2_IRQn,5);
 8003be0:	2105      	movs	r1, #5
 8003be2:	2026      	movs	r0, #38	; 0x26
 8003be4:	f7ff fdea 	bl	80037bc <NVIC_SetPriority>

	NVIC_EnableIRQ(USART2_IRQn);
 8003be8:	2026      	movs	r0, #38	; 0x26
 8003bea:	f7ff fdcd 	bl	8003788 <NVIC_EnableIRQ>


	USART_Cmd(USART2,ENABLE);
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4803      	ldr	r0, [pc, #12]	; (8003c00 <USART_Config+0x6c>)
 8003bf2:	f7fc fedb 	bl	80009ac <USART_Cmd>


}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40004400 	.word	0x40004400

08003c04 <EVAL_AUDIO_TransferComplete_CallBack>:




void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003c0e:	bf00      	nop
}
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <EVAL_AUDIO_GetSampleCallBack>:



uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8003c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c32:	e003      	b.n	8003c3c <LoopCopyDataInit>

08003c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c3a:	3104      	adds	r1, #4

08003c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c44:	d3f6      	bcc.n	8003c34 <CopyDataInit>
  ldr  r2, =_sbss
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c48:	e002      	b.n	8003c50 <LoopFillZerobss>

08003c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c4c:	f842 3b04 	str.w	r3, [r2], #4

08003c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c54:	d3f9      	bcc.n	8003c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c56:	f000 f823 	bl	8003ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c5a:	f000 f94f 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c5e:	f7ff fe55 	bl	800390c <main>
  bx  lr    
 8003c62:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c68:	08004028 	.word	0x08004028
  ldr  r0, =_sdata
 8003c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c70:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 8003c74:	20000168 	.word	0x20000168
  ldr  r3, = _ebss
 8003c78:	2001303c 	.word	0x2001303c

08003c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC_IRQHandler>

08003c7e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <MemManage_Handler+0x4>

08003c84 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <BusFault_Handler+0x4>

08003c8a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <UsageFault_Handler+0x4>

08003c90 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ca4:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <SystemInit+0x60>)
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <SystemInit+0x60>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <SystemInit+0x64>)
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <SystemInit+0x64>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <SystemInit+0x64>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003cc6:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <SystemInit+0x64>)
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <SystemInit+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <SystemInit+0x64>)
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <SystemInit+0x68>)
 8003cda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003cdc:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <SystemInit+0x64>)
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <SystemInit+0x64>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <SystemInit+0x64>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003cee:	f000 f889 	bl	8003e04 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cf2:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <SystemInit+0x60>)
 8003cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cf8:	609a      	str	r2, [r3, #8]
#endif
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	24003010 	.word	0x24003010

08003d0c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	2302      	movs	r3, #2
 8003d24:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d007      	beq.n	8003d46 <SystemCoreClockUpdate+0x3a>
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d009      	beq.n	8003d4e <SystemCoreClockUpdate+0x42>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d13d      	bne.n	8003dba <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003d40:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <SystemCoreClockUpdate+0xec>)
 8003d42:	601a      	str	r2, [r3, #0]
      break;
 8003d44:	e03d      	b.n	8003dc2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <SystemCoreClockUpdate+0xf0>)
 8003d4a:	601a      	str	r2, [r3, #0]
      break;
 8003d4c:	e039      	b.n	8003dc2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003d4e:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0d9b      	lsrs	r3, r3, #22
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d62:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00c      	beq.n	8003d84 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <SystemCoreClockUpdate+0xf0>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d74:	6852      	ldr	r2, [r2, #4]
 8003d76:	0992      	lsrs	r2, r2, #6
 8003d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e00b      	b.n	8003d9c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <SystemCoreClockUpdate+0xec>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	0992      	lsrs	r2, r2, #6
 8003d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003d9c:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003db6:	6013      	str	r3, [r2, #0]
      break;
 8003db8:	e003      	b.n	8003dc2 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <SystemCoreClockUpdate+0xec>)
 8003dbe:	601a      	str	r2, [r3, #0]
      break;
 8003dc0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <SystemCoreClockUpdate+0xe4>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <SystemCoreClockUpdate+0xf4>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <SystemCoreClockUpdate+0xe8>)
 8003de0:	6013      	str	r3, [r2, #0]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	20000154 	.word	0x20000154
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	20000158 	.word	0x20000158

08003e04 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003e12:	4a36      	ldr	r2, [pc, #216]	; (8003eec <SetSysClock+0xe8>)
 8003e14:	4b35      	ldr	r3, [pc, #212]	; (8003eec <SetSysClock+0xe8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003e1e:	4b33      	ldr	r3, [pc, #204]	; (8003eec <SetSysClock+0xe8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <SetSysClock+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e3a:	d1f0      	bne.n	8003e1e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <SetSysClock+0xe8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	e001      	b.n	8003e52 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d142      	bne.n	8003ede <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e58:	4a24      	ldr	r2, [pc, #144]	; (8003eec <SetSysClock+0xe8>)
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <SetSysClock+0xe8>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <SetSysClock+0xec>)
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <SetSysClock+0xec>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <SetSysClock+0xe8>)
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <SetSysClock+0xe8>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e78:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <SetSysClock+0xe8>)
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <SetSysClock+0xe8>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e82:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <SetSysClock+0xe8>)
 8003e86:	4b19      	ldr	r3, [pc, #100]	; (8003eec <SetSysClock+0xe8>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e8e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <SetSysClock+0xe8>)
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <SetSysClock+0xf0>)
 8003e94:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <SetSysClock+0xe8>)
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <SetSysClock+0xe8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003ea2:	bf00      	nop
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <SetSysClock+0xe8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f9      	beq.n	8003ea4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <SetSysClock+0xf4>)
 8003eb2:	f240 6205 	movw	r2, #1541	; 0x605
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <SetSysClock+0xe8>)
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <SetSysClock+0xe8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003ec4:	4a09      	ldr	r2, [pc, #36]	; (8003eec <SetSysClock+0xe8>)
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <SetSysClock+0xe8>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f043 0302 	orr.w	r3, r3, #2
 8003ece:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003ed0:	bf00      	nop
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <SetSysClock+0xe8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d1f9      	bne.n	8003ed2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	07405408 	.word	0x07405408
 8003ef8:	40023c00 	.word	0x40023c00

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0d      	ldr	r6, [pc, #52]	; (8003f34 <__libc_init_array+0x38>)
 8003f00:	4c0d      	ldr	r4, [pc, #52]	; (8003f38 <__libc_init_array+0x3c>)
 8003f02:	1ba4      	subs	r4, r4, r6
 8003f04:	10a4      	asrs	r4, r4, #2
 8003f06:	2500      	movs	r5, #0
 8003f08:	42a5      	cmp	r5, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	4e0b      	ldr	r6, [pc, #44]	; (8003f3c <__libc_init_array+0x40>)
 8003f0e:	4c0c      	ldr	r4, [pc, #48]	; (8003f40 <__libc_init_array+0x44>)
 8003f10:	f000 f82c 	bl	8003f6c <_init>
 8003f14:	1ba4      	subs	r4, r4, r6
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	2500      	movs	r5, #0
 8003f1a:	42a5      	cmp	r5, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f24:	4798      	blx	r3
 8003f26:	3501      	adds	r5, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2e:	4798      	blx	r3
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	08004020 	.word	0x08004020
 8003f38:	08004020 	.word	0x08004020
 8003f3c:	08004020 	.word	0x08004020
 8003f40:	08004024 	.word	0x08004024

08003f44 <memcpy>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	1e43      	subs	r3, r0, #1
 8003f48:	440a      	add	r2, r1
 8003f4a:	4291      	cmp	r1, r2
 8003f4c:	d100      	bne.n	8003f50 <memcpy+0xc>
 8003f4e:	bd10      	pop	{r4, pc}
 8003f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f58:	e7f7      	b.n	8003f4a <memcpy+0x6>

08003f5a <memset>:
 8003f5a:	4402      	add	r2, r0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d100      	bne.n	8003f64 <memset+0xa>
 8003f62:	4770      	bx	lr
 8003f64:	f803 1b01 	strb.w	r1, [r3], #1
 8003f68:	e7f9      	b.n	8003f5e <memset+0x4>
	...

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
